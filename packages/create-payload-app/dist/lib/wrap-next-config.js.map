{"version":3,"sources":["../../src/lib/wrap-next-config.ts"],"sourcesContent":["import type { Program } from 'esprima-next'\n\nimport chalk from 'chalk'\nimport { Syntax, parseModule } from 'esprima-next'\nimport fs from 'fs'\n\nimport { log, warning } from '../utils/log.js'\n\nexport const withPayloadStatement = {\n  cjs: `const { withPayload } = require('@payloadcms/next/withPayload')\\n`,\n  esm: `import { withPayload } from '@payloadcms/next/withPayload'\\n`,\n}\n\ntype NextConfigType = 'cjs' | 'esm'\n\nexport const wrapNextConfig = (args: {\n  nextConfigPath: string\n  nextConfigType: NextConfigType\n}) => {\n  const { nextConfigPath, nextConfigType: configType } = args\n  const configContent = fs.readFileSync(nextConfigPath, 'utf8')\n  const { modifiedConfigContent: newConfig, success } = parseAndModifyConfigContent(\n    configContent,\n    configType,\n  )\n\n  if (!success) {\n    return\n  }\n\n  fs.writeFileSync(nextConfigPath, newConfig)\n}\n\n/**\n * Parses config content with AST and wraps it with withPayload function\n */\nexport function parseAndModifyConfigContent(\n  content: string,\n  configType: NextConfigType,\n): { modifiedConfigContent: string; success: boolean } {\n  content = withPayloadStatement[configType] + content\n\n  let ast: Program | undefined\n  try {\n    ast = parseModule(content, { loc: true })\n  } catch (error: unknown) {\n    if (error instanceof Error) {\n      warning(`Unable to parse Next config. Error: ${error.message} `)\n      warnUserWrapNotSuccessful(configType)\n    }\n    return {\n      modifiedConfigContent: content,\n      success: false,\n    }\n  }\n\n  if (configType === 'esm') {\n    const exportDefaultDeclaration = ast.body.find(\n      (p) => p.type === Syntax.ExportDefaultDeclaration,\n    ) as Directive | undefined\n\n    const exportNamedDeclaration = ast.body.find(\n      (p) => p.type === Syntax.ExportNamedDeclaration,\n    ) as ExportNamedDeclaration | undefined\n\n    if (!exportDefaultDeclaration && !exportNamedDeclaration) {\n      throw new Error('Could not find ExportDefaultDeclaration in next.config.js')\n    }\n\n    if (exportDefaultDeclaration && exportDefaultDeclaration.declaration?.loc) {\n      const modifiedConfigContent = insertBeforeAndAfter(\n        content,\n        exportDefaultDeclaration.declaration.loc,\n      )\n      return { modifiedConfigContent, success: true }\n    } else if (exportNamedDeclaration) {\n      const exportSpecifier = exportNamedDeclaration.specifiers.find(\n        (s) =>\n          s.type === 'ExportSpecifier' &&\n          s.exported?.name === 'default' &&\n          s.local?.type === 'Identifier' &&\n          s.local?.name,\n      )\n\n      if (exportSpecifier) {\n        warning('Could not automatically wrap next.config.js with withPayload.')\n        warning('Automatic wrapping of named exports as default not supported yet.')\n\n        warnUserWrapNotSuccessful(configType)\n        return {\n          modifiedConfigContent: content,\n          success: false,\n        }\n      }\n    }\n\n    warning('Could not automatically wrap Next config with withPayload.')\n    warnUserWrapNotSuccessful(configType)\n    return {\n      modifiedConfigContent: content,\n      success: false,\n    }\n  } else if (configType === 'cjs') {\n    // Find `module.exports = X`\n    const moduleExports = ast.body.find(\n      (p) =>\n        p.type === Syntax.ExpressionStatement &&\n        p.expression?.type === Syntax.AssignmentExpression &&\n        p.expression.left?.type === Syntax.MemberExpression &&\n        p.expression.left.object?.type === Syntax.Identifier &&\n        p.expression.left.object.name === 'module' &&\n        p.expression.left.property?.type === Syntax.Identifier &&\n        p.expression.left.property.name === 'exports',\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    ) as any\n\n    if (moduleExports && moduleExports.expression.right?.loc) {\n      const modifiedConfigContent = insertBeforeAndAfter(\n        content,\n        moduleExports.expression.right.loc,\n      )\n      return { modifiedConfigContent, success: true }\n    }\n\n    return {\n      modifiedConfigContent: content,\n      success: false,\n    }\n  }\n\n  warning('Could not automatically wrap Next config with withPayload.')\n  warnUserWrapNotSuccessful(configType)\n  return {\n    modifiedConfigContent: content,\n    success: false,\n  }\n}\n\nfunction warnUserWrapNotSuccessful(configType: NextConfigType) {\n  // Output directions for user to update next.config.js\n  const withPayloadMessage = `\n\n  ${chalk.bold(`Please manually wrap your existing next.config.js with the withPayload function. Here is an example:`)}\n\n  ${withPayloadStatement[configType]}\n\n  const nextConfig = {\n    // Your Next.js config here\n  }\n\n  ${configType === 'esm' ? 'export default withPayload(nextConfig)' : 'module.exports = withPayload(nextConfig)'}\n\n`\n\n  log(withPayloadMessage)\n}\n\ntype Directive = {\n  declaration?: {\n    loc: Loc\n  }\n}\n\ntype ExportNamedDeclaration = {\n  declaration: null\n  loc: Loc\n  specifiers: {\n    exported: {\n      loc: Loc\n      name: string\n      type: string\n    }\n    loc: Loc\n    local: {\n      loc: Loc\n      name: string\n      type: string\n    }\n    type: string\n  }[]\n  type: string\n}\n\ntype Loc = {\n  end: { column: number; line: number }\n  start: { column: number; line: number }\n}\n\nfunction insertBeforeAndAfter(content: string, loc: Loc) {\n  const { end, start } = loc\n  const lines = content.split('\\n')\n\n  const insert = (line: string, column: number, text: string) => {\n    return line.slice(0, column) + text + line.slice(column)\n  }\n\n  // insert ) after end\n  lines[end.line - 1] = insert(lines[end.line - 1], end.column, ')')\n  // insert withPayload before start\n  if (start.line === end.line) {\n    lines[end.line - 1] = insert(lines[end.line - 1], start.column, 'withPayload(')\n  } else {\n    lines[start.line - 1] = insert(lines[start.line - 1], start.column, 'withPayload(')\n  }\n\n  return lines.join('\\n')\n}\n"],"names":["chalk","Syntax","parseModule","fs","log","warning","withPayloadStatement","cjs","esm","wrapNextConfig","args","nextConfigPath","nextConfigType","configType","configContent","readFileSync","modifiedConfigContent","newConfig","success","parseAndModifyConfigContent","writeFileSync","content","ast","loc","error","Error","message","warnUserWrapNotSuccessful","exportDefaultDeclaration","body","find","p","type","ExportDefaultDeclaration","exportNamedDeclaration","ExportNamedDeclaration","declaration","insertBeforeAndAfter","exportSpecifier","specifiers","s","exported","name","local","moduleExports","ExpressionStatement","expression","AssignmentExpression","left","MemberExpression","object","Identifier","property","right","withPayloadMessage","bold","end","start","lines","split","insert","line","column","text","slice","join"],"mappings":"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"}