{"version":3,"sources":["../../src/lib/select-db.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport slugify from '@sindresorhus/slugify'\n\nimport type { CliArgs, DbDetails, DbType } from '../types.js'\n\ntype DbChoice = {\n  dbConnectionPrefix: `${string}/`\n  title: string\n  value: DbType\n}\n\nconst dbChoiceRecord: Record<DbType, DbChoice> = {\n  mongodb: {\n    dbConnectionPrefix: 'mongodb://127.0.0.1/',\n    title: 'MongoDB',\n    value: 'mongodb',\n  },\n  postgres: {\n    dbConnectionPrefix: 'postgres://postgres:<password>@127.0.0.1:5432/',\n    title: 'PostgreSQL (beta)',\n    value: 'postgres',\n  },\n}\n\nexport async function selectDb(args: CliArgs, projectName: string): Promise<DbDetails> {\n  let dbType: DbType | symbol | undefined = undefined\n  if (args['--db']) {\n    if (!Object.values(dbChoiceRecord).some((dbChoice) => dbChoice.value === args['--db'])) {\n      throw new Error(\n        `Invalid database type given. Valid types are: ${Object.values(dbChoiceRecord)\n          .map((dbChoice) => dbChoice.value)\n          .join(', ')}`,\n      )\n    }\n    dbType = args['--db'] as DbType\n  } else {\n    dbType = await p.select<{ label: string; value: DbType }[], DbType>({\n      initialValue: 'mongodb',\n      message: `Select a database`,\n      options: [\n        { label: 'MongoDB', value: 'mongodb' },\n        { label: 'Postgres', value: 'postgres' },\n      ],\n    })\n    if (p.isCancel(dbType)) process.exit(0)\n  }\n\n  const dbChoice = dbChoiceRecord[dbType]\n\n  let dbUri: string | symbol | undefined = undefined\n  const initialDbUri = `${dbChoice.dbConnectionPrefix}${\n    projectName === '.' ? `payload-${getRandomDigitSuffix()}` : slugify(projectName)\n  }`\n\n  if (args['--db-accept-recommended']) {\n    dbUri = initialDbUri\n  } else if (args['--db-connection-string']) {\n    dbUri = args['--db-connection-string']\n  } else {\n    dbUri = await p.text({\n      initialValue: initialDbUri,\n      message: `Enter ${dbChoice.title.split(' ')[0]} connection string`, // strip beta from title\n    })\n    if (p.isCancel(dbUri)) process.exit(0)\n  }\n\n  return {\n    type: dbChoice.value,\n    dbUri,\n  }\n}\n\nfunction getRandomDigitSuffix(): string {\n  return (Math.random() * Math.pow(10, 6)).toFixed(0)\n}\n"],"names":["p","slugify","dbChoiceRecord","mongodb","dbConnectionPrefix","title","value","postgres","selectDb","args","projectName","dbType","undefined","Object","values","some","dbChoice","Error","map","join","select","initialValue","message","options","label","isCancel","process","exit","dbUri","initialDbUri","getRandomDigitSuffix","text","split","type","Math","random","pow","toFixed"],"mappings":"AAAA,YAAYA,OAAO,iBAAgB;AACnC,OAAOC,aAAa,wBAAuB;AAU3C,MAAMC,iBAA2C;IAC/CC,SAAS;QACPC,oBAAoB;QACpBC,OAAO;QACPC,OAAO;IACT;IACAC,UAAU;QACRH,oBAAoB;QACpBC,OAAO;QACPC,OAAO;IACT;AACF;AAEA,OAAO,eAAeE,SAASC,IAAa,EAAEC,WAAmB;IAC/D,IAAIC,SAAsCC;IAC1C,IAAIH,IAAI,CAAC,OAAO,EAAE;QAChB,IAAI,CAACI,OAAOC,MAAM,CAACZ,gBAAgBa,IAAI,CAAC,CAACC,WAAaA,SAASV,KAAK,KAAKG,IAAI,CAAC,OAAO,GAAG;YACtF,MAAM,IAAIQ,MACR,CAAC,8CAA8C,EAAEJ,OAAOC,MAAM,CAACZ,gBAC5DgB,GAAG,CAAC,CAACF,WAAaA,SAASV,KAAK,EAChCa,IAAI,CAAC,MAAM,CAAC;QAEnB;QACAR,SAASF,IAAI,CAAC,OAAO;IACvB,OAAO;QACLE,SAAS,MAAMX,EAAEoB,MAAM,CAA6C;YAClEC,cAAc;YACdC,SAAS,CAAC,iBAAiB,CAAC;YAC5BC,SAAS;gBACP;oBAAEC,OAAO;oBAAWlB,OAAO;gBAAU;gBACrC;oBAAEkB,OAAO;oBAAYlB,OAAO;gBAAW;aACxC;QACH;QACA,IAAIN,EAAEyB,QAAQ,CAACd,SAASe,QAAQC,IAAI,CAAC;IACvC;IAEA,MAAMX,WAAWd,cAAc,CAACS,OAAO;IAEvC,IAAIiB,QAAqChB;IACzC,MAAMiB,eAAe,CAAC,EAAEb,SAASZ,kBAAkB,CAAC,EAClDM,gBAAgB,MAAM,CAAC,QAAQ,EAAEoB,uBAAuB,CAAC,GAAG7B,QAAQS,aACrE,CAAC;IAEF,IAAID,IAAI,CAAC,0BAA0B,EAAE;QACnCmB,QAAQC;IACV,OAAO,IAAIpB,IAAI,CAAC,yBAAyB,EAAE;QACzCmB,QAAQnB,IAAI,CAAC,yBAAyB;IACxC,OAAO;QACLmB,QAAQ,MAAM5B,EAAE+B,IAAI,CAAC;YACnBV,cAAcQ;YACdP,SAAS,CAAC,MAAM,EAAEN,SAASX,KAAK,CAAC2B,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC;QACpE;QACA,IAAIhC,EAAEyB,QAAQ,CAACG,QAAQF,QAAQC,IAAI,CAAC;IACtC;IAEA,OAAO;QACLM,MAAMjB,SAASV,KAAK;QACpBsB;IACF;AACF;AAEA,SAASE;IACP,OAAO,AAACI,CAAAA,KAAKC,MAAM,KAAKD,KAAKE,GAAG,CAAC,IAAI,EAAC,EAAGC,OAAO,CAAC;AACnD"}