{"version":3,"sources":["../../src/lib/create-project.spec.ts"],"sourcesContent":["import { jest } from '@jest/globals'\nimport fs from 'fs'\nimport fse from 'fs-extra'\nimport globby from 'globby'\nimport * as os from 'node:os'\nimport path from 'path'\n\nimport type { CliArgs, DbType, ProjectTemplate } from '../types.js'\n\nimport { createProject } from './create-project.js'\nimport { dbReplacements } from './replacements.js'\nimport { getValidTemplates } from './templates.js'\n\ndescribe('createProject', () => {\n  let projectDir: string\n  beforeAll(() => {\n    console.log = jest.fn()\n  })\n\n  beforeEach(() => {\n    const tempDirectory = fs.realpathSync(os.tmpdir())\n    projectDir = `${tempDirectory}/${Math.random().toString(36).substring(7)}`\n  })\n\n  afterEach(() => {\n    if (fse.existsSync(projectDir)) {\n      fse.rmSync(projectDir, { recursive: true })\n    }\n  })\n\n  describe('#createProject', () => {\n    const args = {\n      _: ['project-name'],\n      '--db': 'mongodb',\n      '--local-template': 'blank-3.0',\n      '--no-deps': true,\n    } as CliArgs\n    const packageManager = 'yarn'\n\n    it('creates plugin template', async () => {\n      const projectName = 'plugin'\n      const template: ProjectTemplate = {\n        name: 'plugin',\n        type: 'plugin',\n        description: 'Template for creating a Payload plugin',\n        url: 'https://github.com/payloadcms/payload-plugin-template',\n      }\n      await createProject({\n        cliArgs: args,\n        packageManager,\n        projectDir,\n        projectName,\n        template,\n      })\n\n      const packageJsonPath = path.resolve(projectDir, 'package.json')\n      const packageJson = fse.readJsonSync(packageJsonPath)\n\n      // Check package name and description\n      expect(packageJson.name).toEqual(projectName)\n    })\n\n    describe('creates project from template', () => {\n      const templates = getValidTemplates()\n\n      it.each([\n        ['blank-3.0', 'mongodb'],\n        ['blank-3.0', 'postgres'],\n\n        // TODO: Re-enable these once 3.0 is stable and templates updated\n        // ['website', 'mongodb'],\n        // ['website', 'postgres'],\n        // ['ecommerce', 'mongodb'],\n        // ['ecommerce', 'postgres'],\n      ])('update config and deps: %s, %s', async (templateName, db) => {\n        const projectName = 'starter-project'\n\n        const template = templates.find((t) => t.name === templateName)\n\n        const cliArgs = {\n          ...args,\n          '--db': db,\n          '--local-template': templateName,\n        } as CliArgs\n\n        await createProject({\n          cliArgs,\n          dbDetails: {\n            type: db as DbType,\n            dbUri: `${db}://localhost:27017/create-project-test`,\n          },\n          packageManager,\n          projectDir,\n          projectName,\n          template: template as ProjectTemplate,\n        })\n\n        const dbReplacement = dbReplacements[db as DbType]\n\n        const packageJsonPath = path.resolve(projectDir, 'package.json')\n        const packageJson = fse.readJsonSync(packageJsonPath)\n\n        // Verify git was initialized\n        expect(fse.existsSync(path.resolve(projectDir, '.git'))).toBe(true)\n\n        // Should only have one db adapter\n        expect(\n          Object.keys(packageJson.dependencies).filter((n) => n.startsWith('@payloadcms/db-')),\n        ).toHaveLength(1)\n\n        const payloadConfigPath = (\n          await globby('**/payload.config.ts', {\n            absolute: true,\n            cwd: projectDir,\n          })\n        )?.[0]\n\n        if (!payloadConfigPath) {\n          throw new Error(`Could not find payload.config.ts inside ${projectDir}`)\n        }\n\n        const content = fse.readFileSync(payloadConfigPath, 'utf-8')\n\n        // Check payload.config.ts\n        expect(content).not.toContain('// database-adapter-import')\n        expect(content).toContain(dbReplacement.importReplacement)\n\n        expect(content).not.toContain('// database-adapter-config-start')\n        expect(content).not.toContain('// database-adapter-config-end')\n        expect(content).toContain(dbReplacement.configReplacement().join('\\n'))\n      })\n    })\n  })\n})\n"],"names":["jest","fs","fse","globby","os","path","createProject","dbReplacements","getValidTemplates","describe","projectDir","beforeAll","console","log","fn","beforeEach","tempDirectory","realpathSync","tmpdir","Math","random","toString","substring","afterEach","existsSync","rmSync","recursive","args","_","packageManager","it","projectName","template","name","type","description","url","cliArgs","packageJsonPath","resolve","packageJson","readJsonSync","expect","toEqual","templates","each","templateName","db","find","t","dbDetails","dbUri","dbReplacement","toBe","Object","keys","dependencies","filter","n","startsWith","toHaveLength","payloadConfigPath","absolute","cwd","Error","content","readFileSync","not","toContain","importReplacement","configReplacement","join"],"mappings":"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"}