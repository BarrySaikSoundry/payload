{"version":3,"sources":["../../src/lib/create-project.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport chalk from 'chalk'\nimport degit from 'degit'\nimport execa from 'execa'\nimport fse from 'fs-extra'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\n\nimport type { CliArgs, DbDetails, PackageManager, ProjectTemplate } from '../types.js'\n\nimport { tryInitRepoAndCommit } from '../utils/git.js'\nimport { debug, error, info, warning } from '../utils/log.js'\nimport { configurePayloadConfig } from './configure-payload-config.js'\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\nasync function createOrFindProjectDir(projectDir: string): Promise<void> {\n  const pathExists = await fse.pathExists(projectDir)\n  if (!pathExists) {\n    await fse.mkdir(projectDir)\n  }\n}\n\nasync function installDeps(args: {\n  cliArgs: CliArgs\n  packageManager: PackageManager\n  projectDir: string\n}): Promise<boolean> {\n  const { cliArgs, packageManager, projectDir } = args\n  if (cliArgs['--no-deps']) {\n    return true\n  }\n  let installCmd = 'npm install --legacy-peer-deps'\n\n  if (packageManager === 'yarn') {\n    installCmd = 'yarn'\n  } else if (packageManager === 'pnpm') {\n    installCmd = 'pnpm install'\n  }\n\n  try {\n    await execa.command(installCmd, {\n      cwd: path.resolve(projectDir),\n    })\n    return true\n  } catch (err: unknown) {\n    error(`Error installing dependencies${err instanceof Error ? `: ${err.message}` : ''}.`)\n    return false\n  }\n}\n\nexport async function createProject(args: {\n  cliArgs: CliArgs\n  dbDetails?: DbDetails\n  packageManager: PackageManager\n  projectDir: string\n  projectName: string\n  template: ProjectTemplate\n}): Promise<void> {\n  const { cliArgs, dbDetails, packageManager, projectDir, projectName, template } = args\n\n  if (cliArgs['--dry-run']) {\n    debug(`Dry run: Creating project in ${chalk.green(projectDir)}`)\n    return\n  }\n\n  await createOrFindProjectDir(projectDir)\n\n  if (cliArgs['--local-template']) {\n    // Copy template from local path. For development purposes.\n    const localTemplate = path.resolve(\n      dirname,\n      '../../../../templates/',\n      cliArgs['--local-template'],\n    )\n    await fse.copy(localTemplate, projectDir)\n  } else if ('url' in template) {\n    let templateUrl = template.url\n    if (cliArgs['--template-branch']) {\n      templateUrl = `${template.url}#${cliArgs['--template-branch']}`\n      debug(`Using template url: ${templateUrl}`)\n    }\n    const emitter = degit(templateUrl)\n    await emitter.clone(projectDir)\n  }\n\n  const spinner = p.spinner()\n  spinner.start('Checking latest Payload version...')\n\n  await updatePackageJSON({ projectDir, projectName })\n  spinner.message('Configuring Payload...')\n  await configurePayloadConfig({\n    dbType: dbDetails?.type,\n    projectDirOrConfigPath: { projectDir },\n  })\n\n  // Remove yarn.lock file. This is only desired in Payload Cloud.\n  const lockPath = path.resolve(projectDir, 'yarn.lock')\n  if (fse.existsSync(lockPath)) {\n    await fse.remove(lockPath)\n  }\n\n  if (!cliArgs['--no-deps']) {\n    info(`Using ${packageManager}.\\n`)\n    spinner.message('Installing dependencies...')\n    const result = await installDeps({ cliArgs, packageManager, projectDir })\n    if (result) {\n      spinner.stop('Successfully installed Payload and dependencies')\n    } else {\n      spinner.stop('Error installing dependencies', 1)\n    }\n  } else {\n    spinner.stop('Dependency installation skipped')\n  }\n\n  if (!cliArgs['--no-git']) {\n    tryInitRepoAndCommit({ cwd: projectDir })\n  }\n}\n\nexport async function updatePackageJSON(args: {\n  projectDir: string\n  projectName: string\n}): Promise<void> {\n  const { projectDir, projectName } = args\n  const packageJsonPath = path.resolve(projectDir, 'package.json')\n  try {\n    const packageObj = await fse.readJson(packageJsonPath)\n    packageObj.name = projectName\n    await fse.writeJson(packageJsonPath, packageObj, { spaces: 2 })\n  } catch (err: unknown) {\n    warning(`Unable to update name in package.json. ${err instanceof Error ? err.message : ''}`)\n  }\n}\n"],"names":["p","chalk","degit","execa","fse","fileURLToPath","path","tryInitRepoAndCommit","debug","error","info","warning","configurePayloadConfig","filename","url","dirname","createOrFindProjectDir","projectDir","pathExists","mkdir","installDeps","args","cliArgs","packageManager","installCmd","command","cwd","resolve","err","Error","message","createProject","dbDetails","projectName","template","green","localTemplate","copy","templateUrl","emitter","clone","spinner","start","updatePackageJSON","dbType","type","projectDirOrConfigPath","lockPath","existsSync","remove","result","stop","packageJsonPath","packageObj","readJson","name","writeJson","spaces"],"mappings":"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"}