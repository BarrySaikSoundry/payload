{"version":3,"sources":["../../src/lib/init-next.ts"],"sourcesContent":["import type { CompilerOptions } from 'typescript'\n\nimport * as p from '@clack/prompts'\nimport { parse, stringify } from 'comment-json'\nimport execa from 'execa'\nimport fs from 'fs'\nimport fse from 'fs-extra'\nimport globby from 'globby'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\nimport { promisify } from 'util'\n\nimport type { CliArgs, DbType, NextAppDetails, NextConfigType, PackageManager } from '../types.js'\n\nimport { copyRecursiveSync } from '../utils/copy-recursive-sync.js'\nimport { debug as origDebug, warning } from '../utils/log.js'\nimport { moveMessage } from '../utils/messages.js'\nimport { installPackages } from './install-packages.js'\nimport { wrapNextConfig } from './wrap-next-config.js'\n\nconst readFile = promisify(fs.readFile)\nconst writeFile = promisify(fs.writeFile)\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\ntype InitNextArgs = {\n  dbType: DbType\n  nextAppDetails?: NextAppDetails\n  packageManager: PackageManager\n  projectDir: string\n  useDistFiles?: boolean\n} & Pick<CliArgs, '--debug'>\n\ntype InitNextResult =\n  | {\n      isSrcDir: boolean\n      nextAppDir: string\n      payloadConfigPath: string\n      success: true\n    }\n  | { isSrcDir: boolean; nextAppDir?: string; reason: string; success: false }\n\nexport async function initNext(args: InitNextArgs): Promise<InitNextResult> {\n  const { dbType: dbType, packageManager, projectDir } = args\n\n  const nextAppDetails = args.nextAppDetails || (await getNextAppDetails(projectDir))\n\n  if (!nextAppDetails.nextAppDir) {\n    warning(`Could not find app directory in ${projectDir}, creating...`)\n    const createdAppDir = path.resolve(projectDir, nextAppDetails.isSrcDir ? 'src/app' : 'app')\n    fse.mkdirSync(createdAppDir, { recursive: true })\n    nextAppDetails.nextAppDir = createdAppDir\n  }\n\n  const { hasTopLevelLayout, isPayloadInstalled, isSrcDir, nextAppDir, nextConfigType } =\n    nextAppDetails\n\n  if (!nextConfigType) {\n    return {\n      isSrcDir,\n      nextAppDir,\n      reason: `Could not determine Next Config type in ${projectDir}. Possibly try renaming next.config.js to next.config.cjs or next.config.mjs.`,\n      success: false,\n    }\n  }\n\n  if (hasTopLevelLayout) {\n    // Output directions for user to move all files from app to top-level directory named `(app)`\n    p.log.warn(moveMessage({ nextAppDir, projectDir }))\n    return {\n      isSrcDir,\n      nextAppDir,\n      reason: 'Found existing layout.tsx in app directory',\n      success: false,\n    }\n  }\n\n  const installSpinner = p.spinner()\n  installSpinner.start('Installing Payload and dependencies...')\n\n  const configurationResult = installAndConfigurePayload({\n    ...args,\n    nextAppDetails,\n    nextConfigType,\n    useDistFiles: true, // Requires running 'pnpm pack-template-files' in cpa\n  })\n\n  if (configurationResult.success === false) {\n    installSpinner.stop(configurationResult.reason, 1)\n    return { ...configurationResult, isSrcDir, success: false }\n  }\n\n  const { success: installSuccess } = await installDeps(projectDir, packageManager, dbType)\n  if (!installSuccess) {\n    installSpinner.stop('Failed to install dependencies', 1)\n    return {\n      ...configurationResult,\n      isSrcDir,\n      reason: 'Failed to install dependencies',\n      success: false,\n    }\n  }\n\n  // Add `@payload-config` to tsconfig.json `paths`\n  await addPayloadConfigToTsConfig(projectDir, isSrcDir)\n  installSpinner.stop('Successfully installed Payload and dependencies')\n  return { ...configurationResult, isSrcDir, nextAppDir, success: true }\n}\n\nasync function addPayloadConfigToTsConfig(projectDir: string, isSrcDir: boolean) {\n  const tsConfigPath = path.resolve(projectDir, 'tsconfig.json')\n\n  // Check if tsconfig.json exists\n  if (!fs.existsSync(tsConfigPath)) {\n    warning(`Could not find tsconfig.json to add @payload-config path.`)\n    return\n  }\n  const userTsConfigContent = await readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = parse(userTsConfigContent) as {\n    compilerOptions?: CompilerOptions\n  }\n\n  const hasBaseUrl =\n    userTsConfig?.compilerOptions?.baseUrl && userTsConfig?.compilerOptions?.baseUrl !== '.'\n  const baseUrl = hasBaseUrl ? userTsConfig?.compilerOptions?.baseUrl : './'\n\n  if (!userTsConfig.compilerOptions && !('extends' in userTsConfig)) {\n    userTsConfig.compilerOptions = {}\n  }\n\n  if (\n    !userTsConfig.compilerOptions?.paths?.['@payload-config'] &&\n    userTsConfig.compilerOptions?.paths\n  ) {\n    userTsConfig.compilerOptions.paths = {\n      ...(userTsConfig.compilerOptions.paths || {}),\n      '@payload-config': [`${baseUrl}${isSrcDir ? 'src/' : ''}payload.config.ts`],\n    }\n    await writeFile(tsConfigPath, stringify(userTsConfig, null, 2), { encoding: 'utf8' })\n  }\n}\n\nfunction installAndConfigurePayload(\n  args: {\n    nextAppDetails: NextAppDetails\n    nextConfigType: NextConfigType\n    useDistFiles?: boolean\n  } & InitNextArgs,\n):\n  | { payloadConfigPath: string; success: true }\n  | { payloadConfigPath?: string; reason: string; success: false } {\n  const {\n    '--debug': debug,\n    nextAppDetails: { isSrcDir, nextAppDir, nextConfigPath } = {},\n    nextConfigType,\n    projectDir,\n    useDistFiles,\n  } = args\n\n  if (!nextAppDir || !nextConfigPath) {\n    return {\n      reason: 'Could not find app directory or next.config.js',\n      success: false,\n    }\n  }\n\n  const logDebug = (message: string) => {\n    if (debug) origDebug(message)\n  }\n\n  if (!fs.existsSync(projectDir)) {\n    return {\n      reason: `Could not find specified project directory at ${projectDir}`,\n      success: false,\n    }\n  }\n\n  const templateFilesPath =\n    dirname.endsWith('dist') || useDistFiles\n      ? path.resolve(dirname, '../..', 'dist/template')\n      : path.resolve(dirname, '../../../../templates/blank-3.0')\n\n  logDebug(`Using template files from: ${templateFilesPath}`)\n\n  if (!fs.existsSync(templateFilesPath)) {\n    return {\n      reason: `Could not find template source files from ${templateFilesPath}`,\n      success: false,\n    }\n  } else {\n    logDebug('Found template source files')\n  }\n\n  logDebug(`Copying template files from ${templateFilesPath} to ${nextAppDir}`)\n\n  const templateSrcDir = path.resolve(templateFilesPath, isSrcDir ? '' : 'src')\n\n  logDebug(`templateSrcDir: ${templateSrcDir}`)\n  logDebug(`nextAppDir: ${nextAppDir}`)\n  logDebug(`projectDir: ${projectDir}`)\n  logDebug(`nextConfigPath: ${nextConfigPath}`)\n  logDebug(`payloadConfigPath: ${path.resolve(projectDir, 'payload.config.ts')}`)\n\n  logDebug(\n    `isSrcDir: ${isSrcDir}. source: ${templateSrcDir}. dest: ${path.dirname(nextConfigPath)}`,\n  )\n\n  // This is a little clunky and needs to account for isSrcDir\n  copyRecursiveSync(templateSrcDir, path.dirname(nextConfigPath), debug)\n\n  // Wrap next.config.js with withPayload\n  wrapNextConfig({ nextConfigPath, nextConfigType })\n\n  return {\n    payloadConfigPath: path.resolve(nextAppDir, '../payload.config.ts'),\n    success: true,\n  }\n}\n\nasync function installDeps(projectDir: string, packageManager: PackageManager, dbType: DbType) {\n  const packagesToInstall = [\n    'payload',\n    '@payloadcms/next',\n    '@payloadcms/richtext-lexical',\n    '@payloadcms/plugin-cloud',\n  ].map((pkg) => `${pkg}@beta`)\n\n  packagesToInstall.push(`@payloadcms/db-${dbType}@beta`)\n\n  // Match graphql version of @payloadcms/next\n  packagesToInstall.push('graphql@^16.8.1')\n\n  return await installPackages({ packageManager, packagesToInstall, projectDir })\n}\n\nexport async function getNextAppDetails(projectDir: string): Promise<NextAppDetails> {\n  const isSrcDir = fs.existsSync(path.resolve(projectDir, 'src'))\n\n  const nextConfigPath: string | undefined = (\n    await globby('next.config.*js', { absolute: true, cwd: projectDir })\n  )?.[0]\n\n  if (!nextConfigPath || nextConfigPath.length === 0) {\n    return {\n      hasTopLevelLayout: false,\n      isSrcDir,\n      nextConfigPath: undefined,\n    }\n  }\n\n  const packageObj = await fse.readJson(path.resolve(projectDir, 'package.json'))\n  if (packageObj.dependencies?.payload) {\n    return {\n      hasTopLevelLayout: false,\n      isPayloadInstalled: true,\n      isSrcDir,\n      nextConfigPath,\n    }\n  }\n\n  let nextAppDir: string | undefined = (\n    await globby(['**/app'], {\n      absolute: true,\n      cwd: projectDir,\n      ignore: ['**/node_modules/**'],\n      onlyDirectories: true,\n    })\n  )?.[0]\n\n  if (!nextAppDir || nextAppDir.length === 0) {\n    nextAppDir = undefined\n  }\n\n  const configType = getProjectType({ nextConfigPath, packageObj })\n\n  const hasTopLevelLayout = nextAppDir\n    ? fs.existsSync(path.resolve(nextAppDir, 'layout.tsx'))\n    : false\n\n  return { hasTopLevelLayout, isSrcDir, nextAppDir, nextConfigPath, nextConfigType: configType }\n}\n\nfunction getProjectType(args: {\n  nextConfigPath: string\n  packageObj: Record<string, unknown>\n}): 'cjs' | 'esm' {\n  const { nextConfigPath, packageObj } = args\n  if (nextConfigPath.endsWith('.mjs')) {\n    return 'esm'\n  }\n  if (nextConfigPath.endsWith('.cjs')) {\n    return 'cjs'\n  }\n\n  const packageJsonType = packageObj.type\n  if (packageJsonType === 'module') {\n    return 'esm'\n  }\n  if (packageJsonType === 'commonjs') {\n    return 'cjs'\n  }\n\n  return 'cjs'\n}\n"],"names":["p","parse","stringify","fs","fse","globby","fileURLToPath","path","promisify","copyRecursiveSync","debug","origDebug","warning","moveMessage","installPackages","wrapNextConfig","readFile","writeFile","filename","url","dirname","initNext","args","dbType","packageManager","projectDir","nextAppDetails","getNextAppDetails","nextAppDir","createdAppDir","resolve","isSrcDir","mkdirSync","recursive","hasTopLevelLayout","isPayloadInstalled","nextConfigType","reason","success","log","warn","installSpinner","spinner","start","configurationResult","installAndConfigurePayload","useDistFiles","stop","installSuccess","installDeps","addPayloadConfigToTsConfig","tsConfigPath","existsSync","userTsConfigContent","encoding","userTsConfig","hasBaseUrl","compilerOptions","baseUrl","paths","nextConfigPath","logDebug","message","templateFilesPath","endsWith","templateSrcDir","payloadConfigPath","packagesToInstall","map","pkg","push","absolute","cwd","length","undefined","packageObj","readJson","dependencies","payload","ignore","onlyDirectories","configType","getProjectType","packageJsonType","type"],"mappings":"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"}