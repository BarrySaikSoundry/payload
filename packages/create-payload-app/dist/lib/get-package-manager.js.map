{"version":3,"sources":["../../src/lib/get-package-manager.ts"],"sourcesContent":["import execa from 'execa'\nimport fse from 'fs-extra'\n\nimport type { CliArgs, PackageManager } from '../types.js'\n\nexport async function getPackageManager(args: {\n  cliArgs?: CliArgs\n  projectDir: string\n}): Promise<PackageManager> {\n  const { cliArgs, projectDir } = args\n\n  try {\n    // Check for yarn.lock, package-lock.json, or pnpm-lock.yaml\n    let detected: PackageManager = 'npm'\n    if (\n      cliArgs?.['--use-pnpm'] ||\n      fse.existsSync(`${projectDir}/pnpm-lock.yaml`) ||\n      (await commandExists('pnpm'))\n    ) {\n      detected = 'pnpm'\n    } else if (\n      cliArgs?.['--use-yarn'] ||\n      fse.existsSync(`${projectDir}/yarn.lock`) ||\n      (await commandExists('yarn'))\n    ) {\n      detected = 'yarn'\n    } else if (cliArgs?.['--use-npm'] || fse.existsSync(`${projectDir}/package-lock.json`)) {\n      detected = 'npm'\n    }\n\n    return detected\n  } catch (error) {\n    return 'npm'\n  }\n}\n\nasync function commandExists(command: string): Promise<boolean> {\n  try {\n    await execa.command(`command -v ${command}`)\n    return true\n  } catch {\n    return false\n  }\n}\n"],"names":["execa","fse","getPackageManager","args","cliArgs","projectDir","detected","existsSync","commandExists","error","command"],"mappings":"AAAA,OAAOA,WAAW,QAAO;AACzB,OAAOC,SAAS,WAAU;AAI1B,OAAO,eAAeC,kBAAkBC,IAGvC;IACC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAE,GAAGF;IAEhC,IAAI;QACF,4DAA4D;QAC5D,IAAIG,WAA2B;QAC/B,IACEF,SAAS,CAAC,aAAa,IACvBH,IAAIM,UAAU,CAAC,CAAC,EAAEF,WAAW,eAAe,CAAC,KAC5C,MAAMG,cAAc,SACrB;YACAF,WAAW;QACb,OAAO,IACLF,SAAS,CAAC,aAAa,IACvBH,IAAIM,UAAU,CAAC,CAAC,EAAEF,WAAW,UAAU,CAAC,KACvC,MAAMG,cAAc,SACrB;YACAF,WAAW;QACb,OAAO,IAAIF,SAAS,CAAC,YAAY,IAAIH,IAAIM,UAAU,CAAC,CAAC,EAAEF,WAAW,kBAAkB,CAAC,GAAG;YACtFC,WAAW;QACb;QAEA,OAAOA;IACT,EAAE,OAAOG,OAAO;QACd,OAAO;IACT;AACF;AAEA,eAAeD,cAAcE,OAAe;IAC1C,IAAI;QACF,MAAMV,MAAMU,OAAO,CAAC,CAAC,WAAW,EAAEA,QAAQ,CAAC;QAC3C,OAAO;IACT,EAAE,OAAM;QACN,OAAO;IACT;AACF"}