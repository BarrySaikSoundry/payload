{"version":3,"sources":["../../src/lib/wrap-next-config.spec.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport { jest } from '@jest/globals'\n\nimport { parseAndModifyConfigContent, withPayloadStatement } from './wrap-next-config.js'\n\nconst esmConfigs = {\n  defaultNextConfig: `/** @type {import('next').NextConfig} */\nconst nextConfig = {};\nexport default nextConfig;\n`,\n  nextConfigExportNamedDefault: `const nextConfig = {};\nconst wrapped = someFunc(asdf);\nexport { wrapped as default };\n`,\n  nextConfigWithFunc: `const nextConfig = {};\nexport default someFunc(nextConfig);\n`,\n  nextConfigWithFuncMultiline: `const nextConfig = {};;\nexport default someFunc(\n  nextConfig\n);\n`,\n  nextConfigWithSpread: `const nextConfig = {\n  ...someConfig,\n};\nexport default nextConfig;\n`,\n}\n\nconst cjsConfigs = {\n  anonConfig: `module.exports = {};`,\n  defaultNextConfig: `\n  /** @type {import('next').NextConfig} */\nconst nextConfig = {};\nmodule.exports = nextConfig;\n`,\n  nextConfigExportNamedDefault: `const nextConfig = {};\nconst wrapped = someFunc(asdf);\nmodule.exports = wrapped;\n`,\n  nextConfigWithFunc: `const nextConfig = {};\nmodule.exports = someFunc(nextConfig);\n`,\n  nextConfigWithFuncMultiline: `const nextConfig = {};\nmodule.exports = someFunc(\n  nextConfig\n);\n`,\n  nextConfigWithSpread: `const nextConfig = { ...someConfig };\nmodule.exports = nextConfig;\n`,\n}\n\ndescribe('parseAndInsertWithPayload', () => {\n  describe('esm', () => {\n    const configType = 'esm'\n    const importStatement = withPayloadStatement[configType]\n    it('should parse the default next config', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        esmConfigs.defaultNextConfig,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(importStatement)\n      expect(modifiedConfigContent).toContain('withPayload(nextConfig)')\n    })\n    it('should parse the config with a function', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        esmConfigs.nextConfigWithFunc,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain('withPayload(someFunc(nextConfig))')\n    })\n\n    it('should parse the config with a function on a new line', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        esmConfigs.nextConfigWithFuncMultiline,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(importStatement)\n      expect(modifiedConfigContent).toMatch(/withPayload\\(someFunc\\(\\n {2}nextConfig\\n\\)\\)/)\n    })\n\n    it('should parse the config with a spread', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        esmConfigs.nextConfigWithSpread,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(importStatement)\n      expect(modifiedConfigContent).toContain('withPayload(nextConfig)')\n    })\n\n    // Unsupported: export { wrapped as default }\n    it('should give warning with a named export as default', () => {\n      const warnLogSpy = jest.spyOn(p.log, 'warn').mockImplementation(() => {})\n\n      const { modifiedConfigContent, success } = parseAndModifyConfigContent(\n        esmConfigs.nextConfigExportNamedDefault,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(importStatement)\n      expect(success).toBe(false)\n\n      expect(warnLogSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Could not automatically wrap'),\n      )\n    })\n  })\n\n  describe('cjs', () => {\n    const configType = 'cjs'\n    const requireStatement = withPayloadStatement[configType]\n    it('should parse the default next config', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.defaultNextConfig,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(requireStatement)\n      expect(modifiedConfigContent).toContain('withPayload(nextConfig)')\n    })\n    it('should parse anonymous default config', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.anonConfig,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(requireStatement)\n      expect(modifiedConfigContent).toContain('withPayload({})')\n    })\n    it('should parse the config with a function', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.nextConfigWithFunc,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain('withPayload(someFunc(nextConfig))')\n    })\n    it('should parse the config with a function on a new line', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.nextConfigWithFuncMultiline,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(requireStatement)\n      expect(modifiedConfigContent).toMatch(/withPayload\\(someFunc\\(\\n {2}nextConfig\\n\\)\\)/)\n    })\n    it('should parse the config with a named export as default', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.nextConfigExportNamedDefault,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(requireStatement)\n      expect(modifiedConfigContent).toContain('withPayload(wrapped)')\n    })\n\n    it('should parse the config with a spread', () => {\n      const { modifiedConfigContent } = parseAndModifyConfigContent(\n        cjsConfigs.nextConfigWithSpread,\n        configType,\n      )\n      expect(modifiedConfigContent).toContain(requireStatement)\n      expect(modifiedConfigContent).toContain('withPayload(nextConfig)')\n    })\n  })\n})\n"],"names":["p","jest","parseAndModifyConfigContent","withPayloadStatement","esmConfigs","defaultNextConfig","nextConfigExportNamedDefault","nextConfigWithFunc","nextConfigWithFuncMultiline","nextConfigWithSpread","cjsConfigs","anonConfig","describe","configType","importStatement","it","modifiedConfigContent","expect","toContain","toMatch","warnLogSpy","spyOn","log","mockImplementation","success","toBe","toHaveBeenCalledWith","stringContaining","requireStatement"],"mappings":"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"}