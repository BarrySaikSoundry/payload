{"version":3,"sources":["../src/main.ts"],"sourcesContent":["import * as p from '@clack/prompts'\nimport slugify from '@sindresorhus/slugify'\nimport arg from 'arg'\nimport chalk from 'chalk'\nimport figures from 'figures'\nimport path from 'path'\n\nimport type { CliArgs } from './types.js'\n\nimport { configurePayloadConfig } from './lib/configure-payload-config.js'\nimport { createProject } from './lib/create-project.js'\nimport { generateSecret } from './lib/generate-secret.js'\nimport { getPackageManager } from './lib/get-package-manager.js'\nimport { getNextAppDetails, initNext } from './lib/init-next.js'\nimport { parseProjectName } from './lib/parse-project-name.js'\nimport { parseTemplate } from './lib/parse-template.js'\nimport { selectDb } from './lib/select-db.js'\nimport { getValidTemplates, validateTemplate } from './lib/templates.js'\nimport { updatePayloadInProject } from './lib/update-payload-in-project.js'\nimport { writeEnvFile } from './lib/write-env-file.js'\nimport { error, info } from './utils/log.js'\nimport {\n  feedbackOutro,\n  helpMessage,\n  moveMessage,\n  successMessage,\n  successfulNextInit,\n} from './utils/messages.js'\n\nexport class Main {\n  args: CliArgs\n\n  constructor() {\n    // @ts-expect-error bad typings\n    this.args = arg(\n      {\n        '--db': String,\n        '--db-accept-recommended': Boolean,\n        '--db-connection-string': String,\n        '--help': Boolean,\n        '--local-template': String,\n        '--name': String,\n        '--secret': String,\n        '--template': String,\n        '--template-branch': String,\n\n        // Next.js\n        '--init-next': Boolean, // TODO: Is this needed if we detect if inside Next.js project?\n\n        // Package manager\n        '--no-deps': Boolean,\n        '--use-npm': Boolean,\n        '--use-pnpm': Boolean,\n        '--use-yarn': Boolean,\n\n        // Other\n        '--no-git': Boolean,\n\n        // Flags\n        '--beta': Boolean,\n        '--debug': Boolean,\n        '--dry-run': Boolean,\n\n        // Aliases\n        '-d': '--db',\n        '-h': '--help',\n        '-n': '--name',\n        '-t': '--template',\n      },\n      { permissive: true },\n    )\n  }\n\n  async init(): Promise<void> {\n    try {\n      if (this.args['--help']) {\n        helpMessage()\n        process.exit(0)\n      }\n\n      // eslint-disable-next-line no-console\n      console.log('\\n')\n      p.intro(chalk.bgCyan(chalk.black(' create-payload-app ')))\n      p.note(\"Welcome to Payload. Let's create a project!\")\n\n      // Detect if inside Next.js project\n      const nextAppDetails = await getNextAppDetails(process.cwd())\n      const { hasTopLevelLayout, isPayloadInstalled, nextAppDir, nextConfigPath } = nextAppDetails\n\n      // Upgrade Payload in existing project\n      if (isPayloadInstalled && nextConfigPath) {\n        p.log.warn(`Payload installation detected in current project.`)\n        const shouldUpdate = await p.confirm({\n          initialValue: false,\n          message: chalk.bold(`Upgrade Payload in this project?`),\n        })\n\n        if (!p.isCancel(shouldUpdate) && shouldUpdate) {\n          const { message, success: updateSuccess } = await updatePayloadInProject(nextAppDetails)\n          if (updateSuccess) {\n            info(message)\n          } else {\n            error(message)\n          }\n        }\n\n        p.outro(feedbackOutro())\n        process.exit(0)\n      }\n\n      if (nextConfigPath) {\n        this.args['--name'] = slugify(path.basename(path.dirname(nextConfigPath)))\n      }\n\n      const projectName = await parseProjectName(this.args)\n      const projectDir = nextConfigPath\n        ? path.dirname(nextConfigPath)\n        : path.resolve(process.cwd(), slugify(projectName))\n\n      const packageManager = await getPackageManager({ cliArgs: this.args, projectDir })\n\n      if (nextConfigPath) {\n        p.log.step(\n          chalk.bold(`${chalk.bgBlack(` ${figures.triangleUp} Next.js `)} project detected!`),\n        )\n\n        const proceed = await p.confirm({\n          initialValue: true,\n          message: chalk.bold(`Install ${chalk.green('Payload')} in this project?`),\n        })\n        if (p.isCancel(proceed) || !proceed) {\n          p.outro(feedbackOutro())\n          process.exit(0)\n        }\n\n        // Check for top-level layout.tsx\n        if (nextAppDir && hasTopLevelLayout) {\n          p.log.warn(moveMessage({ nextAppDir, projectDir }))\n          p.outro(feedbackOutro())\n          process.exit(0)\n        }\n\n        const dbDetails = await selectDb(this.args, projectName)\n\n        const result = await initNext({\n          ...this.args,\n          dbType: dbDetails.type,\n          nextAppDetails,\n          packageManager,\n          projectDir,\n        })\n\n        if (result.success === false) {\n          p.outro(feedbackOutro())\n          process.exit(1)\n        }\n\n        await configurePayloadConfig({\n          dbType: dbDetails?.type,\n          projectDirOrConfigPath: {\n            payloadConfigPath: result.payloadConfigPath,\n          },\n        })\n\n        await writeEnvFile({\n          cliArgs: this.args,\n          databaseUri: dbDetails.dbUri,\n          payloadSecret: generateSecret(),\n          projectDir,\n        })\n\n        info('Payload project successfully initialized!')\n        p.note(successfulNextInit(), chalk.bgGreen(chalk.black(' Documentation ')))\n        p.outro(feedbackOutro())\n        return\n      }\n\n      const templateArg = this.args['--template']\n      if (templateArg) {\n        const valid = validateTemplate(templateArg)\n        if (!valid) {\n          helpMessage()\n          process.exit(1)\n        }\n      }\n\n      const validTemplates = getValidTemplates()\n      const template = await parseTemplate(this.args, validTemplates)\n      if (!template) {\n        p.log.error('Invalid template given')\n        p.outro(feedbackOutro())\n        process.exit(1)\n      }\n\n      switch (template.type) {\n        case 'starter': {\n          const dbDetails = await selectDb(this.args, projectName)\n          const payloadSecret = generateSecret()\n          await createProject({\n            cliArgs: this.args,\n            dbDetails,\n            packageManager,\n            projectDir,\n            projectName,\n            template,\n          })\n          await writeEnvFile({\n            cliArgs: this.args,\n            databaseUri: dbDetails.dbUri,\n            payloadSecret,\n            projectDir,\n            template,\n          })\n          break\n        }\n        case 'plugin': {\n          await createProject({\n            cliArgs: this.args,\n            packageManager,\n            projectDir,\n            projectName,\n            template,\n          })\n          break\n        }\n      }\n\n      info('Payload project successfully created!')\n      p.note(successMessage(projectDir, packageManager), chalk.bgGreen(chalk.black(' Next Steps ')))\n      p.outro(feedbackOutro())\n    } catch (err: unknown) {\n      error(err instanceof Error ? err.message : 'An error occurred')\n    }\n  }\n}\n"],"names":["p","slugify","arg","chalk","figures","path","configurePayloadConfig","createProject","generateSecret","getPackageManager","getNextAppDetails","initNext","parseProjectName","parseTemplate","selectDb","getValidTemplates","validateTemplate","updatePayloadInProject","writeEnvFile","error","info","feedbackOutro","helpMessage","moveMessage","successMessage","successfulNextInit","Main","args","constructor","String","Boolean","permissive","init","process","exit","console","log","intro","bgCyan","black","note","nextAppDetails","cwd","hasTopLevelLayout","isPayloadInstalled","nextAppDir","nextConfigPath","warn","shouldUpdate","confirm","initialValue","message","bold","isCancel","success","updateSuccess","outro","basename","dirname","projectName","projectDir","resolve","packageManager","cliArgs","step","bgBlack","triangleUp","proceed","green","dbDetails","result","dbType","type","projectDirOrConfigPath","payloadConfigPath","databaseUri","dbUri","payloadSecret","bgGreen","templateArg","valid","validTemplates","template","err","Error"],"mappings":"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"}