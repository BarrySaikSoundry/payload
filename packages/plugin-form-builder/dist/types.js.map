{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { Block, CollectionConfig, Field } from 'payload'\n\nexport interface BlockConfig {\n  block: Block\n  validate?: (value: unknown) => boolean | string\n}\n\nexport function isValidBlockConfig(blockConfig: BlockConfig | string): blockConfig is BlockConfig {\n  return (\n    typeof blockConfig !== 'string' &&\n    typeof blockConfig?.block?.slug === 'string' &&\n    Array.isArray(blockConfig?.block?.fields)\n  )\n}\n\nexport interface FieldValues {\n  [key: string]: boolean | null | number | string | undefined\n}\n\nexport type PaymentFieldConfig = {\n  paymentProcessor: Partial<SelectField>\n} & Partial<Field>\n\nexport type FieldConfig = Partial<Field> | PaymentFieldConfig\n\nexport interface FieldsConfig {\n  [key: string]: FieldConfig | boolean | undefined\n  checkbox?: FieldConfig | boolean\n  country?: FieldConfig | boolean\n  email?: FieldConfig | boolean\n  message?: FieldConfig | boolean\n  number?: FieldConfig | boolean\n  payment?: FieldConfig | boolean\n  select?: FieldConfig | boolean\n  state?: FieldConfig | boolean\n  text?: FieldConfig | boolean\n  textarea?: FieldConfig | boolean\n}\n\nexport type BeforeEmail = (emails: FormattedEmail[]) => FormattedEmail[] | Promise<FormattedEmail[]>\nexport type HandlePayment = (data: any) => void\nexport type FieldsOverride = (args: { defaultFields: Field[] }) => Field[]\n\nexport type FormBuilderPluginConfig = {\n  beforeEmail?: BeforeEmail\n  fields?: FieldsConfig\n  formOverrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n  formSubmissionOverrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n  handlePayment?: HandlePayment\n  redirectRelationships?: string[]\n}\n\nexport interface TextField {\n  blockName?: string\n  blockType: 'text'\n  defaultValue?: string\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface TextAreaField {\n  blockName?: string\n  blockType: 'textarea'\n  defaultValue?: string\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface SelectFieldOption {\n  label: string\n  value: string\n}\n\nexport interface SelectField {\n  blockName?: string\n  blockType: 'select'\n  defaultValue?: string\n  label?: string\n  name: string\n  options: SelectFieldOption[]\n  required?: boolean\n  width?: number\n}\n\nexport interface PriceCondition {\n  condition: 'equals' | 'hasValue' | 'notEquals'\n  fieldToUse: string\n  operator: 'add' | 'divide' | 'multiply' | 'subtract'\n  valueForCondition: string\n  valueForOperator: number | string // TODO: make this a number, see ./collections/Forms/DynamicPriceSelector.tsx\n  valueType: 'static' | 'valueOfField'\n}\n\nexport interface PaymentField {\n  basePrice: number\n  blockName?: string\n  blockType: 'payment'\n  defaultValue?: string\n  label?: string\n  name: string\n  paymentProcessor: string\n  priceConditions: PriceCondition[]\n  required?: boolean\n  width?: number\n}\n\nexport interface EmailField {\n  blockName?: string\n  blockType: 'email'\n  defaultValue?: string\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface StateField {\n  blockName?: string\n  blockType: 'state'\n  defaultValue?: string\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface CountryField {\n  blockName?: string\n  blockType: 'country'\n  defaultValue?: string\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface CheckboxField {\n  blockName?: string\n  blockType: 'checkbox'\n  defaultValue?: boolean\n  label?: string\n  name: string\n  required?: boolean\n  width?: number\n}\n\nexport interface MessageField {\n  blockName?: string\n  blockType: 'message'\n  message: unknown\n}\n\nexport type FormFieldBlock =\n  | CheckboxField\n  | CountryField\n  | EmailField\n  | MessageField\n  | PaymentField\n  | SelectField\n  | StateField\n  | TextAreaField\n  | TextField\n\nexport interface Email {\n  bcc?: string\n  cc?: string\n  emailFrom: string\n  emailTo: string\n  message?: any // TODO: configure rich text type\n  replyTo?: string\n  subject: string\n}\n\nexport interface FormattedEmail {\n  bcc?: string\n  cc?: string\n  from: string\n  html: string\n  replyTo: string\n  subject: string\n  to: string\n}\n\nexport interface Redirect {\n  reference?: {\n    relationTo: string\n    value: string | unknown\n  }\n  type: 'custom' | 'reference'\n  url: string\n}\n\nexport interface Form {\n  confirmationMessage?: any // TODO: configure rich text type\n  confirmationType: 'message' | 'redirect'\n  emails: Email[]\n  fields: FormFieldBlock[]\n  id: string\n  redirect?: Redirect\n  submitButtonLabel?: string\n  title: string\n}\n\nexport interface SubmissionValue {\n  field: string\n  value: unknown\n}\n\nexport interface FormSubmission {\n  form: Form | string\n  submissionData: SubmissionValue[]\n}\n"],"names":["isValidBlockConfig","blockConfig","block","slug","Array","isArray","fields"],"mappings":"AAOA,OAAO,SAASA,mBAAmBC,WAAiC;IAClE,OACE,OAAOA,gBAAgB,YACvB,OAAOA,aAAaC,OAAOC,SAAS,YACpCC,MAAMC,OAAO,CAACJ,aAAaC,OAAOI;AAEtC"}