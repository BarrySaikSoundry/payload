{"version":3,"sources":["../../../src/collections/Forms/DynamicPriceSelector.tsx"],"sourcesContent":["'use client'\n\nimport type { TextFieldProps } from '@payloadcms/ui'\nimport type { Data } from 'payload'\n\nimport { TextField, useLocale, useWatchForm } from '@payloadcms/ui'\nimport React, { useEffect, useState } from 'react'\n\ntype FieldWithID = {\n  id: string\n  name: string\n}\n\nexport const DynamicPriceSelector: React.FC<TextFieldProps> = (props) => {\n  const { label, path } = props\n\n  const { fields, getData, getDataByPath } = useWatchForm()\n\n  const locale = useLocale()\n\n  const [isNumberField, setIsNumberField] = useState<boolean>()\n  const [valueType, setValueType] = useState<'static' | 'valueOfField'>()\n\n  // only number fields can use 'valueOfField`\n  useEffect(() => {\n    if (path) {\n      const parentPath = path.split('.').slice(0, -1).join('.')\n      const paymentFieldData: any = getDataByPath(parentPath)\n\n      if (paymentFieldData) {\n        const { fieldToUse, valueType } = paymentFieldData\n\n        setValueType(valueType)\n\n        const { fields: allFields }: Data = getData()\n        const field = allFields.find((field: FieldWithID) => field.name === fieldToUse)\n\n        if (field) {\n          const { blockType } = field\n          setIsNumberField(blockType === 'number')\n        }\n      }\n    }\n  }, [fields, path, getDataByPath, getData])\n\n  // TODO: make this a number field, block by Payload\n  if (valueType === 'static') {\n    return <TextField {...props} />\n  }\n\n  const localeCode = typeof locale === 'object' && 'code' in locale ? locale.code : locale\n\n  const localLabels = typeof label === 'object' ? label : { [localeCode]: label }\n\n  const labelValue = localLabels[localeCode] || localLabels['en'] || ''\n\n  if (valueType === 'valueOfField' && !isNumberField) {\n    return (\n      <div>\n        <div>{String(labelValue)}</div>\n        <div\n          style={{\n            color: '#9A9A9A',\n          }}\n        >\n          The selected field must be a number field.\n        </div>\n      </div>\n    )\n  }\n\n  return null\n}\n"],"names":["TextField","useLocale","useWatchForm","React","useEffect","useState","DynamicPriceSelector","props","label","path","fields","getData","getDataByPath","locale","isNumberField","setIsNumberField","valueType","setValueType","parentPath","split","slice","join","paymentFieldData","fieldToUse","allFields","field","find","name","blockType","localeCode","code","localLabels","labelValue","div","String","style","color"],"mappings":"AAAA;;AAKA,SAASA,SAAS,EAAEC,SAAS,EAAEC,YAAY,QAAQ,iBAAgB;AACnE,OAAOC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAOlD,OAAO,MAAMC,uBAAiD,CAACC;IAC7D,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE,GAAGF;IAExB,MAAM,EAAEG,MAAM,EAAEC,OAAO,EAAEC,aAAa,EAAE,GAAGV;IAE3C,MAAMW,SAASZ;IAEf,MAAM,CAACa,eAAeC,iBAAiB,GAAGV;IAC1C,MAAM,CAACW,WAAWC,aAAa,GAAGZ;IAElC,4CAA4C;IAC5CD,UAAU;QACR,IAAIK,MAAM;YACR,MAAMS,aAAaT,KAAKU,KAAK,CAAC,KAAKC,KAAK,CAAC,GAAG,CAAC,GAAGC,IAAI,CAAC;YACrD,MAAMC,mBAAwBV,cAAcM;YAE5C,IAAII,kBAAkB;gBACpB,MAAM,EAAEC,UAAU,EAAEP,SAAS,EAAE,GAAGM;gBAElCL,aAAaD;gBAEb,MAAM,EAAEN,QAAQc,SAAS,EAAE,GAASb;gBACpC,MAAMc,QAAQD,UAAUE,IAAI,CAAC,CAACD,QAAuBA,MAAME,IAAI,KAAKJ;gBAEpE,IAAIE,OAAO;oBACT,MAAM,EAAEG,SAAS,EAAE,GAAGH;oBACtBV,iBAAiBa,cAAc;gBACjC;YACF;QACF;IACF,GAAG;QAAClB;QAAQD;QAAMG;QAAeD;KAAQ;IAEzC,mDAAmD;IACnD,IAAIK,cAAc,UAAU;QAC1B,qBAAO,KAAChB;YAAW,GAAGO,KAAK;;IAC7B;IAEA,MAAMsB,aAAa,OAAOhB,WAAW,YAAY,UAAUA,SAASA,OAAOiB,IAAI,GAAGjB;IAElF,MAAMkB,cAAc,OAAOvB,UAAU,WAAWA,QAAQ;QAAE,CAACqB,WAAW,EAAErB;IAAM;IAE9E,MAAMwB,aAAaD,WAAW,CAACF,WAAW,IAAIE,WAAW,CAAC,KAAK,IAAI;IAEnE,IAAIf,cAAc,kBAAkB,CAACF,eAAe;QAClD,qBACE,MAACmB;;8BACC,KAACA;8BAAKC,OAAOF;;8BACb,KAACC;oBACCE,OAAO;wBACLC,OAAO;oBACT;8BACD;;;;IAKP;IAEA,OAAO;AACT,EAAC"}