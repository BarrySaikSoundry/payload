{"version":3,"sources":["../../../src/collections/FormSubmissions/index.ts"],"sourcesContent":["import type { CollectionConfig, Field } from 'payload'\n\nimport type { FormBuilderPluginConfig } from '../../types.js'\n\nimport { createCharge } from './hooks/createCharge.js'\nimport { sendEmail } from './hooks/sendEmail.js'\n\n// all settings can be overridden by the config\nexport const generateSubmissionCollection = (\n  formConfig: FormBuilderPluginConfig,\n): CollectionConfig => {\n  const formSlug = formConfig?.formOverrides?.slug || 'forms'\n\n  const defaultFields: Field[] = [\n    {\n      name: 'form',\n      type: 'relationship',\n      admin: {\n        readOnly: true,\n      },\n      relationTo: formSlug,\n      required: true,\n      validate: async (value, { req: { payload }, req }) => {\n        /* Don't run in the client side */\n        if (!payload) return true\n\n        if (payload) {\n          let _existingForm\n\n          try {\n            _existingForm = await payload.findByID({\n              id: value,\n              collection: formSlug,\n              req,\n            })\n\n            return true\n          } catch (error) {\n            return 'Cannot create this submission because this form does not exist.'\n          }\n        }\n      },\n    },\n    {\n      name: 'submissionData',\n      type: 'array',\n      admin: {\n        readOnly: true,\n      },\n      fields: [\n        {\n          name: 'field',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'value',\n          type: 'text',\n          required: true,\n          validate: (value: unknown) => {\n            // TODO:\n            // create a validation function that dynamically\n            // relies on the field type and its options as configured.\n\n            // How to access sibling data from this field?\n            // Need the `name` of the field in order to validate it.\n\n            // Might not be possible to use this validation function.\n            // Instead, might need to do all validation in a `beforeValidate` collection hook.\n\n            if (typeof value !== 'undefined') {\n              return true\n            }\n\n            return 'This field is required.'\n          },\n        },\n      ],\n    },\n  ]\n\n  const newConfig: CollectionConfig = {\n    ...(formConfig?.formSubmissionOverrides || {}),\n    slug: formConfig?.formSubmissionOverrides?.slug || 'form-submissions',\n    access: {\n      create: () => true,\n      read: ({ req: { user } }) => !!user, // logged-in users,\n      update: () => false,\n      ...(formConfig?.formSubmissionOverrides?.access || {}),\n    },\n    admin: {\n      ...(formConfig?.formSubmissionOverrides?.admin || {}),\n      enableRichTextRelationship: false,\n    },\n    fields:\n      formConfig?.formSubmissionOverrides?.fields &&\n      typeof formConfig?.formSubmissionOverrides?.fields === 'function'\n        ? formConfig.formSubmissionOverrides.fields({ defaultFields })\n        : defaultFields,\n    hooks: {\n      ...(formConfig?.formSubmissionOverrides?.hooks || {}),\n      beforeChange: [\n        (data) => createCharge(data, formConfig),\n        (data) => sendEmail(data, formConfig),\n        ...(formConfig?.formSubmissionOverrides?.hooks?.beforeChange || []),\n      ],\n    },\n  }\n\n  const paymentFieldConfig = formConfig?.fields?.payment\n\n  if (paymentFieldConfig) {\n    newConfig.fields.push({\n      name: 'payment',\n      type: 'group',\n      admin: {\n        readOnly: true,\n      },\n      fields: [\n        {\n          name: 'field',\n          type: 'text',\n          label: 'Field',\n        },\n        {\n          name: 'status',\n          type: 'text',\n          label: 'Status',\n        },\n        {\n          name: 'amount',\n          type: 'number',\n          admin: {\n            description: 'Amount in cents',\n          },\n        },\n        {\n          name: 'paymentProcessor',\n          type: 'text',\n        },\n        {\n          name: 'creditCard',\n          type: 'group',\n          fields: [\n            {\n              name: 'token',\n              type: 'text',\n              label: 'token',\n            },\n            {\n              name: 'brand',\n              type: 'text',\n              label: 'Brand',\n            },\n            {\n              name: 'number',\n              type: 'text',\n              label: 'Number',\n            },\n          ],\n          label: 'Credit Card',\n        },\n      ],\n    })\n  }\n\n  return newConfig\n}\n"],"names":["createCharge","sendEmail","generateSubmissionCollection","formConfig","formSlug","formOverrides","slug","defaultFields","name","type","admin","readOnly","relationTo","required","validate","value","req","payload","_existingForm","findByID","id","collection","error","fields","newConfig","formSubmissionOverrides","access","create","read","user","update","enableRichTextRelationship","hooks","beforeChange","data","paymentFieldConfig","payment","push","label","description"],"mappings":"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"}