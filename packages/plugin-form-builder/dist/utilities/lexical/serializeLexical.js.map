{"version":3,"sources":["../../../src/utilities/lexical/serializeLexical.ts"],"sourcesContent":["import type { HTMLConverter, SerializedLexicalNodeWithParent } from './types.js'\n\nimport { defaultHTMLConverters } from './defaultConverters.js'\n\nexport async function serializeLexical(data?: any, submissionData?: any): Promise<string> {\n  const converters: HTMLConverter[] = defaultHTMLConverters\n\n  if (data?.root?.children?.length) {\n    return await convertLexicalNodesToHTML({\n      converters,\n      lexicalNodes: data?.root?.children,\n      parent: data?.root,\n      submissionData,\n    })\n  }\n  return ''\n}\n\nexport async function convertLexicalNodesToHTML({\n  converters,\n  lexicalNodes,\n  parent,\n  submissionData,\n}: {\n  converters: HTMLConverter[]\n  lexicalNodes: any[]\n  parent: SerializedLexicalNodeWithParent\n  submissionData?: any\n}): Promise<string> {\n  const unknownConverter = converters.find((converter) => converter.nodeTypes.includes('unknown'))\n\n  const htmlArray = await Promise.all(\n    lexicalNodes.map(async (node, i) => {\n      const converterForNode = converters.find((converter) =>\n        converter.nodeTypes.includes(node.type),\n      )\n      if (!converterForNode) {\n        if (unknownConverter) {\n          return unknownConverter.converter({\n            childIndex: i,\n            converters,\n            node,\n            parent,\n            submissionData,\n          })\n        }\n        return '<span>unknown node</span>'\n      }\n\n      return converterForNode.converter({\n        childIndex: i,\n        converters,\n        node,\n        parent,\n        submissionData,\n      })\n    }),\n  )\n\n  return htmlArray.join('') || ''\n}\n"],"names":["defaultHTMLConverters","serializeLexical","data","submissionData","converters","root","children","length","convertLexicalNodesToHTML","lexicalNodes","parent","unknownConverter","find","converter","nodeTypes","includes","htmlArray","Promise","all","map","node","i","converterForNode","type","childIndex","join"],"mappings":"AAEA,SAASA,qBAAqB,QAAQ,yBAAwB;AAE9D,OAAO,eAAeC,iBAAiBC,IAAU,EAAEC,cAAoB;IACrE,MAAMC,aAA8BJ;IAEpC,IAAIE,MAAMG,MAAMC,UAAUC,QAAQ;QAChC,OAAO,MAAMC,0BAA0B;YACrCJ;YACAK,cAAcP,MAAMG,MAAMC;YAC1BI,QAAQR,MAAMG;YACdF;QACF;IACF;IACA,OAAO;AACT;AAEA,OAAO,eAAeK,0BAA0B,EAC9CJ,UAAU,EACVK,YAAY,EACZC,MAAM,EACNP,cAAc,EAMf;IACC,MAAMQ,mBAAmBP,WAAWQ,IAAI,CAAC,CAACC,YAAcA,UAAUC,SAAS,CAACC,QAAQ,CAAC;IAErF,MAAMC,YAAY,MAAMC,QAAQC,GAAG,CACjCT,aAAaU,GAAG,CAAC,OAAOC,MAAMC;QAC5B,MAAMC,mBAAmBlB,WAAWQ,IAAI,CAAC,CAACC,YACxCA,UAAUC,SAAS,CAACC,QAAQ,CAACK,KAAKG,IAAI;QAExC,IAAI,CAACD,kBAAkB;YACrB,IAAIX,kBAAkB;gBACpB,OAAOA,iBAAiBE,SAAS,CAAC;oBAChCW,YAAYH;oBACZjB;oBACAgB;oBACAV;oBACAP;gBACF;YACF;YACA,OAAO;QACT;QAEA,OAAOmB,iBAAiBT,SAAS,CAAC;YAChCW,YAAYH;YACZjB;YACAgB;YACAV;YACAP;QACF;IACF;IAGF,OAAOa,UAAUS,IAAI,CAAC,OAAO;AAC/B"}