{"version":3,"sources":["../../../src/fields/MetaImage/MetaImageComponent.tsx"],"sourcesContent":["'use client'\n\nimport type { FieldType, Options, UploadInputProps } from '@payloadcms/ui'\n\nimport {\n  FieldLabel,\n  UploadInput,\n  useConfig,\n  useDocumentInfo,\n  useField,\n  useFieldProps,\n  useForm,\n  useLocale,\n  useTranslation,\n} from '@payloadcms/ui'\nimport React, { useCallback } from 'react'\n\nimport type { PluginSEOTranslationKeys, PluginSEOTranslations } from '../../translations/index.js'\nimport type { GenerateImage } from '../../types.js'\n\nimport { Pill } from '../../ui/Pill.js'\n\ntype MetaImageProps = {\n  hasGenerateImageFn: boolean\n} & UploadInputProps\n\nexport const MetaImageComponent: React.FC<MetaImageProps> = (props) => {\n  const { CustomLabel, hasGenerateImageFn, label, labelProps, relationTo, required } = props || {}\n  const { path: pathFromContext } = useFieldProps()\n\n  const field: FieldType<string> = useField({ ...props, path: pathFromContext } as Options)\n\n  const { t } = useTranslation<PluginSEOTranslations, PluginSEOTranslationKeys>()\n\n  const locale = useLocale()\n  const { getData } = useForm()\n  const docInfo = useDocumentInfo()\n\n  const { errorMessage, setValue, showError, value } = field\n\n  const regenerateImage = useCallback(async () => {\n    if (!hasGenerateImageFn) return\n\n    const genImageResponse = await fetch('/api/plugin-seo/generate-image', {\n      body: JSON.stringify({\n        ...docInfo,\n        doc: { ...getData() },\n        locale: typeof locale === 'object' ? locale?.code : locale,\n      } satisfies Parameters<GenerateImage>[0]),\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      method: 'POST',\n    })\n\n    const { result: generatedImage } = await genImageResponse.json()\n\n    setValue(generatedImage || '')\n  }, [hasGenerateImageFn, docInfo, getData, locale, setValue])\n\n  const hasImage = Boolean(value)\n\n  const config = useConfig()\n\n  const { collections, routes: { api } = {}, serverURL } = config\n\n  const collection = collections?.find((coll) => coll.slug === relationTo) || undefined\n\n  return (\n    <div\n      style={{\n        marginBottom: '20px',\n      }}\n    >\n      <div\n        style={{\n          marginBottom: '5px',\n          position: 'relative',\n        }}\n      >\n        <div className=\"plugin-seo__field\">\n          <FieldLabel CustomLabel={CustomLabel} label={label} {...(labelProps || {})} />\n          {hasGenerateImageFn && (\n            <React.Fragment>\n              &nbsp; &mdash; &nbsp;\n              <button\n                onClick={regenerateImage}\n                style={{\n                  background: 'none',\n                  backgroundColor: 'transparent',\n                  border: 'none',\n                  color: 'currentcolor',\n                  cursor: 'pointer',\n                  padding: 0,\n                  textDecoration: 'underline',\n                }}\n                type=\"button\"\n              >\n                {t('plugin-seo:autoGenerate')}\n              </button>\n            </React.Fragment>\n          )}\n        </div>\n        {hasGenerateImageFn && (\n          <div\n            style={{\n              color: '#9A9A9A',\n            }}\n          >\n            {t('plugin-seo:imageAutoGenerationTip')}\n          </div>\n        )}\n      </div>\n      <div\n        style={{\n          marginBottom: '10px',\n          position: 'relative',\n        }}\n      >\n        <UploadInput\n          CustomError={errorMessage}\n          api={api}\n          collection={collection}\n          filterOptions={field.filterOptions}\n          label={undefined}\n          onChange={(incomingImage) => {\n            if (incomingImage !== null) {\n              const { id: incomingID } = incomingImage\n              setValue(incomingID)\n            } else {\n              setValue(null)\n            }\n          }}\n          relationTo={relationTo}\n          required={required}\n          serverURL={serverURL}\n          showError={showError}\n          style={{\n            marginBottom: 0,\n          }}\n          value={value}\n        />\n      </div>\n      <div\n        style={{\n          alignItems: 'center',\n          display: 'flex',\n          width: '100%',\n        }}\n      >\n        <Pill\n          backgroundColor={hasImage ? 'green' : 'red'}\n          color=\"white\"\n          label={hasImage ? t('plugin-seo:good') : t('plugin-seo:noImage')}\n        />\n      </div>\n    </div>\n  )\n}\n"],"names":["FieldLabel","UploadInput","useConfig","useDocumentInfo","useField","useFieldProps","useForm","useLocale","useTranslation","React","useCallback","Pill","MetaImageComponent","props","CustomLabel","hasGenerateImageFn","label","labelProps","relationTo","required","path","pathFromContext","field","t","locale","getData","docInfo","errorMessage","setValue","showError","value","regenerateImage","genImageResponse","fetch","body","JSON","stringify","doc","code","credentials","headers","method","result","generatedImage","json","hasImage","Boolean","config","collections","routes","api","serverURL","collection","find","coll","slug","undefined","div","style","marginBottom","position","className","Fragment","button","onClick","background","backgroundColor","border","color","cursor","padding","textDecoration","type","CustomError","filterOptions","onChange","incomingImage","id","incomingID","alignItems","display","width"],"mappings":"AAAA;;AAIA,SACEA,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,eAAe,EACfC,QAAQ,EACRC,aAAa,EACbC,OAAO,EACPC,SAAS,EACTC,cAAc,QACT,iBAAgB;AACvB,OAAOC,SAASC,WAAW,QAAQ,QAAO;AAK1C,SAASC,IAAI,QAAQ,mBAAkB;AAMvC,OAAO,MAAMC,qBAA+C,CAACC;IAC3D,MAAM,EAAEC,WAAW,EAAEC,kBAAkB,EAAEC,KAAK,EAAEC,UAAU,EAAEC,UAAU,EAAEC,QAAQ,EAAE,GAAGN,SAAS,CAAC;IAC/F,MAAM,EAAEO,MAAMC,eAAe,EAAE,GAAGhB;IAElC,MAAMiB,QAA2BlB,SAAS;QAAE,GAAGS,KAAK;QAAEO,MAAMC;IAAgB;IAE5E,MAAM,EAAEE,CAAC,EAAE,GAAGf;IAEd,MAAMgB,SAASjB;IACf,MAAM,EAAEkB,OAAO,EAAE,GAAGnB;IACpB,MAAMoB,UAAUvB;IAEhB,MAAM,EAAEwB,YAAY,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,KAAK,EAAE,GAAGR;IAErD,MAAMS,kBAAkBrB,YAAY;QAClC,IAAI,CAACK,oBAAoB;QAEzB,MAAMiB,mBAAmB,MAAMC,MAAM,kCAAkC;YACrEC,MAAMC,KAAKC,SAAS,CAAC;gBACnB,GAAGV,OAAO;gBACVW,KAAK;oBAAE,GAAGZ,SAAS;gBAAC;gBACpBD,QAAQ,OAAOA,WAAW,WAAWA,QAAQc,OAAOd;YACtD;YACAe,aAAa;YACbC,SAAS;gBACP,gBAAgB;YAClB;YACAC,QAAQ;QACV;QAEA,MAAM,EAAEC,QAAQC,cAAc,EAAE,GAAG,MAAMX,iBAAiBY,IAAI;QAE9DhB,SAASe,kBAAkB;IAC7B,GAAG;QAAC5B;QAAoBW;QAASD;QAASD;QAAQI;KAAS;IAE3D,MAAMiB,WAAWC,QAAQhB;IAEzB,MAAMiB,SAAS7C;IAEf,MAAM,EAAE8C,WAAW,EAAEC,QAAQ,EAAEC,GAAG,EAAE,GAAG,CAAC,CAAC,EAAEC,SAAS,EAAE,GAAGJ;IAEzD,MAAMK,aAAaJ,aAAaK,KAAK,CAACC,OAASA,KAAKC,IAAI,KAAKrC,eAAesC;IAE5E,qBACE,MAACC;QACCC,OAAO;YACLC,cAAc;QAChB;;0BAEA,MAACF;gBACCC,OAAO;oBACLC,cAAc;oBACdC,UAAU;gBACZ;;kCAEA,MAACH;wBAAII,WAAU;;0CACb,KAAC7D;gCAAWc,aAAaA;gCAAaE,OAAOA;gCAAQ,GAAIC,cAAc,CAAC,CAAC;;4BACxEF,oCACC,MAACN,MAAMqD,QAAQ;;oCAAC;kDAEd,KAACC;wCACCC,SAASjC;wCACT2B,OAAO;4CACLO,YAAY;4CACZC,iBAAiB;4CACjBC,QAAQ;4CACRC,OAAO;4CACPC,QAAQ;4CACRC,SAAS;4CACTC,gBAAgB;wCAClB;wCACAC,MAAK;kDAEJjD,EAAE;;;;;;oBAKVR,oCACC,KAAC0C;wBACCC,OAAO;4BACLU,OAAO;wBACT;kCAEC7C,EAAE;;;;0BAIT,KAACkC;gBACCC,OAAO;oBACLC,cAAc;oBACdC,UAAU;gBACZ;0BAEA,cAAA,KAAC3D;oBACCwE,aAAa9C;oBACbuB,KAAKA;oBACLE,YAAYA;oBACZsB,eAAepD,MAAMoD,aAAa;oBAClC1D,OAAOwC;oBACPmB,UAAU,CAACC;wBACT,IAAIA,kBAAkB,MAAM;4BAC1B,MAAM,EAAEC,IAAIC,UAAU,EAAE,GAAGF;4BAC3BhD,SAASkD;wBACX,OAAO;4BACLlD,SAAS;wBACX;oBACF;oBACAV,YAAYA;oBACZC,UAAUA;oBACVgC,WAAWA;oBACXtB,WAAWA;oBACX6B,OAAO;wBACLC,cAAc;oBAChB;oBACA7B,OAAOA;;;0BAGX,KAAC2B;gBACCC,OAAO;oBACLqB,YAAY;oBACZC,SAAS;oBACTC,OAAO;gBACT;0BAEA,cAAA,KAACtE;oBACCuD,iBAAiBrB,WAAW,UAAU;oBACtCuB,OAAM;oBACNpD,OAAO6B,WAAWtB,EAAE,qBAAqBA,EAAE;;;;;AAKrD,EAAC"}