{"version":3,"sources":["../../../../../../src/field/elements/upload/Element/UploadDrawer/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormFieldBase, FormProps } from '@payloadcms/ui'\nimport type { ClientCollectionConfig } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Drawer,\n  Form,\n  FormSubmit,\n  RenderFields,\n  useAuth,\n  useConfig,\n  useDocumentInfo,\n  useLocale,\n  useModal,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { getFormState } from '@payloadcms/ui/shared'\nimport { deepCopyObject } from 'payload/shared'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport { Transforms } from 'slate'\nimport { ReactEditor, useSlateStatic } from 'slate-react'\n\nimport type { UploadElementType } from '../../types.js'\n\nimport { uploadFieldsSchemaPath } from '../../shared.js'\n\nexport const UploadDrawer: React.FC<{\n  drawerSlug: string\n  element: UploadElementType\n  fieldProps: {\n    name: string\n    richTextComponentMap: Map<string, React.ReactNode>\n  } & FormFieldBase\n  relatedCollection: ClientCollectionConfig\n  schemaPath: string\n}> = (props) => {\n  const editor = useSlateStatic()\n\n  const { drawerSlug, element, fieldProps, relatedCollection, schemaPath } = props\n\n  const { i18n, t } = useTranslation()\n  const { code: locale } = useLocale()\n  const { user } = useAuth()\n  const { closeModal } = useModal()\n  const { id, collectionSlug } = useDocumentInfo()\n  const [initialState, setInitialState] = useState({})\n  const { richTextComponentMap } = fieldProps\n\n  const relatedFieldSchemaPath = `${uploadFieldsSchemaPath}.${relatedCollection.slug}`\n  const fieldMap = richTextComponentMap.get(relatedFieldSchemaPath)\n\n  const config = useConfig()\n\n  const handleUpdateEditData = useCallback(\n    (_, data) => {\n      const newNode = {\n        fields: data,\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n      closeModal(drawerSlug)\n    },\n    [closeModal, editor, element, drawerSlug],\n  )\n\n  useEffect(() => {\n    const data = deepCopyObject(element?.fields || {})\n\n    const awaitInitialState = async () => {\n      const state = await getFormState({\n        apiRoute: config.routes.api,\n        body: {\n          id,\n          collectionSlug,\n          data,\n          operation: 'update',\n          schemaPath: `${schemaPath}.${uploadFieldsSchemaPath}.${relatedCollection.slug}`,\n        },\n        serverURL: config.serverURL,\n      })\n\n      setInitialState(state)\n    }\n\n    void awaitInitialState()\n  }, [\n    config,\n    element?.fields,\n    user,\n    locale,\n    t,\n    collectionSlug,\n    id,\n    schemaPath,\n    relatedCollection.slug,\n  ])\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState }) => {\n      return await getFormState({\n        apiRoute: config.routes.api,\n        body: {\n          id,\n          formState: prevFormState,\n          operation: 'update',\n          schemaPath: `${schemaPath}.${uploadFieldsSchemaPath}.${relatedCollection.slug}`,\n        },\n        serverURL: config.serverURL,\n      })\n    },\n\n    [config.routes.api, config.serverURL, relatedCollection.slug, schemaPath, id],\n  )\n\n  return (\n    <Drawer\n      slug={drawerSlug}\n      title={t('general:editLabel', {\n        label: getTranslation(relatedCollection.labels.singular, i18n),\n      })}\n    >\n      <Form\n        beforeSubmit={[onChange]}\n        disableValidationOnSubmit\n        initialState={initialState}\n        onChange={[onChange]}\n        onSubmit={handleUpdateEditData}\n      >\n        <RenderFields\n          fieldMap={Array.isArray(fieldMap) ? fieldMap : []}\n          path=\"\"\n          readOnly={false}\n          schemaPath=\"\"\n        />\n        <FormSubmit>{t('fields:saveChanges')}</FormSubmit>\n      </Form>\n    </Drawer>\n  )\n}\n"],"names":["getTranslation","Drawer","Form","FormSubmit","RenderFields","useAuth","useConfig","useDocumentInfo","useLocale","useModal","useTranslation","getFormState","deepCopyObject","React","useCallback","useEffect","useState","Transforms","ReactEditor","useSlateStatic","uploadFieldsSchemaPath","UploadDrawer","props","editor","drawerSlug","element","fieldProps","relatedCollection","schemaPath","i18n","t","code","locale","user","closeModal","id","collectionSlug","initialState","setInitialState","richTextComponentMap","relatedFieldSchemaPath","slug","fieldMap","get","config","handleUpdateEditData","_","data","newNode","fields","elementPath","findPath","setNodes","at","awaitInitialState","state","apiRoute","routes","api","body","operation","serverURL","onChange","formState","prevFormState","title","label","labels","singular","beforeSubmit","disableValidationOnSubmit","onSubmit","Array","isArray","path","readOnly"],"mappings":"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"}