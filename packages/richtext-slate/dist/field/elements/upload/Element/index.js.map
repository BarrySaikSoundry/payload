{"version":3,"sources":["../../../../../src/field/elements/upload/Element/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormFieldBase } from '@payloadcms/ui'\nimport type { ClientCollectionConfig } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  DrawerToggler,\n  File,\n  useConfig,\n  useDocumentDrawer,\n  useDrawerSlug,\n  useListDrawer,\n  usePayloadAPI,\n  useTranslation,\n} from '@payloadcms/ui'\nimport React, { useCallback, useReducer, useState } from 'react'\nimport { Transforms } from 'slate'\nimport { ReactEditor, useFocused, useSelected, useSlateStatic } from 'slate-react'\n\nimport type { UploadElementType } from '../types.js'\n\nimport { useElement } from '../../../providers/ElementProvider.js'\nimport { EnabledRelationshipsCondition } from '../../EnabledRelationshipsCondition.js'\nimport { uploadFieldsSchemaPath, uploadName } from '../shared.js'\nimport { UploadDrawer } from './UploadDrawer/index.js'\nimport './index.scss'\n\nconst baseClass = 'rich-text-upload'\n\nconst initialParams = {\n  depth: 0,\n}\n\ntype Props = {\n  name: string\n  richTextComponentMap: Map<string, React.ReactNode>\n} & FormFieldBase\n\nconst UploadElement: React.FC<{ enabledCollectionSlugs?: string[] } & Props> = ({\n  enabledCollectionSlugs,\n}) => {\n  const {\n    attributes,\n    children,\n    element: { relationTo, value },\n    element,\n    fieldProps,\n    schemaPath,\n  } = useElement<UploadElementType>()\n\n  const {\n    collections,\n    routes: { api },\n    serverURL,\n  } = useConfig()\n  const { i18n, t } = useTranslation()\n  const [cacheBust, dispatchCacheBust] = useReducer((state) => state + 1, 0)\n  const [relatedCollection, setRelatedCollection] = useState<ClientCollectionConfig>(() =>\n    collections.find((coll) => coll.slug === relationTo),\n  )\n\n  const drawerSlug = useDrawerSlug('upload-drawer')\n\n  const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = useListDrawer({\n    collectionSlugs: enabledCollectionSlugs,\n    selectedCollection: relatedCollection.slug,\n  })\n\n  const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = useDocumentDrawer({\n    id: value?.id,\n    collectionSlug: relatedCollection.slug,\n  })\n\n  const editor = useSlateStatic()\n  const selected = useSelected()\n  const focused = useFocused()\n\n  // Get the referenced document\n  const [{ data }, { setParams }] = usePayloadAPI(\n    `${serverURL}${api}/${relatedCollection.slug}/${value?.id}`,\n    { initialParams },\n  )\n\n  const thumbnailSRC = data?.thumbnailURL || data?.url\n\n  const removeUpload = useCallback(() => {\n    const elementPath = ReactEditor.findPath(editor, element)\n\n    Transforms.removeNodes(editor, { at: elementPath })\n  }, [editor, element])\n\n  const updateUpload = useCallback(\n    (json) => {\n      const { doc } = json\n\n      const newNode = {\n        fields: doc,\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n\n      setParams({\n        ...initialParams,\n        cacheBust, // do this to get the usePayloadAPI to re-fetch the data even though the URL string hasn't changed\n      })\n\n      dispatchCacheBust()\n      closeDrawer()\n    },\n    [editor, element, setParams, cacheBust, closeDrawer],\n  )\n\n  const swapUpload = React.useCallback(\n    ({ collectionSlug, docID }) => {\n      const newNode = {\n        type: uploadName,\n        children: [{ text: ' ' }],\n        relationTo: collectionSlug,\n        value: { id: docID },\n      }\n\n      const elementPath = ReactEditor.findPath(editor, element)\n\n      setRelatedCollection(collections.find((coll) => coll.slug === collectionSlug))\n\n      Transforms.setNodes(editor, newNode, { at: elementPath })\n\n      dispatchCacheBust()\n      closeListDrawer()\n    },\n    [closeListDrawer, editor, element, collections],\n  )\n\n  const relatedFieldSchemaPath = `${uploadFieldsSchemaPath}.${relatedCollection.slug}`\n  const customFieldsMap = fieldProps.richTextComponentMap.get(relatedFieldSchemaPath)\n\n  return (\n    <div\n      className={[baseClass, selected && focused && `${baseClass}--selected`]\n        .filter(Boolean)\n        .join(' ')}\n      contentEditable={false}\n      {...attributes}\n    >\n      <div className={`${baseClass}__card`}>\n        <div className={`${baseClass}__topRow`}>\n          {/* TODO: migrate to use Thumbnail component */}\n          <div className={`${baseClass}__thumbnail`}>\n            {thumbnailSRC ? <img alt={data?.filename} src={thumbnailSRC} /> : <File />}\n          </div>\n          <div className={`${baseClass}__topRowRightPanel`}>\n            <div className={`${baseClass}__collectionLabel`}>\n              {getTranslation(relatedCollection.labels.singular, i18n)}\n            </div>\n            <div className={`${baseClass}__actions`}>\n              {Boolean(customFieldsMap) && (\n                <DrawerToggler\n                  className={`${baseClass}__upload-drawer-toggler`}\n                  disabled={fieldProps?.readOnly}\n                  slug={drawerSlug}\n                >\n                  <Button\n                    buttonStyle=\"icon-label\"\n                    el=\"div\"\n                    icon=\"edit\"\n                    onClick={(e) => {\n                      e.preventDefault()\n                    }}\n                    round\n                    tooltip={t('fields:editRelationship')}\n                  />\n                </DrawerToggler>\n              )}\n              <ListDrawerToggler\n                className={`${baseClass}__list-drawer-toggler`}\n                disabled={fieldProps?.readOnly}\n              >\n                <Button\n                  buttonStyle=\"icon-label\"\n                  disabled={fieldProps?.readOnly}\n                  el=\"div\"\n                  icon=\"swap\"\n                  onClick={() => {\n                    // do nothing\n                  }}\n                  round\n                  tooltip={t('fields:swapUpload')}\n                />\n              </ListDrawerToggler>\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__removeButton`}\n                disabled={fieldProps?.readOnly}\n                icon=\"x\"\n                onClick={(e) => {\n                  e.preventDefault()\n                  removeUpload()\n                }}\n                round\n                tooltip={t('fields:removeUpload')}\n              />\n            </div>\n          </div>\n        </div>\n        <div className={`${baseClass}__bottomRow`}>\n          <DocumentDrawerToggler className={`${baseClass}__doc-drawer-toggler`}>\n            <strong>{data?.filename}</strong>\n          </DocumentDrawerToggler>\n        </div>\n      </div>\n      {children}\n      {value?.id && <DocumentDrawer onSave={updateUpload} />}\n      <ListDrawer onSelect={swapUpload} />\n      <UploadDrawer {...{ drawerSlug, element, fieldProps, relatedCollection, schemaPath }} />\n    </div>\n  )\n}\n\nexport const Element = (props: Props): React.ReactNode => {\n  return (\n    <EnabledRelationshipsCondition {...props} uploads>\n      <UploadElement {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],"names":["getTranslation","Button","DrawerToggler","File","useConfig","useDocumentDrawer","useDrawerSlug","useListDrawer","usePayloadAPI","useTranslation","React","useCallback","useReducer","useState","Transforms","ReactEditor","useFocused","useSelected","useSlateStatic","useElement","EnabledRelationshipsCondition","uploadFieldsSchemaPath","uploadName","UploadDrawer","baseClass","initialParams","depth","UploadElement","enabledCollectionSlugs","attributes","children","element","relationTo","value","fieldProps","schemaPath","collections","routes","api","serverURL","i18n","t","cacheBust","dispatchCacheBust","state","relatedCollection","setRelatedCollection","find","coll","slug","drawerSlug","ListDrawer","ListDrawerToggler","closeDrawer","closeListDrawer","collectionSlugs","selectedCollection","DocumentDrawer","DocumentDrawerToggler","id","collectionSlug","editor","selected","focused","data","setParams","thumbnailSRC","thumbnailURL","url","removeUpload","elementPath","findPath","removeNodes","at","updateUpload","json","doc","newNode","fields","setNodes","swapUpload","docID","type","text","relatedFieldSchemaPath","customFieldsMap","richTextComponentMap","get","div","className","filter","Boolean","join","contentEditable","img","alt","filename","src","labels","singular","disabled","readOnly","buttonStyle","el","icon","onClick","e","preventDefault","round","tooltip","strong","onSave","onSelect","Element","props","uploads"],"mappings":"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"}