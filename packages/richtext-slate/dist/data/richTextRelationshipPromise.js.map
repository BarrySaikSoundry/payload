{"version":3,"sources":["../../src/data/richTextRelationshipPromise.ts"],"sourcesContent":["import type { PayloadRequest, RichTextAdapter, RichTextField } from 'payload'\n\nimport type { AdapterArguments } from '../types.js'\n\nimport { populate } from './populate.js'\nimport { recurseNestedFields } from './recurseNestedFields.js'\n\nexport type Args = Parameters<\n  RichTextAdapter<any[], AdapterArguments>['graphQLPopulationPromises']\n>[0]\n\ntype RecurseRichTextArgs = {\n  children: unknown[]\n  currentDepth: number\n  depth: number\n  draft: boolean\n  field: RichTextField<any[], AdapterArguments, AdapterArguments>\n  overrideAccess: boolean\n  populationPromises: Promise<void>[]\n  req: PayloadRequest\n  showHiddenFields: boolean\n}\n\nexport const recurseRichText = ({\n  children,\n  currentDepth = 0,\n  depth,\n  draft,\n  field,\n  overrideAccess = false,\n  populationPromises,\n  req,\n  showHiddenFields,\n}: RecurseRichTextArgs): void => {\n  if (depth <= 0 || currentDepth > depth) {\n    return\n  }\n\n  if (Array.isArray(children)) {\n    ;(children as any[]).forEach((element) => {\n      if ((element.type === 'relationship' || element.type === 'upload') && element?.value?.id) {\n        const collection = req.payload.collections[element?.relationTo]\n\n        if (collection) {\n          populationPromises.push(\n            populate({\n              id: element.value.id,\n              collection,\n              currentDepth,\n              data: element,\n              depth,\n              draft,\n              field,\n              key: 'value',\n              overrideAccess,\n              req,\n              showHiddenFields,\n            }),\n          )\n        }\n        if (\n          element.type === 'upload' &&\n          Array.isArray(field.admin?.upload?.collections?.[element?.relationTo]?.fields)\n        ) {\n          recurseNestedFields({\n            currentDepth,\n            data: element.fields || {},\n            depth,\n            draft,\n            fields: field.admin.upload.collections[element.relationTo].fields,\n            overrideAccess,\n            populationPromises,\n            req,\n            showHiddenFields,\n          })\n        }\n      }\n\n      if (element.type === 'link') {\n        if (element?.doc?.value && element?.doc?.relationTo) {\n          const collection = req.payload.collections[element?.doc?.relationTo]\n\n          if (collection) {\n            populationPromises.push(\n              populate({\n                id: element.doc.value,\n                collection,\n                currentDepth,\n                data: element.doc,\n                depth,\n                draft,\n                field,\n                key: 'value',\n                overrideAccess,\n                req,\n                showHiddenFields,\n              }),\n            )\n          }\n        }\n\n        if (Array.isArray(field.admin?.link?.fields)) {\n          recurseNestedFields({\n            currentDepth,\n            data: element.fields || {},\n            depth,\n            draft,\n            fields: field.admin?.link?.fields,\n            overrideAccess,\n            populationPromises,\n            req,\n            showHiddenFields,\n          })\n        }\n      }\n\n      if (element?.children) {\n        recurseRichText({\n          children: element.children,\n          currentDepth,\n          depth,\n          draft,\n          field,\n          overrideAccess,\n          populationPromises,\n          req,\n          showHiddenFields,\n        })\n      }\n    })\n  }\n}\n\nexport const richTextRelationshipPromise = ({\n  currentDepth,\n  depth,\n  draft,\n  field,\n  overrideAccess,\n  populationPromises,\n  req,\n  showHiddenFields,\n  siblingDoc,\n}: Args) => {\n  recurseRichText({\n    children: siblingDoc[field.name] as unknown[],\n    currentDepth,\n    depth,\n    draft,\n    field,\n    overrideAccess,\n    populationPromises,\n    req,\n    showHiddenFields,\n  })\n}\n"],"names":["populate","recurseNestedFields","recurseRichText","children","currentDepth","depth","draft","field","overrideAccess","populationPromises","req","showHiddenFields","Array","isArray","forEach","element","type","value","id","collection","payload","collections","relationTo","push","data","key","admin","upload","fields","doc","link","richTextRelationshipPromise","siblingDoc","name"],"mappings":"AAIA,SAASA,QAAQ,QAAQ,gBAAe;AACxC,SAASC,mBAAmB,QAAQ,2BAA0B;AAkB9D,OAAO,MAAMC,kBAAkB,CAAC,EAC9BC,QAAQ,EACRC,eAAe,CAAC,EAChBC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,iBAAiB,KAAK,EACtBC,kBAAkB,EAClBC,GAAG,EACHC,gBAAgB,EACI;IACpB,IAAIN,SAAS,KAAKD,eAAeC,OAAO;QACtC;IACF;IAEA,IAAIO,MAAMC,OAAO,CAACV,WAAW;QACzBA,SAAmBW,OAAO,CAAC,CAACC;YAC5B,IAAI,AAACA,CAAAA,QAAQC,IAAI,KAAK,kBAAkBD,QAAQC,IAAI,KAAK,QAAO,KAAMD,SAASE,OAAOC,IAAI;gBACxF,MAAMC,aAAaT,IAAIU,OAAO,CAACC,WAAW,CAACN,SAASO,WAAW;gBAE/D,IAAIH,YAAY;oBACdV,mBAAmBc,IAAI,CACrBvB,SAAS;wBACPkB,IAAIH,QAAQE,KAAK,CAACC,EAAE;wBACpBC;wBACAf;wBACAoB,MAAMT;wBACNV;wBACAC;wBACAC;wBACAkB,KAAK;wBACLjB;wBACAE;wBACAC;oBACF;gBAEJ;gBACA,IACEI,QAAQC,IAAI,KAAK,YACjBJ,MAAMC,OAAO,CAACN,MAAMmB,KAAK,EAAEC,QAAQN,aAAa,CAACN,SAASO,WAAW,EAAEM,SACvE;oBACA3B,oBAAoB;wBAClBG;wBACAoB,MAAMT,QAAQa,MAAM,IAAI,CAAC;wBACzBvB;wBACAC;wBACAsB,QAAQrB,MAAMmB,KAAK,CAACC,MAAM,CAACN,WAAW,CAACN,QAAQO,UAAU,CAAC,CAACM,MAAM;wBACjEpB;wBACAC;wBACAC;wBACAC;oBACF;gBACF;YACF;YAEA,IAAII,QAAQC,IAAI,KAAK,QAAQ;gBAC3B,IAAID,SAASc,KAAKZ,SAASF,SAASc,KAAKP,YAAY;oBACnD,MAAMH,aAAaT,IAAIU,OAAO,CAACC,WAAW,CAACN,SAASc,KAAKP,WAAW;oBAEpE,IAAIH,YAAY;wBACdV,mBAAmBc,IAAI,CACrBvB,SAAS;4BACPkB,IAAIH,QAAQc,GAAG,CAACZ,KAAK;4BACrBE;4BACAf;4BACAoB,MAAMT,QAAQc,GAAG;4BACjBxB;4BACAC;4BACAC;4BACAkB,KAAK;4BACLjB;4BACAE;4BACAC;wBACF;oBAEJ;gBACF;gBAEA,IAAIC,MAAMC,OAAO,CAACN,MAAMmB,KAAK,EAAEI,MAAMF,SAAS;oBAC5C3B,oBAAoB;wBAClBG;wBACAoB,MAAMT,QAAQa,MAAM,IAAI,CAAC;wBACzBvB;wBACAC;wBACAsB,QAAQrB,MAAMmB,KAAK,EAAEI,MAAMF;wBAC3BpB;wBACAC;wBACAC;wBACAC;oBACF;gBACF;YACF;YAEA,IAAII,SAASZ,UAAU;gBACrBD,gBAAgB;oBACdC,UAAUY,QAAQZ,QAAQ;oBAC1BC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;gBACF;YACF;QACF;IACF;AACF,EAAC;AAED,OAAO,MAAMoB,8BAA8B,CAAC,EAC1C3B,YAAY,EACZC,KAAK,EACLC,KAAK,EACLC,KAAK,EACLC,cAAc,EACdC,kBAAkB,EAClBC,GAAG,EACHC,gBAAgB,EAChBqB,UAAU,EACL;IACL9B,gBAAgB;QACdC,UAAU6B,UAAU,CAACzB,MAAM0B,IAAI,CAAC;QAChC7B;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;QACAC;IACF;AACF,EAAC"}