{"version":3,"sources":["../src/generateComponentMap.tsx"],"sourcesContent":["import type { Field, RichTextAdapter } from 'payload'\n\nimport { mapFields } from '@payloadcms/ui/utilities/buildComponentMap'\nimport React from 'react'\n\nimport type { AdapterArguments, RichTextCustomElement, RichTextCustomLeaf } from './types.js'\n\nimport { elements as elementTypes } from './field/elements/index.js'\nimport { linkFieldsSchemaPath } from './field/elements/link/shared.js'\nimport { uploadFieldsSchemaPath } from './field/elements/upload/shared.js'\nimport { defaultLeaves as leafTypes } from './field/leaves/index.js'\n\nexport const getGenerateComponentMap =\n  (args: AdapterArguments): RichTextAdapter['generateComponentMap'] =>\n  ({ WithServerSideProps, config, i18n }) => {\n    const componentMap = new Map()\n\n    ;(args?.admin?.leaves || Object.values(leafTypes)).forEach((leaf) => {\n      let leafObject: RichTextCustomLeaf\n\n      if (typeof leaf === 'object' && leaf !== null) {\n        leafObject = leaf\n      } else if (typeof leaf === 'string' && leafTypes[leaf]) {\n        leafObject = leafTypes[leaf]\n      }\n\n      if (leafObject) {\n        const LeafButton = leafObject.Button\n        const LeafComponent = leafObject.Leaf\n\n        componentMap.set(`leaf.button.${leafObject.name}`, <LeafButton />)\n        componentMap.set(`leaf.component.${leafObject.name}`, <LeafComponent />)\n\n        if (Array.isArray(leafObject.plugins)) {\n          leafObject.plugins.forEach((Plugin, i) => {\n            componentMap.set(`leaf.plugin.${leafObject.name}.${i}`, <Plugin />)\n          })\n        }\n      }\n    })\n    ;(args?.admin?.elements || Object.values(elementTypes)).forEach((el) => {\n      let element: RichTextCustomElement\n\n      if (typeof el === 'object' && el !== null) {\n        element = el\n      } else if (typeof el === 'string' && elementTypes[el]) {\n        element = elementTypes[el]\n      }\n\n      if (element) {\n        const ElementButton = element.Button\n        const ElementComponent = element.Element\n\n        if (ElementButton) componentMap.set(`element.button.${element.name}`, <ElementButton />)\n        componentMap.set(`element.component.${element.name}`, <ElementComponent />)\n\n        if (Array.isArray(element.plugins)) {\n          element.plugins.forEach((Plugin, i) => {\n            componentMap.set(`element.plugin.${element.name}.${i}`, <Plugin />)\n          })\n        }\n\n        switch (element.name) {\n          case 'link': {\n            const mappedFields = mapFields({\n              WithServerSideProps,\n              config,\n              fieldSchema: args.admin?.link?.fields as Field[],\n              i18n,\n              readOnly: false,\n            })\n\n            componentMap.set(linkFieldsSchemaPath, mappedFields)\n\n            break\n          }\n\n          case 'upload': {\n            const uploadEnabledCollections = config.collections.filter(\n              ({ admin: { enableRichTextRelationship, hidden }, upload }) => {\n                if (hidden === true) {\n                  return false\n                }\n\n                return enableRichTextRelationship && Boolean(upload) === true\n              },\n            )\n\n            uploadEnabledCollections.forEach((collection) => {\n              if (args?.admin?.upload?.collections[collection.slug]?.fields) {\n                const mappedFields = mapFields({\n                  WithServerSideProps,\n                  config,\n                  fieldSchema: args?.admin?.upload?.collections[collection.slug]?.fields,\n                  i18n,\n                  readOnly: false,\n                })\n\n                componentMap.set(`${uploadFieldsSchemaPath}.${collection.slug}`, mappedFields)\n              }\n            })\n\n            break\n          }\n\n          case 'relationship':\n            break\n        }\n      }\n    })\n\n    return componentMap\n  }\n"],"names":["mapFields","React","elements","elementTypes","linkFieldsSchemaPath","uploadFieldsSchemaPath","defaultLeaves","leafTypes","getGenerateComponentMap","args","WithServerSideProps","config","i18n","componentMap","Map","admin","leaves","Object","values","forEach","leaf","leafObject","LeafButton","Button","LeafComponent","Leaf","set","name","Array","isArray","plugins","Plugin","i","el","element","ElementButton","ElementComponent","Element","mappedFields","fieldSchema","link","fields","readOnly","uploadEnabledCollections","collections","filter","enableRichTextRelationship","hidden","upload","Boolean","collection","slug"],"mappings":"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"}