{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport type { PluginOptions } from './types.js'\n\nimport { payloadCloudEmail } from './email.js'\nimport { getAfterDeleteHook } from './hooks/afterDelete.js'\nimport { getBeforeChangeHook } from './hooks/beforeChange.js'\nimport {\n  getCacheUploadsAfterChangeHook,\n  getCacheUploadsAfterDeleteHook,\n} from './hooks/uploadCache.js'\nimport { getStaticHandler } from './staticHandler.js'\n\nexport const payloadCloudPlugin =\n  (pluginOptions?: PluginOptions) =>\n  async (incomingConfig: Config): Promise<Config> => {\n    let config = { ...incomingConfig }\n\n    if (process.env.PAYLOAD_CLOUD !== 'true') {\n      return config\n    }\n\n    const cachingEnabled =\n      pluginOptions?.uploadCaching !== false && !!process.env.PAYLOAD_CLOUD_CACHE_KEY\n\n    const apiEndpoint = pluginOptions?.endpoint || 'https://cloud-api.payloadcms.com'\n\n    // Configure cloud storage\n    if (pluginOptions?.storage !== false) {\n      config = {\n        ...config,\n        collections: (config.collections || []).map((collection) => {\n          if (collection.upload) {\n            return {\n              ...collection,\n              hooks: {\n                ...(collection.hooks || {}),\n                afterChange: [\n                  ...(collection.hooks?.afterChange || []),\n                  ...(cachingEnabled\n                    ? [getCacheUploadsAfterChangeHook({ endpoint: apiEndpoint })]\n                    : []),\n                ],\n                afterDelete: [\n                  ...(collection.hooks?.afterDelete || []),\n                  getAfterDeleteHook({ collection }),\n                  ...(cachingEnabled\n                    ? [getCacheUploadsAfterDeleteHook({ endpoint: apiEndpoint })]\n                    : []),\n                ],\n                beforeChange: [\n                  ...(collection.hooks?.beforeChange || []),\n                  getBeforeChangeHook({ collection }),\n                ],\n              },\n              upload: {\n                ...(typeof collection.upload === 'object' ? collection.upload : {}),\n                disableLocalStorage: true,\n                handlers: [\n                  ...(typeof collection.upload === 'object' &&\n                  Array.isArray(collection.upload.handlers)\n                    ? collection.upload.handlers\n                    : []),\n                  getStaticHandler({\n                    cachingOptions: pluginOptions?.uploadCaching,\n                    collection,\n                  }),\n                ],\n              },\n            }\n          }\n\n          return collection\n        }),\n        upload: {\n          ...(config.upload || {}),\n          useTempFiles: true,\n        },\n      }\n    }\n\n    // Configure cloud email\n    const apiKey = process.env.PAYLOAD_CLOUD_EMAIL_API_KEY\n    const defaultDomain = process.env.PAYLOAD_CLOUD_DEFAULT_DOMAIN\n    if (pluginOptions?.email !== false && apiKey && defaultDomain) {\n      config.email = await payloadCloudEmail({\n        apiKey,\n        config,\n        defaultDomain,\n        defaultFromAddress: pluginOptions?.email?.defaultFromAddress,\n        defaultFromName: pluginOptions?.email?.defaultFromName,\n        skipVerify: pluginOptions?.email?.skipVerify,\n      })\n    }\n\n    return config\n  }\n"],"names":["payloadCloudEmail","getAfterDeleteHook","getBeforeChangeHook","getCacheUploadsAfterChangeHook","getCacheUploadsAfterDeleteHook","getStaticHandler","payloadCloudPlugin","pluginOptions","incomingConfig","config","process","env","PAYLOAD_CLOUD","cachingEnabled","uploadCaching","PAYLOAD_CLOUD_CACHE_KEY","apiEndpoint","endpoint","storage","collections","map","collection","upload","hooks","afterChange","afterDelete","beforeChange","disableLocalStorage","handlers","Array","isArray","cachingOptions","useTempFiles","apiKey","PAYLOAD_CLOUD_EMAIL_API_KEY","defaultDomain","PAYLOAD_CLOUD_DEFAULT_DOMAIN","email","defaultFromAddress","defaultFromName","skipVerify"],"mappings":"AAIA,SAASA,iBAAiB,QAAQ,aAAY;AAC9C,SAASC,kBAAkB,QAAQ,yBAAwB;AAC3D,SAASC,mBAAmB,QAAQ,0BAAyB;AAC7D,SACEC,8BAA8B,EAC9BC,8BAA8B,QACzB,yBAAwB;AAC/B,SAASC,gBAAgB,QAAQ,qBAAoB;AAErD,OAAO,MAAMC,qBACX,CAACC,gBACD,OAAOC;QACL,IAAIC,SAAS;YAAE,GAAGD,cAAc;QAAC;QAEjC,IAAIE,QAAQC,GAAG,CAACC,aAAa,KAAK,QAAQ;YACxC,OAAOH;QACT;QAEA,MAAMI,iBACJN,eAAeO,kBAAkB,SAAS,CAAC,CAACJ,QAAQC,GAAG,CAACI,uBAAuB;QAEjF,MAAMC,cAAcT,eAAeU,YAAY;QAE/C,0BAA0B;QAC1B,IAAIV,eAAeW,YAAY,OAAO;YACpCT,SAAS;gBACP,GAAGA,MAAM;gBACTU,aAAa,AAACV,CAAAA,OAAOU,WAAW,IAAI,EAAE,AAAD,EAAGC,GAAG,CAAC,CAACC;oBAC3C,IAAIA,WAAWC,MAAM,EAAE;wBACrB,OAAO;4BACL,GAAGD,UAAU;4BACbE,OAAO;gCACL,GAAIF,WAAWE,KAAK,IAAI,CAAC,CAAC;gCAC1BC,aAAa;uCACPH,WAAWE,KAAK,EAAEC,eAAe,EAAE;uCACnCX,iBACA;wCAACV,+BAA+B;4CAAEc,UAAUD;wCAAY;qCAAG,GAC3D,EAAE;iCACP;gCACDS,aAAa;uCACPJ,WAAWE,KAAK,EAAEE,eAAe,EAAE;oCACvCxB,mBAAmB;wCAAEoB;oCAAW;uCAC5BR,iBACA;wCAACT,+BAA+B;4CAAEa,UAAUD;wCAAY;qCAAG,GAC3D,EAAE;iCACP;gCACDU,cAAc;uCACRL,WAAWE,KAAK,EAAEG,gBAAgB,EAAE;oCACxCxB,oBAAoB;wCAAEmB;oCAAW;iCAClC;4BACH;4BACAC,QAAQ;gCACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;gCAClEK,qBAAqB;gCACrBC,UAAU;uCACJ,OAAOP,WAAWC,MAAM,KAAK,YACjCO,MAAMC,OAAO,CAACT,WAAWC,MAAM,CAACM,QAAQ,IACpCP,WAAWC,MAAM,CAACM,QAAQ,GAC1B,EAAE;oCACNvB,iBAAiB;wCACf0B,gBAAgBxB,eAAeO;wCAC/BO;oCACF;iCACD;4BACH;wBACF;oBACF;oBAEA,OAAOA;gBACT;gBACAC,QAAQ;oBACN,GAAIb,OAAOa,MAAM,IAAI,CAAC,CAAC;oBACvBU,cAAc;gBAChB;YACF;QACF;QAEA,wBAAwB;QACxB,MAAMC,SAASvB,QAAQC,GAAG,CAACuB,2BAA2B;QACtD,MAAMC,gBAAgBzB,QAAQC,GAAG,CAACyB,4BAA4B;QAC9D,IAAI7B,eAAe8B,UAAU,SAASJ,UAAUE,eAAe;YAC7D1B,OAAO4B,KAAK,GAAG,MAAMrC,kBAAkB;gBACrCiC;gBACAxB;gBACA0B;gBACAG,oBAAoB/B,eAAe8B,OAAOC;gBAC1CC,iBAAiBhC,eAAe8B,OAAOE;gBACvCC,YAAYjC,eAAe8B,OAAOG;YACpC;QACF;QAEA,OAAO/B;IACT,EAAC"}