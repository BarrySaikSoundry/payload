{"version":3,"sources":["../../../src/collections/config/sanitize.ts"],"sourcesContent":["import merge from 'deepmerge'\n\nimport type { Config, SanitizedConfig } from '../../config/types.js'\nimport type { CollectionConfig, SanitizedCollectionConfig } from './types.js'\n\nimport baseAccountLockFields from '../../auth/baseFields/accountLock.js'\nimport baseAPIKeyFields from '../../auth/baseFields/apiKey.js'\nimport baseAuthFields from '../../auth/baseFields/auth.js'\nimport baseLoginField from '../../auth/baseFields/loginField.js'\nimport baseVerificationFields from '../../auth/baseFields/verification.js'\nimport { TimestampsRequired } from '../../errors/TimestampsRequired.js'\nimport { sanitizeFields } from '../../fields/config/sanitize.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\nimport mergeBaseFields from '../../fields/mergeBaseFields.js'\nimport { getBaseUploadFields } from '../../uploads/getBaseFields.js'\nimport { formatLabels } from '../../utilities/formatLabels.js'\nimport { isPlainObject } from '../../utilities/isPlainObject.js'\nimport baseVersionFields from '../../versions/baseFields.js'\nimport { versionDefaults } from '../../versions/defaults.js'\nimport { authDefaults, defaults } from './defaults.js'\n\nexport const sanitizeCollection = async (\n  config: Config,\n  collection: CollectionConfig,\n  /**\n   * If this property is set, RichText fields won't be sanitized immediately. Instead, they will be added to this array as promises\n   * so that you can sanitize them together, after the config has been sanitized.\n   */\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>,\n): Promise<SanitizedCollectionConfig> => {\n  // /////////////////////////////////\n  // Make copy of collection config\n  // /////////////////////////////////\n\n  const sanitized: CollectionConfig = merge(defaults, collection, {\n    isMergeableObject: isPlainObject,\n  })\n\n  // /////////////////////////////////\n  // Sanitize fields\n  // /////////////////////////////////\n\n  const validRelationships = config.collections.map((c) => c.slug) || []\n  sanitized.fields = await sanitizeFields({\n    config,\n    fields: sanitized.fields,\n    richTextSanitizationPromises,\n    validRelationships,\n  })\n\n  if (sanitized.timestamps !== false) {\n    // add default timestamps fields only as needed\n    let hasUpdatedAt = null\n    let hasCreatedAt = null\n    sanitized.fields.some((field) => {\n      if (fieldAffectsData(field)) {\n        if (field.name === 'updatedAt') hasUpdatedAt = true\n        if (field.name === 'createdAt') hasCreatedAt = true\n      }\n      return hasCreatedAt && hasUpdatedAt\n    })\n    if (!hasUpdatedAt) {\n      sanitized.fields.push({\n        name: 'updatedAt',\n        type: 'date',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        label: ({ t }) => t('general:updatedAt'),\n      })\n    }\n    if (!hasCreatedAt) {\n      sanitized.fields.push({\n        name: 'createdAt',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        // The default sort for list view is createdAt. Thus, enabling indexing by default, is a major performance improvement, especially for large or a large amount of collections.\n        type: 'date',\n        index: true,\n        label: ({ t }) => t('general:createdAt'),\n      })\n    }\n  }\n\n  sanitized.labels = sanitized.labels || formatLabels(sanitized.slug)\n\n  if (sanitized.versions) {\n    if (sanitized.versions === true) sanitized.versions = { drafts: false }\n\n    if (sanitized.timestamps === false) {\n      throw new TimestampsRequired(collection)\n    }\n\n    if (sanitized.versions.drafts) {\n      if (sanitized.versions.drafts === true) {\n        sanitized.versions.drafts = {\n          autosave: false,\n          validate: false,\n        }\n      }\n\n      if (sanitized.versions.drafts.autosave === true) {\n        sanitized.versions.drafts.autosave = {\n          interval: versionDefaults.autosaveInterval,\n        }\n      }\n\n      if (sanitized.versions.drafts.validate === undefined) {\n        sanitized.versions.drafts.validate = false\n      }\n\n      sanitized.fields = mergeBaseFields(sanitized.fields, baseVersionFields)\n    }\n  }\n\n  if (sanitized.upload) {\n    if (sanitized.upload === true) sanitized.upload = {}\n\n    // disable duplicate for uploads by default\n    sanitized.disableDuplicate = sanitized.disableDuplicate || true\n\n    sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug\n    sanitized.admin.useAsTitle =\n      sanitized.admin.useAsTitle && sanitized.admin.useAsTitle !== 'id'\n        ? sanitized.admin.useAsTitle\n        : 'filename'\n\n    const uploadFields = getBaseUploadFields({\n      collection: sanitized,\n      config,\n    })\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, uploadFields)\n  }\n\n  if (sanitized.auth) {\n    sanitized.auth = merge(authDefaults, typeof sanitized.auth === 'object' ? sanitized.auth : {}, {\n      isMergeableObject: isPlainObject,\n    })\n\n    let authFields = []\n\n    if (sanitized.auth.useAPIKey) {\n      authFields = authFields.concat(baseAPIKeyFields)\n    }\n\n    if (!sanitized.auth.disableLocalStrategy) {\n      const loginField = sanitized.auth.loginWithUsername ? 'username' : 'email'\n\n      authFields = authFields.concat(baseLoginField(loginField))\n\n      authFields = authFields.concat(baseAuthFields)\n\n      if (sanitized.auth.verify) {\n        if (sanitized.auth.verify === true) sanitized.auth.verify = {}\n        authFields = authFields.concat(baseVerificationFields)\n      }\n\n      if (sanitized.auth.maxLoginAttempts > 0) {\n        authFields = authFields.concat(baseAccountLockFields)\n      }\n    }\n\n    // disable duplicate for auth enabled collections by default\n    sanitized.disableDuplicate = sanitized.disableDuplicate || true\n\n    if (!sanitized.auth.strategies) {\n      sanitized.auth.strategies = []\n    }\n\n    sanitized.fields = mergeBaseFields(sanitized.fields, authFields)\n  }\n\n  return sanitized as SanitizedCollectionConfig\n}\n"],"names":["merge","baseAccountLockFields","baseAPIKeyFields","baseAuthFields","baseLoginField","baseVerificationFields","TimestampsRequired","sanitizeFields","fieldAffectsData","mergeBaseFields","getBaseUploadFields","formatLabels","isPlainObject","baseVersionFields","versionDefaults","authDefaults","defaults","sanitizeCollection","config","collection","richTextSanitizationPromises","sanitized","isMergeableObject","validRelationships","collections","map","c","slug","fields","timestamps","hasUpdatedAt","hasCreatedAt","some","field","name","push","type","admin","disableBulkEdit","hidden","label","t","index","labels","versions","drafts","autosave","validate","interval","autosaveInterval","undefined","upload","disableDuplicate","staticDir","useAsTitle","uploadFields","auth","authFields","useAPIKey","concat","disableLocalStrategy","loginField","loginWithUsername","verify","maxLoginAttempts","strategies"],"mappings":"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"}