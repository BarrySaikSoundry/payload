{"version":3,"sources":["../../../src/globals/config/sanitize.ts"],"sourcesContent":["import type { Config, SanitizedConfig } from '../../config/types.js'\nimport type { SanitizedGlobalConfig } from './types.js'\n\nimport defaultAccess from '../../auth/defaultAccess.js'\nimport { sanitizeFields } from '../../fields/config/sanitize.js'\nimport { fieldAffectsData } from '../../fields/config/types.js'\nimport mergeBaseFields from '../../fields/mergeBaseFields.js'\nimport { toWords } from '../../utilities/formatLabels.js'\nimport baseVersionFields from '../../versions/baseFields.js'\nimport { versionDefaults } from '../../versions/defaults.js'\n\nexport const sanitizeGlobals = async (\n  config: Config,\n  /**\n   * If this property is set, RichText fields won't be sanitized immediately. Instead, they will be added to this array as promises\n   * so that you can sanitize them together, after the config has been sanitized.\n   */\n  richTextSanitizationPromises?: Array<(config: SanitizedConfig) => Promise<void>>,\n): Promise<SanitizedGlobalConfig[]> => {\n  const { collections, globals } = config\n\n  for (let i = 0; i < globals.length; i++) {\n    const global = globals[i]\n    global.label = global.label || toWords(global.slug)\n\n    // /////////////////////////////////\n    // Ensure that collection has required object structure\n    // /////////////////////////////////\n\n    global.endpoints = global.endpoints ?? []\n    if (!global.hooks) global.hooks = {}\n    if (!global.access) global.access = {}\n    if (!global.admin) global.admin = {}\n\n    if (!global.access.read) global.access.read = defaultAccess\n    if (!global.access.update) global.access.update = defaultAccess\n\n    if (!global.hooks.beforeValidate) global.hooks.beforeValidate = []\n    if (!global.hooks.beforeChange) global.hooks.beforeChange = []\n    if (!global.hooks.afterChange) global.hooks.afterChange = []\n    if (!global.hooks.beforeRead) global.hooks.beforeRead = []\n    if (!global.hooks.afterRead) global.hooks.afterRead = []\n\n    // Sanitize fields\n    const validRelationships = collections.map((c) => c.slug) || []\n    global.fields = await sanitizeFields({\n      config,\n      fields: global.fields,\n      richTextSanitizationPromises,\n      validRelationships,\n    })\n\n    if (global.versions) {\n      if (global.versions === true) global.versions = { drafts: false }\n\n      if (global.versions.drafts) {\n        if (global.versions.drafts === true) {\n          global.versions.drafts = {\n            autosave: false,\n            validate: false,\n          }\n        }\n\n        if (global.versions.drafts.autosave === true) {\n          global.versions.drafts.autosave = {\n            interval: versionDefaults.autosaveInterval,\n          }\n        }\n\n        if (global.versions.drafts.validate === undefined) {\n          global.versions.drafts.validate = false\n        }\n\n        global.fields = mergeBaseFields(global.fields, baseVersionFields)\n      }\n    }\n\n    if (!global.custom) global.custom = {}\n\n    // /////////////////////////////////\n    // Sanitize fields\n    // /////////////////////////////////\n    let hasUpdatedAt = null\n    let hasCreatedAt = null\n    global.fields.some((field) => {\n      if (fieldAffectsData(field)) {\n        if (field.name === 'updatedAt') hasUpdatedAt = true\n        if (field.name === 'createdAt') hasCreatedAt = true\n      }\n      return hasCreatedAt && hasUpdatedAt\n    })\n    if (!hasUpdatedAt) {\n      global.fields.push({\n        name: 'updatedAt',\n        type: 'date',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        label: ({ t }) => t('general:updatedAt'),\n      })\n    }\n    if (!hasCreatedAt) {\n      global.fields.push({\n        name: 'createdAt',\n        type: 'date',\n        admin: {\n          disableBulkEdit: true,\n          hidden: true,\n        },\n        label: ({ t }) => t('general:createdAt'),\n      })\n    }\n\n    globals[i] = global\n  }\n\n  return globals as SanitizedGlobalConfig[]\n}\n"],"names":["defaultAccess","sanitizeFields","fieldAffectsData","mergeBaseFields","toWords","baseVersionFields","versionDefaults","sanitizeGlobals","config","richTextSanitizationPromises","collections","globals","i","length","global","label","slug","endpoints","hooks","access","admin","read","update","beforeValidate","beforeChange","afterChange","beforeRead","afterRead","validRelationships","map","c","fields","versions","drafts","autosave","validate","interval","autosaveInterval","undefined","custom","hasUpdatedAt","hasCreatedAt","some","field","name","push","type","disableBulkEdit","hidden","t"],"mappings":"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"}