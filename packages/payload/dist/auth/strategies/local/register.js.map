{"version":3,"sources":["../../../../src/auth/strategies/local/register.ts"],"sourcesContent":["import type { SanitizedCollectionConfig } from '../../../collections/config/types.js'\nimport type { Payload } from '../../../index.js'\nimport type { PayloadRequest } from '../../../types/index.js'\n\nimport { ValidationError } from '../../../errors/index.js'\nimport { generatePasswordSaltHash } from './generatePasswordSaltHash.js'\n\ntype Args = {\n  collection: SanitizedCollectionConfig\n  doc: Record<string, unknown>\n  password: string\n  payload: Payload\n  req: PayloadRequest\n}\n\nexport const registerLocalStrategy = async ({\n  collection,\n  doc,\n  password,\n  payload,\n  req,\n}: Args): Promise<Record<string, unknown>> => {\n  const loginWithUsername = collection?.auth?.loginWithUsername\n\n  const existingUser = await payload.find({\n    collection: collection.slug,\n    depth: 0,\n    limit: 1,\n    pagination: false,\n    req,\n    where: loginWithUsername\n      ? {\n          username: {\n            equals: doc.username,\n          },\n        }\n      : {\n          email: {\n            equals: doc.email,\n          },\n        },\n  })\n\n  if (existingUser.docs.length > 0) {\n    throw new ValidationError({\n      collection: collection.slug,\n      errors: [\n        loginWithUsername\n          ? {\n              field: 'username',\n              message: req.t('error:usernameAlreadyRegistered'),\n            }\n          : { field: 'email', message: req.t('error:userEmailAlreadyRegistered') },\n      ],\n    })\n  }\n\n  const { hash, salt } = await generatePasswordSaltHash({ collection, password })\n\n  const sanitizedDoc = { ...doc }\n  if (sanitizedDoc.password) delete sanitizedDoc.password\n\n  return payload.db.create({\n    collection: collection.slug,\n    data: {\n      ...sanitizedDoc,\n      hash,\n      salt,\n    },\n    req,\n  })\n}\n"],"names":["ValidationError","generatePasswordSaltHash","registerLocalStrategy","collection","doc","password","payload","req","loginWithUsername","auth","existingUser","find","slug","depth","limit","pagination","where","username","equals","email","docs","length","errors","field","message","t","hash","salt","sanitizedDoc","db","create","data"],"mappings":"AAIA,SAASA,eAAe,QAAQ,2BAA0B;AAC1D,SAASC,wBAAwB,QAAQ,gCAA+B;AAUxE,OAAO,MAAMC,wBAAwB,OAAO,EAC1CC,UAAU,EACVC,GAAG,EACHC,QAAQ,EACRC,OAAO,EACPC,GAAG,EACE;IACL,MAAMC,oBAAoBL,YAAYM,MAAMD;IAE5C,MAAME,eAAe,MAAMJ,QAAQK,IAAI,CAAC;QACtCR,YAAYA,WAAWS,IAAI;QAC3BC,OAAO;QACPC,OAAO;QACPC,YAAY;QACZR;QACAS,OAAOR,oBACH;YACES,UAAU;gBACRC,QAAQd,IAAIa,QAAQ;YACtB;QACF,IACA;YACEE,OAAO;gBACLD,QAAQd,IAAIe,KAAK;YACnB;QACF;IACN;IAEA,IAAIT,aAAaU,IAAI,CAACC,MAAM,GAAG,GAAG;QAChC,MAAM,IAAIrB,gBAAgB;YACxBG,YAAYA,WAAWS,IAAI;YAC3BU,QAAQ;gBACNd,oBACI;oBACEe,OAAO;oBACPC,SAASjB,IAAIkB,CAAC,CAAC;gBACjB,IACA;oBAAEF,OAAO;oBAASC,SAASjB,IAAIkB,CAAC,CAAC;gBAAoC;aAC1E;QACH;IACF;IAEA,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAG,MAAM1B,yBAAyB;QAAEE;QAAYE;IAAS;IAE7E,MAAMuB,eAAe;QAAE,GAAGxB,GAAG;IAAC;IAC9B,IAAIwB,aAAavB,QAAQ,EAAE,OAAOuB,aAAavB,QAAQ;IAEvD,OAAOC,QAAQuB,EAAE,CAACC,MAAM,CAAC;QACvB3B,YAAYA,WAAWS,IAAI;QAC3BmB,MAAM;YACJ,GAAGH,YAAY;YACfF;YACAC;QACF;QACApB;IACF;AACF,EAAC"}