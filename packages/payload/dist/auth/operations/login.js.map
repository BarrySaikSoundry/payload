{"version":3,"sources":["../../../src/auth/operations/login.ts"],"sourcesContent":["import jwt from 'jsonwebtoken'\n\nimport type {\n  AuthOperationsFromCollectionSlug,\n  Collection,\n  DataFromCollectionSlug,\n} from '../../collections/config/types.js'\nimport type { CollectionSlug } from '../../index.js'\nimport type { PayloadRequest } from '../../types/index.js'\nimport type { User } from '../types.js'\n\nimport { buildAfterOperation } from '../../collections/operations/utils.js'\nimport { AuthenticationError, LockedAuth, ValidationError } from '../../errors/index.js'\nimport { afterRead } from '../../fields/hooks/afterRead/index.js'\nimport { commitTransaction } from '../../utilities/commitTransaction.js'\nimport { initTransaction } from '../../utilities/initTransaction.js'\nimport { killTransaction } from '../../utilities/killTransaction.js'\nimport sanitizeInternalFields from '../../utilities/sanitizeInternalFields.js'\nimport { getFieldsToSign } from '../getFieldsToSign.js'\nimport isLocked from '../isLocked.js'\nimport { authenticateLocalStrategy } from '../strategies/local/authenticate.js'\nimport { incrementLoginAttempts } from '../strategies/local/incrementLoginAttempts.js'\nimport { resetLoginAttempts } from '../strategies/local/resetLoginAttempts.js'\n\nexport type Result = {\n  exp?: number\n  token?: string\n  user?: User\n}\n\nexport type Arguments<TSlug extends CollectionSlug> = {\n  collection: Collection\n  data: AuthOperationsFromCollectionSlug<TSlug>['login']\n  depth?: number\n  overrideAccess?: boolean\n  req: PayloadRequest\n  showHiddenFields?: boolean\n}\n\nexport const loginOperation = async <TSlug extends CollectionSlug>(\n  incomingArgs: Arguments<TSlug>,\n): Promise<{ user: DataFromCollectionSlug<TSlug> } & Result> => {\n  let args = incomingArgs\n\n  try {\n    const shouldCommit = await initTransaction(args.req)\n\n    // /////////////////////////////////////\n    // beforeOperation - Collection\n    // /////////////////////////////////////\n\n    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      args =\n        (await hook({\n          args,\n          collection: args.collection?.config,\n          context: args.req.context,\n          operation: 'login',\n          req: args.req,\n        })) || args\n    }, Promise.resolve())\n\n    const {\n      collection: { config: collectionConfig },\n      data,\n      depth,\n      overrideAccess,\n      req,\n      req: {\n        fallbackLocale,\n        locale,\n        payload,\n        payload: { secret },\n      },\n      showHiddenFields,\n    } = args\n\n    // /////////////////////////////////////\n    // Login\n    // /////////////////////////////////////\n\n    let user\n    const loginWithUsername = collectionConfig?.auth?.loginWithUsername\n    const { email: unsanitizedEmail, password } = data\n    const username = 'username' in data && data.username\n\n    if (loginWithUsername && !username) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ field: 'username', message: req.i18n.t('validation:required') }],\n      })\n    }\n\n    if (\n      !loginWithUsername &&\n      (typeof unsanitizedEmail !== 'string' || unsanitizedEmail.trim() === '')\n    ) {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ field: 'email', message: req.i18n.t('validation:required') }],\n      })\n    }\n    if (typeof password !== 'string' || password.trim() === '') {\n      throw new ValidationError({\n        collection: collectionConfig.slug,\n        errors: [{ field: 'password', message: req.i18n.t('validation:required') }],\n      })\n    }\n\n    const email = unsanitizedEmail ? unsanitizedEmail.toLowerCase().trim() : null\n\n    user = await payload.db.findOne<any>({\n      collection: collectionConfig.slug,\n      req,\n      where:\n        loginWithUsername && username\n          ? { username: { equals: username } }\n          : { email: { equals: unsanitizedEmail.toLowerCase() } },\n    })\n\n    if (!user || (args.collection.config.auth.verify && user._verified === false)) {\n      throw new AuthenticationError(req.t, loginWithUsername)\n    }\n\n    if (user && isLocked(user.lockUntil)) {\n      throw new LockedAuth(req.t)\n    }\n\n    const authResult = await authenticateLocalStrategy({ doc: user, password })\n\n    user = sanitizeInternalFields(user)\n\n    const maxLoginAttemptsEnabled = args.collection.config.auth.maxLoginAttempts > 0\n\n    if (!authResult) {\n      if (maxLoginAttemptsEnabled) {\n        await incrementLoginAttempts({\n          collection: collectionConfig,\n          doc: user,\n          payload: req.payload,\n          req,\n        })\n      }\n\n      if (shouldCommit) await commitTransaction(req)\n\n      throw new AuthenticationError(req.t)\n    }\n\n    if (maxLoginAttemptsEnabled) {\n      await resetLoginAttempts({\n        collection: collectionConfig,\n        doc: user,\n        payload: req.payload,\n        req,\n      })\n    }\n\n    const fieldsToSign = getFieldsToSign({\n      collectionConfig,\n      email,\n      user,\n    })\n\n    // /////////////////////////////////////\n    // beforeLogin - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.beforeLogin.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: args.req.context,\n          req: args.req,\n          user,\n        })) || user\n    }, Promise.resolve())\n\n    const token = jwt.sign(fieldsToSign, secret, {\n      expiresIn: collectionConfig.auth.tokenExpiration,\n    })\n\n    req.user = user\n\n    // /////////////////////////////////////\n    // afterLogin - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterLogin.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: args.req.context,\n          req: args.req,\n          token,\n          user,\n        })) || user\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Fields\n    // /////////////////////////////////////\n\n    user = await afterRead({\n      collection: collectionConfig,\n      context: req.context,\n      depth,\n      doc: user,\n      draft: undefined,\n      fallbackLocale,\n      global: null,\n      locale,\n      overrideAccess,\n      req,\n      showHiddenFields,\n    })\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: req.context,\n          doc: user,\n          req,\n        })) || user\n    }, Promise.resolve())\n\n    // /////////////////////////////////////\n    // afterRead - Collection\n    // /////////////////////////////////////\n\n    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {\n      await priorHook\n\n      user =\n        (await hook({\n          collection: args.collection?.config,\n          context: req.context,\n          doc: user,\n          req,\n        })) || user\n    }, Promise.resolve())\n\n    let result: { user: DataFromCollectionSlug<TSlug> } & Result = {\n      exp: (jwt.decode(token) as jwt.JwtPayload).exp,\n      token,\n      user,\n    }\n\n    // /////////////////////////////////////\n    // afterOperation - Collection\n    // /////////////////////////////////////\n\n    result = await buildAfterOperation({\n      args,\n      collection: args.collection?.config,\n      operation: 'login',\n      result,\n    })\n\n    // /////////////////////////////////////\n    // Return results\n    // /////////////////////////////////////\n\n    if (shouldCommit) await commitTransaction(req)\n\n    return result\n  } catch (error: unknown) {\n    await killTransaction(args.req)\n    throw error\n  }\n}\n"],"names":["jwt","buildAfterOperation","AuthenticationError","LockedAuth","ValidationError","afterRead","commitTransaction","initTransaction","killTransaction","sanitizeInternalFields","getFieldsToSign","isLocked","authenticateLocalStrategy","incrementLoginAttempts","resetLoginAttempts","loginOperation","incomingArgs","args","shouldCommit","req","collection","config","hooks","beforeOperation","reduce","priorHook","hook","context","operation","Promise","resolve","collectionConfig","data","depth","overrideAccess","fallbackLocale","locale","payload","secret","showHiddenFields","user","loginWithUsername","auth","email","unsanitizedEmail","password","username","slug","errors","field","message","i18n","t","trim","toLowerCase","db","findOne","where","equals","verify","_verified","lockUntil","authResult","doc","maxLoginAttemptsEnabled","maxLoginAttempts","fieldsToSign","beforeLogin","token","sign","expiresIn","tokenExpiration","afterLogin","draft","undefined","global","result","exp","decode","error"],"mappings":"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"}