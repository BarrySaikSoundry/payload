{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { ExecutionResult, GraphQLSchema, ValidationRule } from 'graphql'\nimport type { OperationArgs, Request as graphQLRequest } from 'graphql-http'\nimport type pino from 'pino'\n\nimport { spawn } from 'child_process'\nimport crypto from 'crypto'\nimport { fileURLToPath } from 'node:url'\nimport path from 'path'\n\nimport type { AuthArgs } from './auth/operations/auth.js'\nimport type { Result as ForgotPasswordResult } from './auth/operations/forgotPassword.js'\nimport type { Options as ForgotPasswordOptions } from './auth/operations/local/forgotPassword.js'\nimport type { Options as LoginOptions } from './auth/operations/local/login.js'\nimport type { Options as ResetPasswordOptions } from './auth/operations/local/resetPassword.js'\nimport type { Options as UnlockOptions } from './auth/operations/local/unlock.js'\nimport type { Options as VerifyEmailOptions } from './auth/operations/local/verifyEmail.js'\nimport type { Result as LoginResult } from './auth/operations/login.js'\nimport type { Result as ResetPasswordResult } from './auth/operations/resetPassword.js'\nimport type { AuthStrategy, User } from './auth/types.js'\nimport type {\n  BulkOperationResult,\n  Collection,\n  DataFromCollectionSlug,\n  TypeWithID,\n} from './collections/config/types.js'\nimport type { Options as CountOptions } from './collections/operations/local/count.js'\nimport type { Options as CreateOptions } from './collections/operations/local/create.js'\nimport type {\n  ByIDOptions as DeleteByIDOptions,\n  ManyOptions as DeleteManyOptions,\n  Options as DeleteOptions,\n} from './collections/operations/local/delete.js'\nimport type { Options as DuplicateOptions } from './collections/operations/local/duplicate.js'\nimport type { Options as FindOptions } from './collections/operations/local/find.js'\nimport type { Options as FindByIDOptions } from './collections/operations/local/findByID.js'\nimport type { Options as FindVersionByIDOptions } from './collections/operations/local/findVersionByID.js'\nimport type { Options as FindVersionsOptions } from './collections/operations/local/findVersions.js'\nimport type { Options as RestoreVersionOptions } from './collections/operations/local/restoreVersion.js'\nimport type {\n  ByIDOptions as UpdateByIDOptions,\n  ManyOptions as UpdateManyOptions,\n  Options as UpdateOptions,\n} from './collections/operations/local/update.js'\nimport type { InitOptions, SanitizedConfig } from './config/types.js'\nimport type { BaseDatabaseAdapter, PaginatedDocs } from './database/types.js'\nimport type { InitializedEmailAdapter } from './email/types.js'\nimport type { DataFromGlobalSlug, Globals } from './globals/config/types.js'\nimport type { Options as FindGlobalOptions } from './globals/operations/local/findOne.js'\nimport type { Options as FindGlobalVersionByIDOptions } from './globals/operations/local/findVersionByID.js'\nimport type { Options as FindGlobalVersionsOptions } from './globals/operations/local/findVersions.js'\nimport type { Options as RestoreGlobalVersionOptions } from './globals/operations/local/restoreVersion.js'\nimport type { Options as UpdateGlobalOptions } from './globals/operations/local/update.js'\nimport type { TypeWithVersion } from './versions/types.js'\n\nimport { decrypt, encrypt } from './auth/crypto.js'\nimport { APIKeyAuthentication } from './auth/strategies/apiKey.js'\nimport { JWTAuthentication } from './auth/strategies/jwt.js'\nimport localOperations from './collections/operations/local/index.js'\nimport { validateSchema } from './config/validate.js'\nimport { consoleEmailAdapter } from './email/consoleEmailAdapter.js'\nimport { fieldAffectsData } from './fields/config/types.js'\nimport localGlobalOperations from './globals/operations/local/index.js'\nimport { getDependencies } from './utilities/dependencies/getDependencies.js'\nimport flattenFields from './utilities/flattenTopLevelFields.js'\nimport Logger from './utilities/logger.js'\nimport { serverInit as serverInitTelemetry } from './utilities/telemetry/events/serverInit.js'\n\nexport interface GeneratedTypes {\n  authUntyped: {\n    [slug: string]: {\n      forgotPassword: {\n        email: string\n      }\n      login: {\n        email: string\n        password: string\n        username?: string\n      }\n      registerFirstUser: {\n        email: string\n        password: string\n      }\n    }\n  }\n  collectionsUntyped: {\n    [slug: string]: Record<string, unknown> & TypeWithID\n  }\n  globalsUntyped: {\n    [slug: string]: Record<string, unknown>\n  }\n  localeUntyped: null | string\n  userUntyped: User\n}\n\n// Helper type to resolve the correct type using conditional types\ntype ResolveCollectionType<T> = 'collections' extends keyof T\n  ? T['collections']\n  : // @ts-expect-error\n    T['collectionsUntyped']\n// @ts-expect-error\ntype ResolveGlobalType<T> = 'globals' extends keyof T ? T['globals'] : T['globalsUntyped']\n\n// Applying helper types to GeneratedTypes\nexport type TypedCollection = ResolveCollectionType<GeneratedTypes>\nexport type TypedGlobal = ResolveGlobalType<GeneratedTypes>\n\n// Extract string keys from the type\ntype StringKeyOf<T> = Extract<keyof T, string>\n\n// Define the types for slugs using the appropriate collections and globals\nexport type CollectionSlug = StringKeyOf<TypedCollection>\nexport type GlobalSlug = StringKeyOf<TypedGlobal>\n\n// now for locale and user\n\n// @ts-expect-error\ntype ResolveLocaleType<T> = 'locale' extends keyof T ? T['locale'] : T['localeUntyped']\n// @ts-expect-error\ntype ResolveUserType<T> = 'user' extends keyof T ? T['user'] : T['userUntyped']\n\nexport type TypedLocale = ResolveLocaleType<GeneratedTypes>\nexport type TypedUser = ResolveUserType<GeneratedTypes>\n\n// @ts-expect-error\ntype ResolveAuthOperationsType<T> = 'auth' extends keyof T ? T['auth'] : T['authUntyped']\nexport type TypedAuthOperations = ResolveAuthOperationsType<GeneratedTypes>\n\nconst filename = fileURLToPath(import.meta.url)\nconst dirname = path.dirname(filename)\n\n/**\n * @description Payload\n */\nexport class BasePayload {\n  /**\n   * @description Authorization and Authentication using headers and cookies to run auth user strategies\n   * @returns permissions: Permissions\n   * @returns user: User\n   */\n  auth = async (options: AuthArgs) => {\n    const { auth } = localOperations.auth\n    return auth(this, options)\n  }\n\n  authStrategies: AuthStrategy[]\n\n  collections: {\n    [slug: number | string | symbol]: Collection\n  } = {}\n\n  config: SanitizedConfig\n\n  /**\n   * @description Performs count operation\n   * @param options\n   * @returns count of documents satisfying query\n   */\n  count = async <T extends CollectionSlug>(\n    options: CountOptions<T>,\n  ): Promise<{ totalDocs: number }> => {\n    const { count } = localOperations\n    return count(this, options)\n  }\n\n  /**\n   * @description Performs create operation\n   * @param options\n   * @returns created document\n   */\n  create = async <TSlug extends CollectionSlug>(\n    options: CreateOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>> => {\n    const { create } = localOperations\n    return create<TSlug>(this, options)\n  }\n  db: DatabaseAdapter\n\n  decrypt = decrypt\n\n  duplicate = async <TSlug extends CollectionSlug>(\n    options: DuplicateOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>> => {\n    const { duplicate } = localOperations\n    return duplicate<TSlug>(this, options)\n  }\n\n  email: InitializedEmailAdapter\n\n  // TODO: re-implement or remove?\n  // errorHandler: ErrorHandler\n\n  encrypt = encrypt\n\n  extensions: (args: {\n    args: OperationArgs<any>\n    req: graphQLRequest<unknown, unknown>\n    result: ExecutionResult\n  }) => Promise<any>\n\n  /**\n   * @description Find documents with criteria\n   * @param options\n   * @returns documents satisfying query\n   */\n  find = async <TSlug extends CollectionSlug>(\n    options: FindOptions<TSlug>,\n  ): Promise<PaginatedDocs<DataFromCollectionSlug<TSlug>>> => {\n    const { find } = localOperations\n    return find<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find document by ID\n   * @param options\n   * @returns document with specified ID\n   */\n  findByID = async <TSlug extends CollectionSlug>(\n    options: FindByIDOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>> => {\n    const { findByID } = localOperations\n    return findByID<TSlug>(this, options)\n  }\n\n  findGlobal = async <TSlug extends GlobalSlug>(\n    options: FindGlobalOptions<TSlug>,\n  ): Promise<DataFromGlobalSlug<TSlug>> => {\n    const { findOne } = localGlobalOperations\n    return findOne<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find global version by ID\n   * @param options\n   * @returns global version with specified ID\n   */\n  findGlobalVersionByID = async <TSlug extends GlobalSlug>(\n    options: FindGlobalVersionByIDOptions<TSlug>,\n  ): Promise<TypeWithVersion<DataFromGlobalSlug<TSlug>>> => {\n    const { findVersionByID } = localGlobalOperations\n    return findVersionByID<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find global versions with criteria\n   * @param options\n   * @returns versions satisfying query\n   */\n  findGlobalVersions = async <TSlug extends GlobalSlug>(\n    options: FindGlobalVersionsOptions<TSlug>,\n  ): Promise<PaginatedDocs<TypeWithVersion<DataFromGlobalSlug<TSlug>>>> => {\n    const { findVersions } = localGlobalOperations\n    return findVersions<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  findVersionByID = async <TSlug extends CollectionSlug>(\n    options: FindVersionByIDOptions<TSlug>,\n  ): Promise<TypeWithVersion<DataFromCollectionSlug<TSlug>>> => {\n    const { findVersionByID } = localOperations\n    return findVersionByID<TSlug>(this, options)\n  }\n\n  /**\n   * @description Find versions with criteria\n   * @param options\n   * @returns versions satisfying query\n   */\n  findVersions = async <TSlug extends CollectionSlug>(\n    options: FindVersionsOptions<TSlug>,\n  ): Promise<PaginatedDocs<TypeWithVersion<DataFromCollectionSlug<TSlug>>>> => {\n    const { findVersions } = localOperations\n    return findVersions<TSlug>(this, options)\n  }\n\n  forgotPassword = async <TSlug extends CollectionSlug>(\n    options: ForgotPasswordOptions<TSlug>,\n  ): Promise<ForgotPasswordResult> => {\n    const { forgotPassword } = localOperations.auth\n    return forgotPassword<TSlug>(this, options)\n  }\n\n  getAPIURL = (): string => `${this.config.serverURL}${this.config.routes.api}`\n\n  getAdminURL = (): string => `${this.config.serverURL}${this.config.routes.admin}`\n\n  globals: Globals\n\n  logger: pino.Logger\n\n  login = async <TSlug extends CollectionSlug>(\n    options: LoginOptions<TSlug>,\n  ): Promise<{ user: DataFromCollectionSlug<TSlug> } & LoginResult> => {\n    const { login } = localOperations.auth\n    return login<TSlug>(this, options)\n  }\n\n  resetPassword = async <TSlug extends CollectionSlug>(\n    options: ResetPasswordOptions<TSlug>,\n  ): Promise<ResetPasswordResult> => {\n    const { resetPassword } = localOperations.auth\n    return resetPassword<TSlug>(this, options)\n  }\n\n  /**\n   * @description Restore global version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  restoreGlobalVersion = async <TSlug extends GlobalSlug>(\n    options: RestoreGlobalVersionOptions<TSlug>,\n  ): Promise<DataFromGlobalSlug<TSlug>> => {\n    const { restoreVersion } = localGlobalOperations\n    return restoreVersion<TSlug>(this, options)\n  }\n\n  /**\n   * @description Restore version by ID\n   * @param options\n   * @returns version with specified ID\n   */\n  restoreVersion = async <TSlug extends CollectionSlug>(\n    options: RestoreVersionOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>> => {\n    const { restoreVersion } = localOperations\n    return restoreVersion<TSlug>(this, options)\n  }\n\n  schema: GraphQLSchema\n\n  secret: string\n\n  sendEmail: InitializedEmailAdapter['sendEmail']\n\n  types: {\n    arrayTypes: any\n    blockInputTypes: any\n    blockTypes: any\n    fallbackLocaleInputType?: any\n    groupTypes: any\n    localeInputType?: any\n    tabTypes: any\n  }\n\n  unlock = async <TSlug extends CollectionSlug>(\n    options: UnlockOptions<TSlug>,\n  ): Promise<boolean> => {\n    const { unlock } = localOperations.auth\n    return unlock(this, options)\n  }\n\n  updateGlobal = async <TSlug extends GlobalSlug>(\n    options: UpdateGlobalOptions<TSlug>,\n  ): Promise<DataFromGlobalSlug<TSlug>> => {\n    const { update } = localGlobalOperations\n    return update<TSlug>(this, options)\n  }\n\n  validationRules: (args: OperationArgs<any>) => ValidationRule[]\n\n  verifyEmail = async <TSlug extends CollectionSlug>(\n    options: VerifyEmailOptions<TSlug>,\n  ): Promise<boolean> => {\n    const { verifyEmail } = localOperations.auth\n    return verifyEmail(this, options)\n  }\n\n  versions: {\n    [slug: string]: any // TODO: Type this\n  } = {}\n\n  async bin({\n    args,\n    cwd,\n    log,\n  }: {\n    args: string[]\n    cwd?: string\n    log?: boolean\n  }): Promise<{ code: number }> {\n    return new Promise((resolve, reject) => {\n      const spawned = spawn('node', [path.resolve(dirname, '../bin.js'), ...args], {\n        cwd,\n        stdio: log || log === undefined ? 'inherit' : 'ignore',\n      })\n\n      spawned.on('exit', (code) => {\n        resolve({ code })\n      })\n\n      spawned.on('error', (error) => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * @description delete one or more documents\n   * @param options\n   * @returns Updated document(s)\n   */\n  delete<TSlug extends CollectionSlug>(\n    options: DeleteByIDOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>>\n\n  delete<TSlug extends CollectionSlug>(\n    options: DeleteManyOptions<TSlug>,\n  ): Promise<BulkOperationResult<TSlug>>\n\n  delete<TSlug extends CollectionSlug>(\n    options: DeleteOptions<TSlug>,\n  ): Promise<BulkOperationResult<TSlug> | DataFromCollectionSlug<TSlug>> {\n    const { deleteLocal } = localOperations\n    return deleteLocal<TSlug>(this, options)\n  }\n\n  /**\n   * @description Initializes Payload\n   * @param options\n   */\n  async init(options: InitOptions): Promise<Payload> {\n    if (process.env.NODE_ENV !== 'production') {\n      // First load. First check if there are mismatching dependency versions of payload packages\n      const resolvedDependencies = await getDependencies(dirname, [\n        '@payloadcms/ui/shared',\n        'payload',\n        '@payloadcms/next/utilities',\n        '@payloadcms/richtext-lexical',\n        '@payloadcms/richtext-slate',\n        '@payloadcms/graphql',\n        '@payloadcms/plugin-cloud',\n        '@payloadcms/db-mongodb',\n        '@payloadcms/db-postgres',\n        '@payloadcms/plugin-form-builder',\n        '@payloadcms/plugin-nested-docs',\n        '@payloadcms/plugin-seo',\n        '@payloadcms/plugin-search',\n        '@payloadcms/plugin-cloud-storage',\n        '@payloadcms/plugin-stripe',\n        '@payloadcms/plugin-zapier',\n        '@payloadcms/plugin-redirects',\n        '@payloadcms/plugin-sentry',\n        '@payloadcms/bundler-webpack',\n        '@payloadcms/bundler-vite',\n        '@payloadcms/live-preview',\n        '@payloadcms/live-preview-react',\n        '@payloadcms/translations',\n        '@payloadcms/email-nodemailer',\n        '@payloadcms/email-resend',\n        '@payloadcms/storage-azure',\n        '@payloadcms/storage-s3',\n        '@payloadcms/storage-gcs',\n        '@payloadcms/storage-vercel-blob',\n        '@payloadcms/storage-uploadthing',\n      ])\n\n      // Go through each resolved dependency. If any dependency has a mismatching version, throw an error\n      const foundVersions: {\n        [version: string]: string\n      } = {}\n      for (const [_pkg, { version }] of resolvedDependencies.resolved) {\n        if (!Object.keys(foundVersions).includes(version)) {\n          foundVersions[version] = _pkg\n        }\n      }\n      if (Object.keys(foundVersions).length > 1) {\n        const formattedVersionsWithPackageNameString = Object.entries(foundVersions)\n          .map(([version, pkg]) => `${pkg}@${version}`)\n          .join(', ')\n\n        throw new Error(\n          `Mismatching payload dependency versions found: ${formattedVersionsWithPackageNameString}. All payload and @payloadcms/* packages must have the same version. This is an error with your set-up, caused by you, not a bug in payload. Please go to your package.json and ensure all payload and @payloadcms/* packages have the same version.`,\n        )\n      }\n    }\n\n    if (!options?.config) {\n      throw new Error('Error: the payload config is required to initialize payload.')\n    }\n\n    this.logger = Logger('payload', options.loggerOptions, options.loggerDestination)\n\n    this.config = await options.config\n\n    if (process.env.NODE_ENV !== 'production') {\n      validateSchema(this.config, this.logger)\n    }\n\n    if (!this.config.secret) {\n      throw new Error('Error: missing secret key. A secret key is needed to secure Payload.')\n    }\n\n    this.secret = crypto.createHash('sha256').update(this.config.secret).digest('hex').slice(0, 32)\n\n    this.globals = {\n      config: this.config.globals,\n    }\n\n    this.config.collections.forEach((collection) => {\n      const customID = flattenFields(collection.fields).find(\n        (field) => fieldAffectsData(field) && field.name === 'id',\n      )\n\n      let customIDType\n\n      if (customID?.type === 'number' || customID?.type === 'text') customIDType = customID.type\n\n      this.collections[collection.slug] = {\n        config: collection,\n        customIDType,\n      }\n    })\n\n    // Generate types on startup\n    if (process.env.NODE_ENV !== 'production' && this.config.typescript.autoGenerate !== false) {\n      // We cannot run it directly here, as generate-types imports json-schema-to-typescript, which breaks on turbopack.\n      // see: https://github.com/vercel/next.js/issues/66723\n      void this.bin({\n        args: ['generate:types'],\n        log: false,\n      })\n    }\n\n    this.db = this.config.db.init({ payload: this })\n    this.db.payload = this\n\n    if (this.db?.init) {\n      await this.db.init()\n    }\n\n    if (!options.disableDBConnect && this.db.connect) {\n      await this.db.connect()\n    }\n\n    // Load email adapter\n    if (this.config.email instanceof Promise) {\n      const awaitedAdapter = await this.config.email\n      this.email = awaitedAdapter({ payload: this })\n    } else if (this.config.email) {\n      this.email = this.config.email({ payload: this })\n    } else {\n      if (process.env.NEXT_PHASE !== 'phase-production-build') {\n        this.logger.warn(\n          `No email adapter provided. Email will be written to console. More info at https://payloadcms.com/docs/email/overview.`,\n        )\n      }\n\n      this.email = consoleEmailAdapter({ payload: this })\n    }\n\n    // Warn if image resizing is enabled but sharp is not installed\n    if (\n      !this.config.sharp &&\n      this.config.collections.some((c) => c.upload.imageSizes || c.upload.formatOptions)\n    ) {\n      this.logger.warn(\n        `Image resizing is enabled for one or more collections, but sharp not installed. Please install 'sharp' and pass into the config.`,\n      )\n    }\n\n    this.sendEmail = this.email['sendEmail']\n\n    serverInitTelemetry(this)\n\n    // 1. loop over collections, if collection has auth strategy, initialize and push to array\n    let jwtStrategyEnabled = false\n    this.authStrategies = this.config.collections.reduce((authStrategies, collection) => {\n      if (collection?.auth) {\n        if (collection.auth.strategies.length > 0) {\n          authStrategies.push(...collection.auth.strategies)\n        }\n\n        // 2. if api key enabled, push api key strategy into the array\n        if (collection.auth?.useAPIKey) {\n          authStrategies.push({\n            name: `${collection.slug}-api-key`,\n            authenticate: APIKeyAuthentication(collection),\n          })\n        }\n\n        // 3. if localStrategy flag is true\n        if (!collection.auth.disableLocalStrategy && !jwtStrategyEnabled) {\n          jwtStrategyEnabled = true\n        }\n      }\n\n      return authStrategies\n    }, [] as AuthStrategy[])\n\n    // 4. if enabled, push jwt strategy into authStrategies last\n    if (jwtStrategyEnabled) {\n      this.authStrategies.push({\n        name: 'local-jwt',\n        authenticate: JWTAuthentication,\n      })\n    }\n\n    if (!options.disableOnInit) {\n      if (typeof options.onInit === 'function') await options.onInit(this)\n      if (typeof this.config.onInit === 'function') await this.config.onInit(this)\n    }\n\n    return this\n  }\n\n  update<TSlug extends CollectionSlug>(\n    options: UpdateManyOptions<TSlug>,\n  ): Promise<BulkOperationResult<TSlug>>\n\n  /**\n   * @description Update one or more documents\n   * @param options\n   * @returns Updated document(s)\n   */\n  update<TSlug extends CollectionSlug>(\n    options: UpdateByIDOptions<TSlug>,\n  ): Promise<DataFromCollectionSlug<TSlug>>\n\n  update<TSlug extends CollectionSlug>(\n    options: UpdateOptions<TSlug>,\n  ): Promise<BulkOperationResult<TSlug> | DataFromCollectionSlug<TSlug>> {\n    const { update } = localOperations\n    return update<TSlug>(this, options)\n  }\n}\n\nconst initialized = new BasePayload()\n\nexport default initialized\n\nlet cached = global._payload\n\nif (!cached) {\n  cached = global._payload = { payload: null, promise: null }\n}\n\nexport const getPayload = async (options: InitOptions): Promise<BasePayload> => {\n  if (!options?.config) {\n    throw new Error('Error: the payload config is required for getPayload to work.')\n  }\n\n  if (cached.payload) {\n    return cached.payload\n  }\n\n  if (!cached.promise) {\n    cached.promise = new BasePayload().init(options)\n  }\n\n  try {\n    cached.payload = await cached.promise\n  } catch (e) {\n    cached.promise = null\n    throw e\n  }\n\n  return cached.payload\n}\n\ntype Payload = BasePayload\n\ninterface RequestContext {\n  [key: string]: unknown\n}\n\nexport interface DatabaseAdapter extends BaseDatabaseAdapter {}\nexport type { Payload, RequestContext }\nexport type { FieldTypes } from './admin/forms/FieldTypes.js'\nexport type * from './admin/types.js'\nexport { default as executeAccess } from './auth/executeAccess.js'\nexport { executeAuthStrategies } from './auth/executeAuthStrategies.js'\nexport { getAccessResults } from './auth/getAccessResults.js'\nexport { getFieldsToSign } from './auth/getFieldsToSign.js'\nexport * from './auth/index.js'\nexport { accessOperation } from './auth/operations/access.js'\nexport { forgotPasswordOperation } from './auth/operations/forgotPassword.js'\nexport { initOperation } from './auth/operations/init.js'\nexport { loginOperation } from './auth/operations/login.js'\nexport { logoutOperation } from './auth/operations/logout.js'\nexport type { MeOperationResult } from './auth/operations/me.js'\nexport { meOperation } from './auth/operations/me.js'\nexport { refreshOperation } from './auth/operations/refresh.js'\nexport { registerFirstUserOperation } from './auth/operations/registerFirstUser.js'\nexport { resetPasswordOperation } from './auth/operations/resetPassword.js'\nexport { unlockOperation } from './auth/operations/unlock.js'\nexport { verifyEmailOperation } from './auth/operations/verifyEmail.js'\nexport type {\n  AuthStrategyFunction,\n  AuthStrategyFunctionArgs,\n  CollectionPermission,\n  DocumentPermissions,\n  FieldPermissions,\n  GlobalPermission,\n  IncomingAuthType,\n  Permission,\n  Permissions,\n  User,\n  VerifyConfig,\n} from './auth/types.js'\nexport type { ClientCollectionConfig } from './collections/config/client.js'\nexport { createClientCollectionConfig } from './collections/config/client.js'\nexport type {\n  AfterChangeHook as CollectionAfterChangeHook,\n  AfterDeleteHook as CollectionAfterDeleteHook,\n  AfterErrorHook as CollectionAfterErrorHook,\n  AfterForgotPasswordHook as CollectionAfterForgotPasswordHook,\n  AfterLoginHook as CollectionAfterLoginHook,\n  AfterLogoutHook,\n  AfterMeHook,\n  AfterOperationHook as CollectionAfterOperationHook,\n  AfterReadHook as CollectionAfterReadHook,\n  AfterRefreshHook,\n  AuthCollection,\n  AuthOperationsFromCollectionSlug,\n  BeforeChangeHook as CollectionBeforeChangeHook,\n  BeforeDeleteHook as CollectionBeforeDeleteHook,\n  BeforeLoginHook as CollectionBeforeLoginHook,\n  BeforeOperationHook as CollectionBeforeOperationHook,\n  BeforeReadHook as CollectionBeforeReadHook,\n  BeforeValidateHook as CollectionBeforeValidateHook,\n  BulkOperationResult,\n  Collection,\n  CollectionAdminOptions,\n  CollectionConfig,\n  DataFromCollectionSlug,\n  HookOperationType,\n  MeHook as CollectionMeHook,\n  RefreshHook as CollectionRefreshHook,\n  RequiredDataFromCollection,\n  RequiredDataFromCollectionSlug,\n  SanitizedCollectionConfig,\n  TypeWithID,\n  TypeWithTimestamps,\n} from './collections/config/types.js'\nexport { createDataloaderCacheKey, getDataLoader } from './collections/dataloader.js'\nexport { countOperation } from './collections/operations/count.js'\nexport { createOperation } from './collections/operations/create.js'\nexport { deleteOperation } from './collections/operations/delete.js'\nexport { deleteByIDOperation } from './collections/operations/deleteByID.js'\nexport { docAccessOperation } from './collections/operations/docAccess.js'\nexport { duplicateOperation } from './collections/operations/duplicate.js'\nexport { findOperation } from './collections/operations/find.js'\nexport { findByIDOperation } from './collections/operations/findByID.js'\nexport { findVersionByIDOperation } from './collections/operations/findVersionByID.js'\nexport { findVersionsOperation } from './collections/operations/findVersions.js'\nexport { restoreVersionOperation } from './collections/operations/restoreVersion.js'\nexport { updateOperation } from './collections/operations/update.js'\nexport { updateByIDOperation } from './collections/operations/updateByID.js'\nexport { buildConfig } from './config/build.js'\nexport type { ClientConfig } from './config/client.js'\nexport { createClientConfig } from './config/client.js'\nexport { defaults } from './config/defaults.js'\nexport { sanitizeConfig } from './config/sanitize.js'\nexport type {\n  Access,\n  AccessArgs,\n  EditViewComponent,\n  EntityDescription,\n  EntityDescriptionComponent,\n  EntityDescriptionFunction,\n  SanitizedConfig,\n} from './config/types.js'\nexport * from './config/types.js'\nexport { combineQueries } from './database/combineQueries.js'\nexport { createDatabaseAdapter } from './database/createDatabaseAdapter.js'\nexport { default as flattenWhereToOperators } from './database/flattenWhereToOperators.js'\nexport { getLocalizedPaths } from './database/getLocalizedPaths.js'\nexport { createMigration } from './database/migrations/createMigration.js'\nexport { getMigrations } from './database/migrations/getMigrations.js'\nexport { getPredefinedMigration } from './database/migrations/getPredefinedMigration.js'\nexport { migrate } from './database/migrations/migrate.js'\nexport { migrateDown } from './database/migrations/migrateDown.js'\nexport { migrateRefresh } from './database/migrations/migrateRefresh.js'\nexport { migrateReset } from './database/migrations/migrateReset.js'\nexport { migrateStatus } from './database/migrations/migrateStatus.js'\nexport { migrationTemplate } from './database/migrations/migrationTemplate.js'\nexport { migrationsCollection } from './database/migrations/migrationsCollection.js'\nexport { readMigrationFiles } from './database/migrations/readMigrationFiles.js'\nexport type * from './database/queryValidation/types.js'\nexport type { EntityPolicies, PathToQuery } from './database/queryValidation/types.js'\nexport { validateQueryPaths } from './database/queryValidation/validateQueryPaths.js'\nexport { validateSearchParam } from './database/queryValidation/validateSearchParams.js'\nexport type {\n  BaseDatabaseAdapter,\n  BeginTransaction,\n  CommitTransaction,\n  Connect,\n  Count,\n  CountArgs,\n  Create,\n  CreateArgs,\n  CreateGlobal,\n  CreateGlobalArgs,\n  CreateGlobalVersion,\n  CreateGlobalVersionArgs,\n  CreateMigration,\n  CreateVersion,\n  CreateVersionArgs,\n  DBIdentifierName,\n  DatabaseAdapterResult as DatabaseAdapterObj,\n  DeleteMany,\n  DeleteManyArgs,\n  DeleteOne,\n  DeleteOneArgs,\n  DeleteVersions,\n  DeleteVersionsArgs,\n  Destroy,\n  Find,\n  FindArgs,\n  FindGlobal,\n  FindGlobalArgs,\n  FindGlobalVersions,\n  FindGlobalVersionsArgs,\n  FindOne,\n  FindOneArgs,\n  FindVersions,\n  FindVersionsArgs,\n  Init,\n  Migration,\n  MigrationData,\n  MigrationTemplateArgs,\n  PaginatedDocs,\n  QueryDrafts,\n  QueryDraftsArgs,\n  RollbackTransaction,\n  Transaction,\n  UpdateGlobal,\n  UpdateGlobalArgs,\n  UpdateGlobalVersion,\n  UpdateGlobalVersionArgs,\n  UpdateOne,\n  UpdateOneArgs,\n  UpdateVersion,\n  UpdateVersionArgs,\n} from './database/types.js'\nexport type { EmailAdapter as PayloadEmailAdapter, SendEmailOptions } from './email/types.js'\nexport {\n  APIError,\n  AuthenticationError,\n  DuplicateCollection,\n  DuplicateFieldName,\n  DuplicateGlobal,\n  ErrorDeletingFile,\n  FileRetrievalError,\n  FileUploadError,\n  Forbidden,\n  InvalidConfiguration,\n  InvalidFieldName,\n  InvalidFieldRelationship,\n  LockedAuth,\n  MissingCollectionLabel,\n  MissingEditorProp,\n  MissingFieldInputOptions,\n  MissingFieldType,\n  MissingFile,\n  NotFound,\n  QueryError,\n  ValidationError,\n} from './errors/index.js'\nexport { baseBlockFields } from './fields/baseFields/baseBlockFields.js'\nexport { baseIDField } from './fields/baseFields/baseIDField.js'\nexport type { ClientFieldConfig } from './fields/config/client.js'\nexport { createClientFieldConfig } from './fields/config/client.js'\nexport { sanitizeFields } from './fields/config/sanitize.js'\nexport type {\n  ArrayField,\n  Block,\n  BlockField,\n  CheckboxField,\n  ClientValidate,\n  CodeField,\n  CollapsibleField,\n  Condition,\n  DateField,\n  EmailField,\n  Field,\n  FieldAccess,\n  FieldAffectingData,\n  FieldBase,\n  FieldHook,\n  FieldHookArgs,\n  FieldPresentationalOnly,\n  FieldWithMany,\n  FieldWithMaxDepth,\n  FieldWithPath,\n  FieldWithSubFields,\n  FilterOptions,\n  FilterOptionsProps,\n  GroupField,\n  HookName,\n  JSONField,\n  Labels,\n  NamedTab,\n  NonPresentationalField,\n  NumberField,\n  Option,\n  OptionObject,\n  PointField,\n  PolymorphicRelationshipField,\n  RadioField,\n  RelationshipField,\n  RelationshipValue,\n  RichTextField,\n  RowAdmin,\n  RowField,\n  SelectField,\n  SingleRelationshipField,\n  Tab,\n  TabAsField,\n  TabsAdmin,\n  TabsField,\n  TextField,\n  TextareaField,\n  UIField,\n  UnnamedTab,\n  UploadField,\n  Validate,\n  ValidateOptions,\n  ValueWithRelation,\n} from './fields/config/types.js'\nexport { default as getDefaultValue } from './fields/getDefaultValue.js'\nexport { traverseFields as afterChangeTraverseFields } from './fields/hooks/afterChange/traverseFields.js'\nexport { promise as afterReadPromise } from './fields/hooks/afterRead/promise.js'\nexport { traverseFields as afterReadTraverseFields } from './fields/hooks/afterRead/traverseFields.js'\nexport { traverseFields as beforeChangeTraverseFields } from './fields/hooks/beforeChange/traverseFields.js'\nexport { traverseFields as beforeValidateTraverseFields } from './fields/hooks/beforeValidate/traverseFields.js'\nexport { default as sortableFieldTypes } from './fields/sortableFieldTypes.js'\nexport type { ClientGlobalConfig } from './globals/config/client.js'\nexport { createClientGlobalConfig } from './globals/config/client.js'\nexport type {\n  AfterChangeHook as GlobalAfterChangeHook,\n  AfterReadHook as GlobalAfterReadHook,\n  BeforeChangeHook as GlobalBeforeChangeHook,\n  BeforeReadHook as GlobalBeforeReadHook,\n  BeforeValidateHook as GlobalBeforeValidateHook,\n  DataFromGlobalSlug,\n  GlobalAdminOptions,\n  GlobalConfig,\n  SanitizedGlobalConfig,\n} from './globals/config/types.js'\nexport { docAccessOperation as docAccessOperationGlobal } from './globals/operations/docAccess.js'\nexport { findOneOperation } from './globals/operations/findOne.js'\nexport { findVersionByIDOperation as findVersionByIDOperationGlobal } from './globals/operations/findVersionByID.js'\nexport { findVersionsOperation as findVersionsOperationGlobal } from './globals/operations/findVersions.js'\nexport { restoreVersionOperation as restoreVersionOperationGlobal } from './globals/operations/restoreVersion.js'\nexport { updateOperation as updateOperationGlobal } from './globals/operations/update.js'\nexport type {\n  CollapsedPreferences,\n  DocumentPreferences,\n  FieldsPreferences,\n  InsideFieldsPreferences,\n  PreferenceRequest,\n  PreferenceUpdateRequest,\n  TabsPreferences,\n} from './preferences/types.js'\nexport { getLocalI18n } from './translations/getLocalI18n.js'\nexport * from './types/index.js'\nexport { getFileByPath } from './uploads/getFileByPath.js'\nexport type * from './uploads/types.js'\nexport { combineMerge } from './utilities/combineMerge.js'\nexport { commitTransaction } from './utilities/commitTransaction.js'\nexport {\n  configToJSONSchema,\n  entityToJSONSchema,\n  fieldsToJSONSchema,\n  withNullableJSONSchemaType,\n} from './utilities/configToJSONSchema.js'\nexport { createArrayFromCommaDelineated } from './utilities/createArrayFromCommaDelineated.js'\nexport { createLocalReq } from './utilities/createLocalReq.js'\nexport { deepCopyObject } from './utilities/deepCopyObject.js'\nexport { deepMerge } from './utilities/deepMerge.js'\nexport { default as flattenTopLevelFields } from './utilities/flattenTopLevelFields.js'\nexport { formatLabels, formatNames, toWords } from './utilities/formatLabels.js'\nexport { getCollectionIDFieldTypes } from './utilities/getCollectionIDFieldTypes.js'\nexport { getObjectDotNotation } from './utilities/getObjectDotNotation.js'\nexport { initTransaction } from './utilities/initTransaction.js'\nexport { isEntityHidden } from './utilities/isEntityHidden.js'\nexport { isPlainObject } from './utilities/isPlainObject.js'\nexport { isValidID } from './utilities/isValidID.js'\nexport { default as isolateObjectProperty } from './utilities/isolateObjectProperty.js'\nexport { killTransaction } from './utilities/killTransaction.js'\nexport { mapAsync } from './utilities/mapAsync.js'\nexport { mergeListSearchAndWhere } from './utilities/mergeListSearchAndWhere.js'\nexport { buildVersionCollectionFields } from './versions/buildCollectionFields.js'\nexport { buildVersionGlobalFields } from './versions/buildGlobalFields.js'\nexport { versionDefaults } from './versions/defaults.js'\nexport { deleteCollectionVersions } from './versions/deleteCollectionVersions.js'\nexport { enforceMaxVersions } from './versions/enforceMaxVersions.js'\nexport { getLatestCollectionVersion } from './versions/getLatestCollectionVersion.js'\nexport { getLatestGlobalVersion } from './versions/getLatestGlobalVersion.js'\nexport { getDependencies }\nexport { saveVersion } from './versions/saveVersion.js'\nexport type { TypeWithVersion } from './versions/types.js'\n"],"names":["spawn","crypto","fileURLToPath","path","decrypt","encrypt","APIKeyAuthentication","JWTAuthentication","localOperations","validateSchema","consoleEmailAdapter","fieldAffectsData","localGlobalOperations","getDependencies","flattenFields","Logger","serverInit","serverInitTelemetry","filename","url","dirname","BasePayload","auth","options","authStrategies","collections","config","count","create","db","duplicate","email","extensions","find","findByID","findGlobal","findOne","findGlobalVersionByID","findVersionByID","findGlobalVersions","findVersions","forgotPassword","getAPIURL","serverURL","routes","api","getAdminURL","admin","globals","logger","login","resetPassword","restoreGlobalVersion","restoreVersion","schema","secret","sendEmail","types","unlock","updateGlobal","update","validationRules","verifyEmail","versions","bin","args","cwd","log","Promise","resolve","reject","spawned","stdio","undefined","on","code","error","delete","deleteLocal","init","process","env","NODE_ENV","resolvedDependencies","foundVersions","_pkg","version","resolved","Object","keys","includes","length","formattedVersionsWithPackageNameString","entries","map","pkg","join","Error","loggerOptions","loggerDestination","createHash","digest","slice","forEach","collection","customID","fields","field","name","customIDType","type","slug","typescript","autoGenerate","payload","disableDBConnect","connect","awaitedAdapter","NEXT_PHASE","warn","sharp","some","c","upload","imageSizes","formatOptions","jwtStrategyEnabled","reduce","strategies","push","useAPIKey","authenticate","disableLocalStrategy","disableOnInit","onInit","initialized","cached","global","_payload","promise","getPayload","e","default","executeAccess","executeAuthStrategies","getAccessResults","getFieldsToSign","accessOperation","forgotPasswordOperation","initOperation","loginOperation","logoutOperation","meOperation","refreshOperation","registerFirstUserOperation","resetPasswordOperation","unlockOperation","verifyEmailOperation","createClientCollectionConfig","createDataloaderCacheKey","getDataLoader","countOperation","createOperation","deleteOperation","deleteByIDOperation","docAccessOperation","duplicateOperation","findOperation","findByIDOperation","findVersionByIDOperation","findVersionsOperation","restoreVersionOperation","updateOperation","updateByIDOperation","buildConfig","createClientConfig","defaults","sanitizeConfig","combineQueries","createDatabaseAdapter","flattenWhereToOperators","getLocalizedPaths","createMigration","getMigrations","getPredefinedMigration","migrate","migrateDown","migrateRefresh","migrateReset","migrateStatus","migrationTemplate","migrationsCollection","readMigrationFiles","validateQueryPaths","validateSearchParam","APIError","AuthenticationError","DuplicateCollection","DuplicateFieldName","DuplicateGlobal","ErrorDeletingFile","FileRetrievalError","FileUploadError","Forbidden","InvalidConfiguration","InvalidFieldName","InvalidFieldRelationship","LockedAuth","MissingCollectionLabel","MissingEditorProp","MissingFieldInputOptions","MissingFieldType","MissingFile","NotFound","QueryError","ValidationError","baseBlockFields","baseIDField","createClientFieldConfig","sanitizeFields","getDefaultValue","traverseFields","afterChangeTraverseFields","afterReadPromise","afterReadTraverseFields","beforeChangeTraverseFields","beforeValidateTraverseFields","sortableFieldTypes","createClientGlobalConfig","docAccessOperationGlobal","findOneOperation","findVersionByIDOperationGlobal","findVersionsOperationGlobal","restoreVersionOperationGlobal","updateOperationGlobal","getLocalI18n","getFileByPath","combineMerge","commitTransaction","configToJSONSchema","entityToJSONSchema","fieldsToJSONSchema","withNullableJSONSchemaType","createArrayFromCommaDelineated","createLocalReq","deepCopyObject","deepMerge","flattenTopLevelFields","formatLabels","formatNames","toWords","getCollectionIDFieldTypes","getObjectDotNotation","initTransaction","isEntityHidden","isPlainObject","isValidID","isolateObjectProperty","killTransaction","mapAsync","mergeListSearchAndWhere","buildVersionCollectionFields","buildVersionGlobalFields","versionDefaults","deleteCollectionVersions","enforceMaxVersions","getLatestCollectionVersion","getLatestGlobalVersion","saveVersion"],"mappings":"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"}