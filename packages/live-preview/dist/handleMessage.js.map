{"version":3,"sources":["../src/handleMessage.ts"],"sourcesContent":["import { isLivePreviewEvent } from './isLivePreviewEvent.js'\nimport { mergeData } from './mergeData.js'\n\n// For performance reasons, `fieldSchemaJSON` will only be sent once on the initial message\n// We need to cache this value so that it can be used across subsequent messages\n// To do this, save `fieldSchemaJSON` when it arrives as a global variable\n// Send this cached value to `mergeData`, instead of `eventData.fieldSchemaJSON` directly\nlet payloadLivePreviewFieldSchema = undefined // TODO: type this from `fieldSchemaToJSON` return type\n\n// Each time the data is merged, cache the result as a `previousData` variable\n// This will ensure changes compound overtop of each other\nlet payloadLivePreviewPreviousData = undefined\n\nexport const handleMessage = async <T>(args: {\n  apiRoute?: string\n  depth?: number\n  event: MessageEvent\n  initialData: T\n  serverURL: string\n}): Promise<T> => {\n  const { apiRoute, depth, event, initialData, serverURL } = args\n\n  if (isLivePreviewEvent(event, serverURL)) {\n    const { data, externallyUpdatedRelationship, fieldSchemaJSON } = event.data\n\n    if (!payloadLivePreviewFieldSchema && fieldSchemaJSON) {\n      payloadLivePreviewFieldSchema = fieldSchemaJSON\n    }\n\n    if (!payloadLivePreviewFieldSchema) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Payload Live Preview: No `fieldSchemaJSON` was received from the parent window. Unable to merge data.',\n      )\n\n      return initialData\n    }\n\n    const mergedData = await mergeData<T>({\n      apiRoute,\n      depth,\n      externallyUpdatedRelationship,\n      fieldSchema: payloadLivePreviewFieldSchema,\n      incomingData: data,\n      initialData: payloadLivePreviewPreviousData || initialData,\n      serverURL,\n    })\n\n    payloadLivePreviewPreviousData = mergedData\n\n    return mergedData\n  }\n\n  return initialData\n}\n"],"names":["isLivePreviewEvent","mergeData","payloadLivePreviewFieldSchema","undefined","payloadLivePreviewPreviousData","handleMessage","args","apiRoute","depth","event","initialData","serverURL","data","externallyUpdatedRelationship","fieldSchemaJSON","console","warn","mergedData","fieldSchema","incomingData"],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,SAAS,QAAQ,iBAAgB;AAE1C,2FAA2F;AAC3F,gFAAgF;AAChF,0EAA0E;AAC1E,yFAAyF;AACzF,IAAIC,gCAAgCC,UAAU,uDAAuD;;AAErG,8EAA8E;AAC9E,0DAA0D;AAC1D,IAAIC,iCAAiCD;AAErC,OAAO,MAAME,gBAAgB,OAAUC;IAOrC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,EAAEC,SAAS,EAAE,GAAGL;IAE3D,IAAIN,mBAAmBS,OAAOE,YAAY;QACxC,MAAM,EAAEC,IAAI,EAAEC,6BAA6B,EAAEC,eAAe,EAAE,GAAGL,MAAMG,IAAI;QAE3E,IAAI,CAACV,iCAAiCY,iBAAiB;YACrDZ,gCAAgCY;QAClC;QAEA,IAAI,CAACZ,+BAA+B;YAClC,sCAAsC;YACtCa,QAAQC,IAAI,CACV;YAGF,OAAON;QACT;QAEA,MAAMO,aAAa,MAAMhB,UAAa;YACpCM;YACAC;YACAK;YACAK,aAAahB;YACbiB,cAAcP;YACdF,aAAaN,kCAAkCM;YAC/CC;QACF;QAEAP,iCAAiCa;QAEjC,OAAOA;IACT;IAEA,OAAOP;AACT,EAAC"}