{"version":3,"sources":["../../../src/Search/hooks/syncWithSearch.ts"],"sourcesContent":["import type { DocToSync, SyncWithSearch } from '../../types.js'\n\nexport const syncWithSearch: SyncWithSearch = async (args) => {\n  const {\n    collection,\n    doc,\n    operation,\n    pluginConfig,\n    req: { payload },\n    req,\n  } = args\n\n  const { id, _status: status, title } = doc || {}\n\n  const { beforeSync, defaultPriorities, deleteDrafts, syncDrafts } = pluginConfig\n\n  let dataToSave: DocToSync = {\n    doc: {\n      relationTo: collection,\n      value: id,\n    },\n    title,\n  }\n\n  if (typeof beforeSync === 'function') {\n    dataToSave = await beforeSync({\n      originalDoc: doc,\n      payload,\n      req,\n      searchDoc: dataToSave,\n    })\n  }\n\n  let defaultPriority = 0\n  if (defaultPriorities) {\n    const { [collection]: priority } = defaultPriorities\n\n    if (typeof priority === 'function') {\n      try {\n        defaultPriority = await priority(doc)\n      } catch (err: unknown) {\n        payload.logger.error(err)\n        payload.logger.error(\n          `Error gathering default priority for search documents related to ${collection}`,\n        )\n      }\n    } else {\n      defaultPriority = priority\n    }\n  }\n\n  const doSync = syncDrafts || (!syncDrafts && status !== 'draft')\n\n  try {\n    if (operation === 'create') {\n      if (doSync) {\n        await payload.create({\n          collection: 'search',\n          data: {\n            ...dataToSave,\n            priority: defaultPriority,\n          },\n          req,\n        })\n      }\n    }\n\n    if (operation === 'update') {\n      try {\n        // find the correct doc to sync with\n        const searchDocQuery = await payload.find({\n          collection: 'search',\n          depth: 0,\n          req,\n          where: {\n            'doc.value': {\n              equals: id,\n            },\n          },\n        })\n\n        const docs: Array<{\n          id: number | string\n          priority?: number\n        }> = searchDocQuery?.docs || []\n\n        const [foundDoc, ...duplicativeDocs] = docs\n\n        // delete all duplicative search docs (docs that reference the same page)\n        // to ensure the same, out-of-date result does not appear twice (where only syncing the first found doc)\n        if (duplicativeDocs.length > 0) {\n          try {\n            const duplicativeDocIDs = duplicativeDocs.map(({ id }) => id)\n            await payload.delete({\n              collection: 'search',\n              req,\n              where: { id: { in: duplicativeDocIDs } },\n            })\n          } catch (err: unknown) {\n            payload.logger.error(`Error deleting duplicative search documents.`)\n          }\n        }\n\n        if (foundDoc) {\n          const { id: searchDocID } = foundDoc\n\n          if (doSync) {\n            // update the doc normally\n            try {\n              await payload.update({\n                id: searchDocID,\n                collection: 'search',\n                data: {\n                  ...dataToSave,\n                  priority: foundDoc.priority || defaultPriority,\n                },\n                req,\n              })\n            } catch (err: unknown) {\n              payload.logger.error(`Error updating search document.`)\n            }\n          }\n          if (deleteDrafts && status === 'draft') {\n            // do not include draft docs in search results, so delete the record\n            try {\n              await payload.delete({\n                id: searchDocID,\n                collection: 'search',\n                req,\n              })\n            } catch (err: unknown) {\n              payload.logger.error(`Error deleting search document: ${err}`)\n            }\n          }\n        } else if (doSync) {\n          try {\n            await payload.create({\n              collection: 'search',\n              data: {\n                ...dataToSave,\n                priority: defaultPriority,\n              },\n              req,\n            })\n          } catch (err: unknown) {\n            payload.logger.error(`Error creating search document: ${err}`)\n          }\n        }\n      } catch (err: unknown) {\n        payload.logger.error(`Error finding search document: ${err}`)\n      }\n    }\n  } catch (err: unknown) {\n    payload.logger.error(\n      `Error syncing search document related to ${collection} with id: '${id}': ${err}`,\n    )\n  }\n\n  return doc\n}\n"],"names":["syncWithSearch","args","collection","doc","operation","pluginConfig","req","payload","id","_status","status","title","beforeSync","defaultPriorities","deleteDrafts","syncDrafts","dataToSave","relationTo","value","originalDoc","searchDoc","defaultPriority","priority","err","logger","error","doSync","create","data","searchDocQuery","find","depth","where","equals","docs","foundDoc","duplicativeDocs","length","duplicativeDocIDs","map","delete","in","searchDocID","update"],"mappings":"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"}