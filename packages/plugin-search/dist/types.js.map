{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  CollectionAfterChangeHook,\n  CollectionConfig,\n  Field,\n  Payload,\n  PayloadRequest,\n} from 'payload'\n\nexport type DocToSync = {\n  [key: string]: any\n  doc: {\n    relationTo: string\n    value: string\n  }\n  title: string\n}\n\nexport type BeforeSync = (args: {\n  originalDoc: {\n    [key: string]: any\n  }\n  payload: Payload\n  req: PayloadRequest\n  searchDoc: DocToSync\n}) => DocToSync | Promise<DocToSync>\n\nexport type FieldsOverride = (args: { defaultFields: Field[] }) => Field[]\n\nexport type SearchPluginConfig = {\n  beforeSync?: BeforeSync\n  collections?: string[]\n  defaultPriorities?: {\n    [collection: string]: ((doc: any) => Promise<number> | number) | number\n  }\n  deleteDrafts?: boolean\n  searchOverrides?: { fields?: FieldsOverride } & Partial<Omit<CollectionConfig, 'fields'>>\n  syncDrafts?: boolean\n}\n\n// Extend the `CollectionAfterChangeHook` with more function args\n// Convert the `collection` arg from `SanitizedCollectionConfig` to a string\nexport type SyncWithSearch = (\n  Args: {\n    collection: string\n    pluginConfig: SearchPluginConfig\n  } & Omit<Parameters<CollectionAfterChangeHook>[0], 'collection'>,\n) => ReturnType<CollectionAfterChangeHook>\n"],"names":[],"mappings":"AAuCA,iEAAiE;AACjE,4EAA4E;AAC5E,WAK0C"}