{"version":3,"sources":["../../src/models/buildSchema.ts"],"sourcesContent":["import type { IndexOptions, Schema, SchemaOptions, SchemaTypeOptions } from 'mongoose'\nimport type {\n  ArrayField,\n  Block,\n  BlockField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  FieldAffectingData,\n  GroupField,\n  JSONField,\n  NonPresentationalField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SanitizedLocalizationConfig,\n  SelectField,\n  Tab,\n  TabsField,\n  TextField,\n  TextareaField,\n  UploadField,\n} from 'payload'\n\nimport mongoose from 'mongoose'\nimport {\n  fieldAffectsData,\n  fieldIsLocalized,\n  fieldIsPresentationalOnly,\n  tabHasName,\n} from 'payload/shared'\n\nexport type BuildSchemaOptions = {\n  allowIDField?: boolean\n  disableUnique?: boolean\n  draftsEnabled?: boolean\n  indexSortableFields?: boolean\n  options?: SchemaOptions\n}\n\ntype FieldSchemaGenerator = (\n  field: Field,\n  schema: Schema,\n  config: SanitizedConfig,\n  buildSchemaOptions: BuildSchemaOptions,\n) => void\n\nconst formatBaseSchema = (field: FieldAffectingData, buildSchemaOptions: BuildSchemaOptions) => {\n  const { disableUnique, draftsEnabled, indexSortableFields } = buildSchemaOptions\n  const schema: SchemaTypeOptions<unknown> = {\n    index: field.index || (!disableUnique && field.unique) || indexSortableFields || false,\n    required: false,\n    unique: (!disableUnique && field.unique) || false,\n  }\n\n  if (\n    schema.unique &&\n    (field.localized ||\n      draftsEnabled ||\n      (fieldAffectsData(field) &&\n        field.type !== 'group' &&\n        field.type !== 'tab' &&\n        field.required !== true))\n  ) {\n    schema.sparse = true\n  }\n\n  if (field.hidden) {\n    schema.hidden = true\n  }\n\n  return schema\n}\n\nconst localizeSchema = (\n  entity: NonPresentationalField | Tab,\n  schema,\n  localization: SanitizedLocalizationConfig | false,\n) => {\n  if (fieldIsLocalized(entity) && localization && Array.isArray(localization.locales)) {\n    return {\n      type: localization.localeCodes.reduce(\n        (localeSchema, locale) => ({\n          ...localeSchema,\n          [locale]: schema,\n        }),\n        {\n          _id: false,\n        },\n      ),\n      localized: true,\n    }\n  }\n  return schema\n}\n\nconst buildSchema = (\n  config: SanitizedConfig,\n  configFields: Field[],\n  buildSchemaOptions: BuildSchemaOptions = {},\n): Schema => {\n  const { allowIDField, options } = buildSchemaOptions\n  let fields = {}\n\n  let schemaFields = configFields\n\n  if (!allowIDField) {\n    const idField = schemaFields.find((field) => fieldAffectsData(field) && field.name === 'id')\n    if (idField) {\n      fields = {\n        _id: idField.type === 'number' ? Number : String,\n      }\n      schemaFields = schemaFields.filter(\n        (field) => !(fieldAffectsData(field) && field.name === 'id'),\n      )\n    }\n  }\n\n  const schema = new mongoose.Schema(fields, options)\n\n  schemaFields.forEach((field) => {\n    if (!fieldIsPresentationalOnly(field)) {\n      const addFieldSchema: FieldSchemaGenerator = fieldToSchemaMap[field.type]\n\n      if (addFieldSchema) {\n        addFieldSchema(field, schema, config, buildSchemaOptions)\n      }\n    }\n  })\n\n  return schema\n}\n\nconst fieldToSchemaMap: Record<string, FieldSchemaGenerator> = {\n  array: (\n    field: ArrayField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ) => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: [\n        buildSchema(config, field.fields, {\n          allowIDField: true,\n          disableUnique: buildSchemaOptions.disableUnique,\n          draftsEnabled: buildSchemaOptions.draftsEnabled,\n          options: {\n            _id: false,\n            id: false,\n            minimize: false,\n          },\n        }),\n      ],\n      default: undefined,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  blocks: (\n    field: BlockField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const fieldSchema = {\n      type: [new mongoose.Schema({}, { _id: false, discriminatorKey: 'blockType' })],\n      default: undefined,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, fieldSchema, config.localization),\n    })\n\n    field.blocks.forEach((blockItem: Block) => {\n      const blockSchema = new mongoose.Schema({}, { _id: false, id: false })\n\n      blockItem.fields.forEach((blockField) => {\n        const addFieldSchema: FieldSchemaGenerator = fieldToSchemaMap[blockField.type]\n        if (addFieldSchema) {\n          addFieldSchema(blockField, blockSchema, config, buildSchemaOptions)\n        }\n      })\n\n      if (field.localized && config.localization) {\n        config.localization.localeCodes.forEach((localeCode) => {\n          // @ts-expect-error Possible incorrect typing in mongoose types, this works\n          schema.path(`${field.name}.${localeCode}`).discriminator(blockItem.slug, blockSchema)\n        })\n      } else {\n        // @ts-expect-error Possible incorrect typing in mongoose types, this works\n        schema.path(field.name).discriminator(blockItem.slug, blockSchema)\n      }\n    })\n  },\n  checkbox: (\n    field: CheckboxField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = { ...formatBaseSchema(field, buildSchemaOptions), type: Boolean }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  code: (\n    field: CodeField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = { ...formatBaseSchema(field, buildSchemaOptions), type: String }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  collapsible: (\n    field: CollapsibleField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    field.fields.forEach((subField: Field) => {\n      const addFieldSchema: FieldSchemaGenerator = fieldToSchemaMap[subField.type]\n\n      if (addFieldSchema) {\n        addFieldSchema(subField, schema, config, buildSchemaOptions)\n      }\n    })\n  },\n  date: (\n    field: DateField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = { ...formatBaseSchema(field, buildSchemaOptions), type: Date }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  email: (\n    field: EmailField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = { ...formatBaseSchema(field, buildSchemaOptions), type: String }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  group: (\n    field: GroupField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const formattedBaseSchema = formatBaseSchema(field, buildSchemaOptions)\n\n    // carry indexSortableFields through to versions if drafts enabled\n    const indexSortableFields =\n      buildSchemaOptions.indexSortableFields &&\n      field.name === 'version' &&\n      buildSchemaOptions.draftsEnabled\n\n    const baseSchema = {\n      ...formattedBaseSchema,\n      type: buildSchema(config, field.fields, {\n        disableUnique: buildSchemaOptions.disableUnique,\n        draftsEnabled: buildSchemaOptions.draftsEnabled,\n        indexSortableFields,\n        options: {\n          _id: false,\n          id: false,\n          minimize: false,\n        },\n      }),\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  json: (\n    field: JSONField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: mongoose.Schema.Types.Mixed,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  number: (\n    field: NumberField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: field.hasMany ? [Number] : Number,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  point: (\n    field: PointField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema: SchemaTypeOptions<unknown> = {\n      type: {\n        type: String,\n        enum: ['Point'],\n      },\n      coordinates: {\n        type: [Number],\n        default: field.defaultValue || undefined,\n        required: false,\n      },\n    }\n    if (buildSchemaOptions.disableUnique && field.unique && field.localized) {\n      baseSchema.coordinates.sparse = true\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n\n    if (field.index === true || field.index === undefined) {\n      const indexOptions: IndexOptions = {}\n      if (!buildSchemaOptions.disableUnique && field.unique) {\n        indexOptions.sparse = true\n        indexOptions.unique = true\n      }\n      if (field.localized && config.localization) {\n        config.localization.locales.forEach((locale) => {\n          schema.index({ [`${field.name}.${locale.code}`]: '2dsphere' }, indexOptions)\n        })\n      } else {\n        schema.index({ [field.name]: '2dsphere' }, indexOptions)\n      }\n    }\n  },\n  radio: (\n    field: RadioField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: String,\n      enum: field.options.map((option) => {\n        if (typeof option === 'object') return option.value\n        return option\n      }),\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  relationship: (\n    field: RelationshipField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ) => {\n    const hasManyRelations = Array.isArray(field.relationTo)\n    let schemaToReturn: { [key: string]: any } = {}\n\n    if (field.localized && config.localization) {\n      schemaToReturn = {\n        type: config.localization.localeCodes.reduce((locales, locale) => {\n          let localeSchema: { [key: string]: any } = {}\n\n          if (hasManyRelations) {\n            localeSchema = {\n              ...formatBaseSchema(field, buildSchemaOptions),\n              _id: false,\n              type: mongoose.Schema.Types.Mixed,\n              relationTo: { type: String, enum: field.relationTo },\n              value: {\n                type: mongoose.Schema.Types.Mixed,\n                refPath: `${field.name}.${locale}.relationTo`,\n              },\n            }\n          } else {\n            localeSchema = {\n              ...formatBaseSchema(field, buildSchemaOptions),\n              type: mongoose.Schema.Types.Mixed,\n              ref: field.relationTo,\n            }\n          }\n\n          return {\n            ...locales,\n            [locale]: field.hasMany ? { type: [localeSchema], default: undefined } : localeSchema,\n          }\n        }, {}),\n        localized: true,\n      }\n    } else if (hasManyRelations) {\n      schemaToReturn = {\n        ...formatBaseSchema(field, buildSchemaOptions),\n        _id: false,\n        type: mongoose.Schema.Types.Mixed,\n        relationTo: { type: String, enum: field.relationTo },\n        value: {\n          type: mongoose.Schema.Types.Mixed,\n          refPath: `${field.name}.relationTo`,\n        },\n      }\n\n      if (field.hasMany) {\n        schemaToReturn = {\n          type: [schemaToReturn],\n          default: undefined,\n        }\n      }\n    } else {\n      schemaToReturn = {\n        ...formatBaseSchema(field, buildSchemaOptions),\n        type: mongoose.Schema.Types.Mixed,\n        ref: field.relationTo,\n      }\n\n      if (field.hasMany) {\n        schemaToReturn = {\n          type: [schemaToReturn],\n          default: undefined,\n        }\n      }\n    }\n\n    schema.add({\n      [field.name]: schemaToReturn,\n    })\n  },\n  richText: (\n    field: RichTextField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: mongoose.Schema.Types.Mixed,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  row: (\n    field: RowField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    field.fields.forEach((subField: Field) => {\n      const addFieldSchema: FieldSchemaGenerator = fieldToSchemaMap[subField.type]\n\n      if (addFieldSchema) {\n        addFieldSchema(subField, schema, config, buildSchemaOptions)\n      }\n    })\n  },\n  select: (\n    field: SelectField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: String,\n      enum: field.options.map((option) => {\n        if (typeof option === 'object') return option.value\n        return option\n      }),\n    }\n\n    if (buildSchemaOptions.draftsEnabled || !field.required) {\n      baseSchema.enum.push(null)\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(\n        field,\n        field.hasMany ? [baseSchema] : baseSchema,\n        config.localization,\n      ),\n    })\n  },\n  tabs: (\n    field: TabsField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    field.tabs.forEach((tab) => {\n      if (tabHasName(tab)) {\n        const baseSchema = {\n          type: buildSchema(config, tab.fields, {\n            disableUnique: buildSchemaOptions.disableUnique,\n            draftsEnabled: buildSchemaOptions.draftsEnabled,\n            options: {\n              _id: false,\n              id: false,\n              minimize: false,\n            },\n          }),\n        }\n\n        schema.add({\n          [tab.name]: localizeSchema(tab, baseSchema, config.localization),\n        })\n      } else {\n        tab.fields.forEach((subField: Field) => {\n          const addFieldSchema: FieldSchemaGenerator = fieldToSchemaMap[subField.type]\n\n          if (addFieldSchema) {\n            addFieldSchema(subField, schema, config, buildSchemaOptions)\n          }\n        })\n      }\n    })\n  },\n  text: (\n    field: TextField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: field.hasMany ? [String] : String,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  textarea: (\n    field: TextareaField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = { ...formatBaseSchema(field, buildSchemaOptions), type: String }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n  upload: (\n    field: UploadField,\n    schema: Schema,\n    config: SanitizedConfig,\n    buildSchemaOptions: BuildSchemaOptions,\n  ): void => {\n    const baseSchema = {\n      ...formatBaseSchema(field, buildSchemaOptions),\n      type: mongoose.Schema.Types.Mixed,\n      ref: field.relationTo,\n    }\n\n    schema.add({\n      [field.name]: localizeSchema(field, baseSchema, config.localization),\n    })\n  },\n}\n\nexport default buildSchema\n"],"names":["mongoose","fieldAffectsData","fieldIsLocalized","fieldIsPresentationalOnly","tabHasName","formatBaseSchema","field","buildSchemaOptions","disableUnique","draftsEnabled","indexSortableFields","schema","index","unique","required","localized","type","sparse","hidden","localizeSchema","entity","localization","Array","isArray","locales","localeCodes","reduce","localeSchema","locale","_id","buildSchema","config","configFields","allowIDField","options","fields","schemaFields","idField","find","name","Number","String","filter","Schema","forEach","addFieldSchema","fieldToSchemaMap","array","baseSchema","id","minimize","default","undefined","add","blocks","fieldSchema","discriminatorKey","blockItem","blockSchema","blockField","localeCode","path","discriminator","slug","checkbox","Boolean","code","collapsible","subField","date","Date","email","group","formattedBaseSchema","json","Types","Mixed","number","hasMany","point","enum","coordinates","defaultValue","indexOptions","radio","map","option","value","relationship","hasManyRelations","relationTo","schemaToReturn","refPath","ref","richText","row","select","push","tabs","tab","text","textarea","upload"],"mappings":"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"}