{"version":3,"sources":["../src/queryDrafts.ts"],"sourcesContent":["import type { PaginateOptions } from 'mongoose'\nimport type { PayloadRequest, QueryDrafts } from 'payload'\n\nimport { combineQueries, flattenWhereToOperators } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport sanitizeInternalFields from './utilities/sanitizeInternalFields.js'\nimport { withSession } from './withSession.js'\n\nexport const queryDrafts: QueryDrafts = async function queryDrafts(\n  this: MongooseAdapter,\n  { collection, limit, locale, page, pagination, req = {} as PayloadRequest, sort: sortArg, where },\n) {\n  const VersionModel = this.versions[collection]\n  const collectionConfig = this.payload.collections[collection].config\n  const options = await withSession(this, req)\n\n  let hasNearConstraint\n  let sort\n\n  if (where) {\n    const constraints = flattenWhereToOperators(where)\n    hasNearConstraint = constraints.some((prop) => Object.keys(prop).some((key) => key === 'near'))\n  }\n\n  if (!hasNearConstraint) {\n    sort = buildSortParam({\n      config: this.payload.config,\n      fields: collectionConfig.fields,\n      locale,\n      sort: sortArg || collectionConfig.defaultSort,\n      timestamps: true,\n    })\n  }\n\n  const combinedWhere = combineQueries({ latest: { equals: true } }, where)\n\n  const versionQuery = await VersionModel.buildQuery({\n    locale,\n    payload: this.payload,\n    where: combinedWhere,\n  })\n\n  // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.\n  const useEstimatedCount =\n    hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0\n  const paginationOptions: PaginateOptions = {\n    forceCountFn: hasNearConstraint,\n    lean: true,\n    leanWithId: true,\n    options,\n    page,\n    pagination,\n    sort,\n    useEstimatedCount,\n  }\n\n  if (\n    !useEstimatedCount &&\n    Object.keys(versionQuery).length === 0 &&\n    this.disableIndexHints !== true\n  ) {\n    // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding\n    // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,\n    // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses\n    // the correct indexed field\n    paginationOptions.useCustomCountFn = () => {\n      return Promise.resolve(\n        VersionModel.countDocuments(versionQuery, {\n          hint: { _id: 1 },\n        }),\n      )\n    }\n  }\n\n  if (limit > 0) {\n    paginationOptions.limit = limit\n    // limit must also be set here, it's ignored when pagination is false\n    paginationOptions.options.limit = limit\n  }\n\n  const result = await VersionModel.paginate(versionQuery, paginationOptions)\n  const docs = JSON.parse(JSON.stringify(result.docs))\n\n  return {\n    ...result,\n    docs: docs.map((doc) => {\n      doc = {\n        _id: doc.parent,\n        id: doc.parent,\n        ...doc.version,\n        createdAt: doc.createdAt,\n        updatedAt: doc.updatedAt,\n      }\n\n      return sanitizeInternalFields(doc)\n    }),\n  }\n}\n"],"names":["combineQueries","flattenWhereToOperators","buildSortParam","sanitizeInternalFields","withSession","queryDrafts","collection","limit","locale","page","pagination","req","sort","sortArg","where","VersionModel","versions","collectionConfig","payload","collections","config","options","hasNearConstraint","constraints","some","prop","Object","keys","key","fields","defaultSort","timestamps","combinedWhere","latest","equals","versionQuery","buildQuery","useEstimatedCount","length","paginationOptions","forceCountFn","lean","leanWithId","disableIndexHints","useCustomCountFn","Promise","resolve","countDocuments","hint","_id","result","paginate","docs","JSON","parse","stringify","map","doc","parent","id","version","createdAt","updatedAt"],"mappings":"AAGA,SAASA,cAAc,EAAEC,uBAAuB,QAAQ,UAAS;AAIjE,SAASC,cAAc,QAAQ,8BAA6B;AAC5D,OAAOC,4BAA4B,wCAAuC;AAC1E,SAASC,WAAW,QAAQ,mBAAkB;AAE9C,OAAO,MAAMC,cAA2B,eAAeA,YAErD,EAAEC,UAAU,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,EAAEC,UAAU,EAAEC,MAAM,CAAC,CAAmB,EAAEC,MAAMC,OAAO,EAAEC,KAAK,EAAE;IAEjG,MAAMC,eAAe,IAAI,CAACC,QAAQ,CAACV,WAAW;IAC9C,MAAMW,mBAAmB,IAAI,CAACC,OAAO,CAACC,WAAW,CAACb,WAAW,CAACc,MAAM;IACpE,MAAMC,UAAU,MAAMjB,YAAY,IAAI,EAAEO;IAExC,IAAIW;IACJ,IAAIV;IAEJ,IAAIE,OAAO;QACT,MAAMS,cAActB,wBAAwBa;QAC5CQ,oBAAoBC,YAAYC,IAAI,CAAC,CAACC,OAASC,OAAOC,IAAI,CAACF,MAAMD,IAAI,CAAC,CAACI,MAAQA,QAAQ;IACzF;IAEA,IAAI,CAACN,mBAAmB;QACtBV,OAAOV,eAAe;YACpBkB,QAAQ,IAAI,CAACF,OAAO,CAACE,MAAM;YAC3BS,QAAQZ,iBAAiBY,MAAM;YAC/BrB;YACAI,MAAMC,WAAWI,iBAAiBa,WAAW;YAC7CC,YAAY;QACd;IACF;IAEA,MAAMC,gBAAgBhC,eAAe;QAAEiC,QAAQ;YAAEC,QAAQ;QAAK;IAAE,GAAGpB;IAEnE,MAAMqB,eAAe,MAAMpB,aAAaqB,UAAU,CAAC;QACjD5B;QACAU,SAAS,IAAI,CAACA,OAAO;QACrBJ,OAAOkB;IACT;IAEA,4HAA4H;IAC5H,MAAMK,oBACJf,qBAAqB,CAACa,gBAAgBT,OAAOC,IAAI,CAACQ,cAAcG,MAAM,KAAK;IAC7E,MAAMC,oBAAqC;QACzCC,cAAclB;QACdmB,MAAM;QACNC,YAAY;QACZrB;QACAZ;QACAC;QACAE;QACAyB;IACF;IAEA,IACE,CAACA,qBACDX,OAAOC,IAAI,CAACQ,cAAcG,MAAM,KAAK,KACrC,IAAI,CAACK,iBAAiB,KAAK,MAC3B;QACA,mHAAmH;QACnH,qHAAqH;QACrH,mHAAmH;QACnH,4BAA4B;QAC5BJ,kBAAkBK,gBAAgB,GAAG;YACnC,OAAOC,QAAQC,OAAO,CACpB/B,aAAagC,cAAc,CAACZ,cAAc;gBACxCa,MAAM;oBAAEC,KAAK;gBAAE;YACjB;QAEJ;IACF;IAEA,IAAI1C,QAAQ,GAAG;QACbgC,kBAAkBhC,KAAK,GAAGA;QAC1B,qEAAqE;QACrEgC,kBAAkBlB,OAAO,CAACd,KAAK,GAAGA;IACpC;IAEA,MAAM2C,SAAS,MAAMnC,aAAaoC,QAAQ,CAAChB,cAAcI;IACzD,MAAMa,OAAOC,KAAKC,KAAK,CAACD,KAAKE,SAAS,CAACL,OAAOE,IAAI;IAElD,OAAO;QACL,GAAGF,MAAM;QACTE,MAAMA,KAAKI,GAAG,CAAC,CAACC;YACdA,MAAM;gBACJR,KAAKQ,IAAIC,MAAM;gBACfC,IAAIF,IAAIC,MAAM;gBACd,GAAGD,IAAIG,OAAO;gBACdC,WAAWJ,IAAII,SAAS;gBACxBC,WAAWL,IAAIK,SAAS;YAC1B;YAEA,OAAO3D,uBAAuBsD;QAChC;IACF;AACF,EAAC"}