{"version":3,"sources":["../../src/queries/parseParams.ts"],"sourcesContent":["import type { FilterQuery } from 'mongoose'\nimport type { Field, Operator, Payload, Where } from 'payload'\n\nimport deepmerge from 'deepmerge'\nimport { combineMerge } from 'payload'\nimport { validOperators } from 'payload/shared'\n\nimport { buildAndOrConditions } from './buildAndOrConditions.js'\nimport { buildSearchParam } from './buildSearchParams.js'\n\nexport async function parseParams({\n  collectionSlug,\n  fields,\n  globalSlug,\n  locale,\n  payload,\n  where,\n}: {\n  collectionSlug?: string\n  fields: Field[]\n  globalSlug?: string\n  locale: string\n  payload: Payload\n  where: Where\n}): Promise<Record<string, unknown>> {\n  let result = {} as FilterQuery<any>\n\n  if (typeof where === 'object') {\n    // We need to determine if the whereKey is an AND, OR, or a schema path\n    for (const relationOrPath of Object.keys(where)) {\n      const condition = where[relationOrPath]\n      let conditionOperator: '$and' | '$or'\n      if (relationOrPath.toLowerCase() === 'and') {\n        conditionOperator = '$and'\n      } else if (relationOrPath.toLowerCase() === 'or') {\n        conditionOperator = '$or'\n      }\n      if (Array.isArray(condition)) {\n        const builtConditions = await buildAndOrConditions({\n          collectionSlug,\n          fields,\n          globalSlug,\n          locale,\n          payload,\n          where: condition,\n        })\n        if (builtConditions.length > 0) result[conditionOperator] = builtConditions\n      } else {\n        // It's a path - and there can be multiple comparisons on a single path.\n        // For example - title like 'test' and title not equal to 'tester'\n        // So we need to loop on keys again here to handle each operator independently\n        const pathOperators = where[relationOrPath]\n        if (typeof pathOperators === 'object') {\n          for (const operator of Object.keys(pathOperators)) {\n            if (validOperators.includes(operator as Operator)) {\n              const searchParam = await buildSearchParam({\n                collectionSlug,\n                fields,\n                globalSlug,\n                incomingPath: relationOrPath,\n                locale,\n                operator,\n                payload,\n                val: pathOperators[operator],\n              })\n\n              if (searchParam?.value && searchParam?.path) {\n                result = {\n                  ...result,\n                  [searchParam.path]: searchParam.value,\n                }\n              } else if (typeof searchParam?.value === 'object') {\n                result = deepmerge(result, searchParam.value, { arrayMerge: combineMerge })\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return result\n}\n"],"names":["deepmerge","combineMerge","validOperators","buildAndOrConditions","buildSearchParam","parseParams","collectionSlug","fields","globalSlug","locale","payload","where","result","relationOrPath","Object","keys","condition","conditionOperator","toLowerCase","Array","isArray","builtConditions","length","pathOperators","operator","includes","searchParam","incomingPath","val","value","path","arrayMerge"],"mappings":"AAGA,OAAOA,eAAe,YAAW;AACjC,SAASC,YAAY,QAAQ,UAAS;AACtC,SAASC,cAAc,QAAQ,iBAAgB;AAE/C,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,gBAAgB,QAAQ,yBAAwB;AAEzD,OAAO,eAAeC,YAAY,EAChCC,cAAc,EACdC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,KAAK,EAQN;IACC,IAAIC,SAAS,CAAC;IAEd,IAAI,OAAOD,UAAU,UAAU;QAC7B,uEAAuE;QACvE,KAAK,MAAME,kBAAkBC,OAAOC,IAAI,CAACJ,OAAQ;YAC/C,MAAMK,YAAYL,KAAK,CAACE,eAAe;YACvC,IAAII;YACJ,IAAIJ,eAAeK,WAAW,OAAO,OAAO;gBAC1CD,oBAAoB;YACtB,OAAO,IAAIJ,eAAeK,WAAW,OAAO,MAAM;gBAChDD,oBAAoB;YACtB;YACA,IAAIE,MAAMC,OAAO,CAACJ,YAAY;gBAC5B,MAAMK,kBAAkB,MAAMlB,qBAAqB;oBACjDG;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC,OAAOK;gBACT;gBACA,IAAIK,gBAAgBC,MAAM,GAAG,GAAGV,MAAM,CAACK,kBAAkB,GAAGI;YAC9D,OAAO;gBACL,wEAAwE;gBACxE,kEAAkE;gBAClE,8EAA8E;gBAC9E,MAAME,gBAAgBZ,KAAK,CAACE,eAAe;gBAC3C,IAAI,OAAOU,kBAAkB,UAAU;oBACrC,KAAK,MAAMC,YAAYV,OAAOC,IAAI,CAACQ,eAAgB;wBACjD,IAAIrB,eAAeuB,QAAQ,CAACD,WAAuB;4BACjD,MAAME,cAAc,MAAMtB,iBAAiB;gCACzCE;gCACAC;gCACAC;gCACAmB,cAAcd;gCACdJ;gCACAe;gCACAd;gCACAkB,KAAKL,aAAa,CAACC,SAAS;4BAC9B;4BAEA,IAAIE,aAAaG,SAASH,aAAaI,MAAM;gCAC3ClB,SAAS;oCACP,GAAGA,MAAM;oCACT,CAACc,YAAYI,IAAI,CAAC,EAAEJ,YAAYG,KAAK;gCACvC;4BACF,OAAO,IAAI,OAAOH,aAAaG,UAAU,UAAU;gCACjDjB,SAASZ,UAAUY,QAAQc,YAAYG,KAAK,EAAE;oCAAEE,YAAY9B;gCAAa;4BAC3E;wBACF;oBACF;gBACF;YACF;QACF;IACF;IAEA,OAAOW;AACT"}