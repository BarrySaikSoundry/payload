{"version":3,"sources":["../../src/queries/getLocalizedSortProperty.ts"],"sourcesContent":["import type { Field, SanitizedConfig } from 'payload'\n\nimport { flattenTopLevelFields } from 'payload'\nimport { fieldAffectsData, fieldIsPresentationalOnly } from 'payload/shared'\n\ntype Args = {\n  config: SanitizedConfig\n  fields: Field[]\n  locale: string\n  result?: string\n  segments: string[]\n}\n\nexport const getLocalizedSortProperty = ({\n  config,\n  fields: incomingFields,\n  locale,\n  result: incomingResult,\n  segments: incomingSegments,\n}: Args): string => {\n  // If localization is not enabled, accept exactly\n  // what is sent in\n  if (!config.localization) {\n    return incomingSegments.join('.')\n  }\n\n  // Flatten incoming fields (row, etc)\n  const fields = flattenTopLevelFields(incomingFields)\n\n  const segments = [...incomingSegments]\n\n  // Retrieve first segment, and remove from segments\n  const firstSegment = segments.shift()\n\n  // Attempt to find a matched field\n  const matchedField = fields.find(\n    (field) => fieldAffectsData(field) && field.name === firstSegment,\n  )\n\n  if (matchedField && !fieldIsPresentationalOnly(matchedField)) {\n    let nextFields: Field[]\n    const remainingSegments = [...segments]\n    let localizedSegment = matchedField.name\n\n    if (matchedField.localized) {\n      // Check to see if next segment is a locale\n      if (segments.length > 0) {\n        const nextSegmentIsLocale = config.localization.localeCodes.includes(remainingSegments[0])\n\n        // If next segment is locale, remove it from remaining segments\n        // and use it to localize the current segment\n        if (nextSegmentIsLocale) {\n          const nextSegment = remainingSegments.shift()\n          localizedSegment = `${matchedField.name}.${nextSegment}`\n        }\n      } else {\n        // If no more segments, but field is localized, use default locale\n        localizedSegment = `${matchedField.name}.${locale}`\n      }\n    }\n\n    // If there are subfields, pass them through\n    if (\n      matchedField.type === 'tab' ||\n      matchedField.type === 'group' ||\n      matchedField.type === 'array'\n    ) {\n      nextFields = matchedField.fields\n    }\n\n    if (matchedField.type === 'blocks') {\n      nextFields = matchedField.blocks.reduce((flattenedBlockFields, block) => {\n        return [\n          ...flattenedBlockFields,\n          ...block.fields.filter(\n            (blockField) =>\n              (fieldAffectsData(blockField) &&\n                blockField.name !== 'blockType' &&\n                blockField.name !== 'blockName') ||\n              !fieldAffectsData(blockField),\n          ),\n        ]\n      }, [])\n    }\n\n    const result = incomingResult ? `${incomingResult}.${localizedSegment}` : localizedSegment\n\n    if (nextFields) {\n      return getLocalizedSortProperty({\n        config,\n        fields: nextFields,\n        locale,\n        result,\n        segments: remainingSegments,\n      })\n    }\n\n    return result\n  }\n\n  return incomingSegments.join('.')\n}\n"],"names":["flattenTopLevelFields","fieldAffectsData","fieldIsPresentationalOnly","getLocalizedSortProperty","config","fields","incomingFields","locale","result","incomingResult","segments","incomingSegments","localization","join","firstSegment","shift","matchedField","find","field","name","nextFields","remainingSegments","localizedSegment","localized","length","nextSegmentIsLocale","localeCodes","includes","nextSegment","type","blocks","reduce","flattenedBlockFields","block","filter","blockField"],"mappings":"AAEA,SAASA,qBAAqB,QAAQ,UAAS;AAC/C,SAASC,gBAAgB,EAAEC,yBAAyB,QAAQ,iBAAgB;AAU5E,OAAO,MAAMC,2BAA2B,CAAC,EACvCC,MAAM,EACNC,QAAQC,cAAc,EACtBC,MAAM,EACNC,QAAQC,cAAc,EACtBC,UAAUC,gBAAgB,EACrB;IACL,iDAAiD;IACjD,kBAAkB;IAClB,IAAI,CAACP,OAAOQ,YAAY,EAAE;QACxB,OAAOD,iBAAiBE,IAAI,CAAC;IAC/B;IAEA,qCAAqC;IACrC,MAAMR,SAASL,sBAAsBM;IAErC,MAAMI,WAAW;WAAIC;KAAiB;IAEtC,mDAAmD;IACnD,MAAMG,eAAeJ,SAASK,KAAK;IAEnC,kCAAkC;IAClC,MAAMC,eAAeX,OAAOY,IAAI,CAC9B,CAACC,QAAUjB,iBAAiBiB,UAAUA,MAAMC,IAAI,KAAKL;IAGvD,IAAIE,gBAAgB,CAACd,0BAA0Bc,eAAe;QAC5D,IAAII;QACJ,MAAMC,oBAAoB;eAAIX;SAAS;QACvC,IAAIY,mBAAmBN,aAAaG,IAAI;QAExC,IAAIH,aAAaO,SAAS,EAAE;YAC1B,2CAA2C;YAC3C,IAAIb,SAASc,MAAM,GAAG,GAAG;gBACvB,MAAMC,sBAAsBrB,OAAOQ,YAAY,CAACc,WAAW,CAACC,QAAQ,CAACN,iBAAiB,CAAC,EAAE;gBAEzF,+DAA+D;gBAC/D,6CAA6C;gBAC7C,IAAII,qBAAqB;oBACvB,MAAMG,cAAcP,kBAAkBN,KAAK;oBAC3CO,mBAAmB,CAAC,EAAEN,aAAaG,IAAI,CAAC,CAAC,EAAES,YAAY,CAAC;gBAC1D;YACF,OAAO;gBACL,kEAAkE;gBAClEN,mBAAmB,CAAC,EAAEN,aAAaG,IAAI,CAAC,CAAC,EAAEZ,OAAO,CAAC;YACrD;QACF;QAEA,4CAA4C;QAC5C,IACES,aAAaa,IAAI,KAAK,SACtBb,aAAaa,IAAI,KAAK,WACtBb,aAAaa,IAAI,KAAK,SACtB;YACAT,aAAaJ,aAAaX,MAAM;QAClC;QAEA,IAAIW,aAAaa,IAAI,KAAK,UAAU;YAClCT,aAAaJ,aAAac,MAAM,CAACC,MAAM,CAAC,CAACC,sBAAsBC;gBAC7D,OAAO;uBACFD;uBACAC,MAAM5B,MAAM,CAAC6B,MAAM,CACpB,CAACC,aACC,AAAClC,iBAAiBkC,eAChBA,WAAWhB,IAAI,KAAK,eACpBgB,WAAWhB,IAAI,KAAK,eACtB,CAAClB,iBAAiBkC;iBAEvB;YACH,GAAG,EAAE;QACP;QAEA,MAAM3B,SAASC,iBAAiB,CAAC,EAAEA,eAAe,CAAC,EAAEa,iBAAiB,CAAC,GAAGA;QAE1E,IAAIF,YAAY;YACd,OAAOjB,yBAAyB;gBAC9BC;gBACAC,QAAQe;gBACRb;gBACAC;gBACAE,UAAUW;YACZ;QACF;QAEA,OAAOb;IACT;IAEA,OAAOG,iBAAiBE,IAAI,CAAC;AAC/B,EAAC"}