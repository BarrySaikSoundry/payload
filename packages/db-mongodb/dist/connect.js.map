{"version":3,"sources":["../src/connect.ts"],"sourcesContent":["import type { ConnectOptions } from 'mongoose'\nimport type { Connect } from 'payload'\n\nimport mongoose from 'mongoose'\n\nimport type { MongooseAdapter } from './index.js'\n\nexport const connect: Connect = async function connect(\n  this: MongooseAdapter,\n  options = {\n    hotReload: false,\n  },\n) {\n  const { hotReload } = options\n\n  if (this.url === false) {\n    return\n  }\n\n  if (typeof this.url !== 'string') {\n    throw new Error('Error: missing MongoDB connection URL.')\n  }\n\n  const urlToConnect = this.url\n\n  const connectionOptions: { useFacet: undefined } & ConnectOptions = {\n    autoIndex: true,\n    ...this.connectOptions,\n    useFacet: undefined,\n  }\n\n  if (hotReload) connectionOptions.autoIndex = false\n\n  try {\n    this.connection = (await mongoose.connect(urlToConnect, connectionOptions)).connection\n\n    // If we are running a replica set with MongoDB Memory Server,\n    // wait until the replica set elects a primary before proceeding\n    if (this.mongoMemoryServer) {\n      await new Promise((resolve) => setTimeout(resolve, 2000))\n    }\n\n    const client = this.connection.getClient()\n\n    if (!client.options.replicaSet) {\n      this.transactionOptions = false\n      this.beginTransaction = undefined\n    }\n\n    if (!this.mongoMemoryServer && !hotReload) {\n      if (process.env.PAYLOAD_DROP_DATABASE === 'true') {\n        this.payload.logger.info('---- DROPPING DATABASE ----')\n        await mongoose.connection.dropDatabase()\n        this.payload.logger.info('---- DROPPED DATABASE ----')\n      }\n    }\n  } catch (err) {\n    console.log(err)\n    this.payload.logger.error(`Error: cannot connect to MongoDB. Details: ${err.message}`, err)\n    process.exit(1)\n  }\n}\n"],"names":["mongoose","connect","options","hotReload","url","Error","urlToConnect","connectionOptions","autoIndex","connectOptions","useFacet","undefined","connection","mongoMemoryServer","Promise","resolve","setTimeout","client","getClient","replicaSet","transactionOptions","beginTransaction","process","env","PAYLOAD_DROP_DATABASE","payload","logger","info","dropDatabase","err","console","log","error","message","exit"],"mappings":"AAGA,OAAOA,cAAc,WAAU;AAI/B,OAAO,MAAMC,UAAmB,eAAeA,QAE7CC,UAAU;IACRC,WAAW;AACb,CAAC;IAED,MAAM,EAAEA,SAAS,EAAE,GAAGD;IAEtB,IAAI,IAAI,CAACE,GAAG,KAAK,OAAO;QACtB;IACF;IAEA,IAAI,OAAO,IAAI,CAACA,GAAG,KAAK,UAAU;QAChC,MAAM,IAAIC,MAAM;IAClB;IAEA,MAAMC,eAAe,IAAI,CAACF,GAAG;IAE7B,MAAMG,oBAA8D;QAClEC,WAAW;QACX,GAAG,IAAI,CAACC,cAAc;QACtBC,UAAUC;IACZ;IAEA,IAAIR,WAAWI,kBAAkBC,SAAS,GAAG;IAE7C,IAAI;QACF,IAAI,CAACI,UAAU,GAAG,AAAC,CAAA,MAAMZ,SAASC,OAAO,CAACK,cAAcC,kBAAiB,EAAGK,UAAU;QAEtF,8DAA8D;QAC9D,gEAAgE;QAChE,IAAI,IAAI,CAACC,iBAAiB,EAAE;YAC1B,MAAM,IAAIC,QAAQ,CAACC,UAAYC,WAAWD,SAAS;QACrD;QAEA,MAAME,SAAS,IAAI,CAACL,UAAU,CAACM,SAAS;QAExC,IAAI,CAACD,OAAOf,OAAO,CAACiB,UAAU,EAAE;YAC9B,IAAI,CAACC,kBAAkB,GAAG;YAC1B,IAAI,CAACC,gBAAgB,GAAGV;QAC1B;QAEA,IAAI,CAAC,IAAI,CAACE,iBAAiB,IAAI,CAACV,WAAW;YACzC,IAAImB,QAAQC,GAAG,CAACC,qBAAqB,KAAK,QAAQ;gBAChD,IAAI,CAACC,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC;gBACzB,MAAM3B,SAASY,UAAU,CAACgB,YAAY;gBACtC,IAAI,CAACH,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC;YAC3B;QACF;IACF,EAAE,OAAOE,KAAK;QACZC,QAAQC,GAAG,CAACF;QACZ,IAAI,CAACJ,OAAO,CAACC,MAAM,CAACM,KAAK,CAAC,CAAC,2CAA2C,EAAEH,IAAII,OAAO,CAAC,CAAC,EAAEJ;QACvFP,QAAQY,IAAI,CAAC;IACf;AACF,EAAC"}