{"version":3,"sources":["../../src/predefinedMigrations/versions-v1-v2.js"],"sourcesContent":["module.exports.up = `  async function migrateCollectionDocs(slug: string, docsAtATime = 100) {\n    const VersionsModel = payload.db.versions[slug]\n    const remainingDocs = await VersionsModel.aggregate(\n      [\n        // Sort so that newest are first\n        {\n          $sort: {\n            updatedAt: -1,\n          },\n        },\n        // Group by parent ID\n        // take the $first of each\n        {\n          $group: {\n            _id: '$parent',\n            _versionID: { $first: '$_id' },\n            createdAt: { $first: '$createdAt' },\n            latest: { $first: '$latest' },\n            updatedAt: { $first: '$updatedAt' },\n            version: { $first: '$version' },\n          },\n        },\n        {\n          $match: {\n            latest: { $eq: null },\n          },\n        },\n        {\n          $limit: docsAtATime,\n        },\n      ],\n      {\n        allowDiskUse: true,\n      },\n    ).exec()\n\n    if (!remainingDocs || remainingDocs.length === 0) {\n      const newVersions = await VersionsModel.find({\n        latest: {\n          $eq: true,\n        },\n      })\n\n      if (newVersions?.length) {\n        payload.logger.info(\n          \\`Migrated \\${newVersions.length} documents in the \"\\${slug}\" versions collection.\\`,\n        )\n      }\n\n      return\n    }\n\n    const remainingDocIds = remainingDocs.map((doc) => doc._versionID)\n\n    await VersionsModel.updateMany(\n      {\n        _id: {\n          $in: remainingDocIds,\n        },\n      },\n      {\n        latest: true,\n      },\n    )\n\n    await migrateCollectionDocs(slug)\n  }\n\n  // For each collection\n  await Promise.all(\n    payload.config.collections.map(async ({ slug, versions }) => {\n      if (versions?.drafts) {\n        return migrateCollectionDocs(slug)\n      }\n    }),\n  )\n\n  // For each global\n  await Promise.all(\n    payload.config.globals.map(async ({ slug, versions }) => {\n      if (versions) {\n        const VersionsModel = payload.db.versions[slug]\n\n        await VersionsModel.findOneAndUpdate(\n          {},\n          { latest: true },\n          {\n            sort: { updatedAt: -1 },\n          },\n        ).exec()\n\n        payload.logger.info(\\`Migrated the \"\\${slug}\" global.\\`)\n      }\n    }),\n  )\n`\n"],"names":["module","exports","up"],"mappings":"AAAAA,OAAOC,OAAO,CAACC,EAAE,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+FrB,CAAC"}