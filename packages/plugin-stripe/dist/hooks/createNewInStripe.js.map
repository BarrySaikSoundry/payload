{"version":3,"sources":["../../src/hooks/createNewInStripe.ts"],"sourcesContent":["import type { CollectionBeforeValidateHook, CollectionConfig } from 'payload'\n\nimport { APIError } from 'payload'\nimport Stripe from 'stripe'\n\nimport type { StripePluginConfig } from '../types.js'\n\nimport { deepen } from '../utilities/deepen.js'\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY\n// api version can only be the latest, stripe recommends ts ignoring it\nconst stripe = new Stripe(stripeSecretKey || '', { apiVersion: '2022-08-01' })\n\ntype HookArgsWithCustomCollection = {\n  collection: CollectionConfig\n} & Omit<Parameters<CollectionBeforeValidateHook>[0], 'collection'>\n\nexport type CollectionBeforeValidateHookWithArgs = (\n  args: {\n    collection?: CollectionConfig\n    pluginConfig?: StripePluginConfig\n  } & HookArgsWithCustomCollection,\n) => void\n\nexport const createNewInStripe: CollectionBeforeValidateHookWithArgs = async (args) => {\n  const { collection, data, operation, pluginConfig, req } = args\n\n  const { logs, sync } = pluginConfig || {}\n\n  const payload = req?.payload\n\n  const dataRef = data || {}\n\n  if (process.env.NODE_ENV === 'test') {\n    dataRef.stripeID = 'test'\n    return dataRef\n  }\n\n  if (payload) {\n    if (data?.skipSync) {\n      if (logs) payload.logger.info(`Bypassing collection-level hooks.`)\n    } else {\n      // initialize as 'false' so that all Payload admin events sync to Stripe\n      // then conditionally set to 'true' to for events that originate from webhooks\n      // this will prevent webhook events from triggering an unnecessary sync / infinite loop\n      dataRef.skipSync = false\n\n      const { slug: collectionSlug } = collection || {}\n      const syncConfig = sync?.find((conf) => conf.collection === collectionSlug)\n\n      if (syncConfig) {\n        // combine all fields of this object and match their respective values within the document\n        let syncedFields = syncConfig.fields.reduce(\n          (acc, field) => {\n            const { fieldPath, stripeProperty } = field\n\n            acc[stripeProperty] = dataRef[fieldPath]\n            return acc\n          },\n          {} as Record<string, any>,\n        )\n\n        syncedFields = deepen(syncedFields)\n\n        if (operation === 'update') {\n          if (logs)\n            payload.logger.info(\n              `A '${collectionSlug}' document has changed in Payload with ID: '${data?.id}', syncing with Stripe...`,\n            )\n\n          // NOTE: the Stripe document will be created in the \"afterChange\" hook, so create a new stripe document here if no stripeID exists\n          if (!dataRef.stripeID) {\n            try {\n              // NOTE: Typed as \"any\" because the \"create\" method is not standard across all Stripe resources\n              const stripeResource = await stripe?.[syncConfig.stripeResourceType]?.create(\n                // @ts-expect-error\n                syncedFields,\n              )\n\n              if (logs)\n                payload.logger.info(\n                  `✅ Successfully created new '${syncConfig.stripeResourceType}' resource in Stripe with ID: '${stripeResource.id}'.`,\n                )\n\n              dataRef.stripeID = stripeResource.id\n\n              // NOTE: this is to prevent sync in the \"afterChange\" hook\n              dataRef.skipSync = true\n            } catch (error: unknown) {\n              const msg = error instanceof Error ? error.message : error\n              if (logs) payload.logger.error(`- Error creating Stripe document: ${msg}`)\n            }\n          }\n        }\n\n        if (operation === 'create') {\n          if (logs)\n            payload.logger.info(\n              `A new '${collectionSlug}' document was created in Payload with ID: '${data?.id}', syncing with Stripe...`,\n            )\n\n          try {\n            if (logs)\n              payload.logger.info(\n                `- Creating new '${syncConfig.stripeResourceType}' resource in Stripe...`,\n              )\n\n            // NOTE: Typed as \"any\" because the \"create\" method is not standard across all Stripe resources\n            const stripeResource = await stripe?.[syncConfig.stripeResourceType]?.create(\n              // @ts-expect-error\n              syncedFields,\n            )\n\n            if (logs)\n              payload.logger.info(\n                `✅ Successfully created new '${syncConfig.stripeResourceType}' resource in Stripe with ID: '${stripeResource.id}'.`,\n              )\n\n            dataRef.stripeID = stripeResource.id\n\n            // IMPORTANT: this is to prevent sync in the \"afterChange\" hook\n            dataRef.skipSync = true\n          } catch (error: unknown) {\n            const msg = error instanceof Error ? error.message : error\n            throw new APIError(\n              `Failed to create new '${syncConfig.stripeResourceType}' resource in Stripe: ${msg}`,\n            )\n          }\n        }\n      }\n    }\n  }\n\n  return dataRef\n}\n"],"names":["APIError","Stripe","deepen","stripeSecretKey","process","env","STRIPE_SECRET_KEY","stripe","apiVersion","createNewInStripe","args","collection","data","operation","pluginConfig","req","logs","sync","payload","dataRef","NODE_ENV","stripeID","skipSync","logger","info","slug","collectionSlug","syncConfig","find","conf","syncedFields","fields","reduce","acc","field","fieldPath","stripeProperty","id","stripeResource","stripeResourceType","create","error","msg","Error","message"],"mappings":"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"}