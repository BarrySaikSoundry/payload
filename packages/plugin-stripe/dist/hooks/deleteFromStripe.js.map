{"version":3,"sources":["../../src/hooks/deleteFromStripe.ts"],"sourcesContent":["import type { CollectionAfterDeleteHook, CollectionConfig } from 'payload'\n\nimport { APIError } from 'payload'\nimport Stripe from 'stripe'\n\nimport type { StripePluginConfig } from '../types.js'\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY\n// api version can only be the latest, stripe recommends ts ignoring it\nconst stripe = new Stripe(stripeSecretKey || '', { apiVersion: '2022-08-01' })\n\ntype HookArgsWithCustomCollection = {\n  collection: CollectionConfig\n} & Omit<Parameters<CollectionAfterDeleteHook>[0], 'collection'>\n\nexport type CollectionAfterDeleteHookWithArgs = (\n  args: {\n    collection?: CollectionConfig\n    pluginConfig?: StripePluginConfig\n  } & HookArgsWithCustomCollection,\n) => void\n\nexport const deleteFromStripe: CollectionAfterDeleteHookWithArgs = async (args) => {\n  const { collection, doc, pluginConfig, req } = args\n\n  const { logs, sync } = pluginConfig || {}\n\n  const { payload } = req\n  const { slug: collectionSlug } = collection || {}\n\n  if (logs)\n    payload.logger.info(\n      `Document with ID: '${doc?.id}' in collection: '${collectionSlug}' has been deleted, deleting from Stripe...`,\n    )\n\n  if (process.env.NODE_ENV !== 'test') {\n    if (logs) payload.logger.info(`- Deleting Stripe document with ID: '${doc.stripeID}'...`)\n\n    const syncConfig = sync?.find((conf) => conf.collection === collectionSlug)\n\n    if (syncConfig) {\n      try {\n        const found = await stripe?.[syncConfig.stripeResourceType]?.retrieve(doc.stripeID)\n\n        if (found) {\n          await stripe?.[syncConfig.stripeResourceType]?.del(doc.stripeID)\n          if (logs)\n            payload.logger.info(\n              `âœ… Successfully deleted Stripe document with ID: '${doc.stripeID}'.`,\n            )\n        } else {\n          if (logs)\n            payload.logger.info(\n              `- Stripe document with ID: '${doc.stripeID}' not found, skipping...`,\n            )\n        }\n      } catch (error: unknown) {\n        const msg = error instanceof Error ? error.message : error\n        throw new APIError(`Failed to delete Stripe document with ID: '${doc.stripeID}': ${msg}`)\n      }\n    }\n  }\n}\n"],"names":["APIError","Stripe","stripeSecretKey","process","env","STRIPE_SECRET_KEY","stripe","apiVersion","deleteFromStripe","args","collection","doc","pluginConfig","req","logs","sync","payload","slug","collectionSlug","logger","info","id","NODE_ENV","stripeID","syncConfig","find","conf","found","stripeResourceType","retrieve","del","error","msg","Error","message"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,UAAS;AAClC,OAAOC,YAAY,SAAQ;AAI3B,MAAMC,kBAAkBC,QAAQC,GAAG,CAACC,iBAAiB;AACrD,uEAAuE;AACvE,MAAMC,SAAS,IAAIL,OAAOC,mBAAmB,IAAI;IAAEK,YAAY;AAAa;AAa5E,OAAO,MAAMC,mBAAsD,OAAOC;IACxE,MAAM,EAAEC,UAAU,EAAEC,GAAG,EAAEC,YAAY,EAAEC,GAAG,EAAE,GAAGJ;IAE/C,MAAM,EAAEK,IAAI,EAAEC,IAAI,EAAE,GAAGH,gBAAgB,CAAC;IAExC,MAAM,EAAEI,OAAO,EAAE,GAAGH;IACpB,MAAM,EAAEI,MAAMC,cAAc,EAAE,GAAGR,cAAc,CAAC;IAEhD,IAAII,MACFE,QAAQG,MAAM,CAACC,IAAI,CACjB,CAAC,mBAAmB,EAAET,KAAKU,GAAG,kBAAkB,EAAEH,eAAe,2CAA2C,CAAC;IAGjH,IAAIf,QAAQC,GAAG,CAACkB,QAAQ,KAAK,QAAQ;QACnC,IAAIR,MAAME,QAAQG,MAAM,CAACC,IAAI,CAAC,CAAC,qCAAqC,EAAET,IAAIY,QAAQ,CAAC,IAAI,CAAC;QAExF,MAAMC,aAAaT,MAAMU,KAAK,CAACC,OAASA,KAAKhB,UAAU,KAAKQ;QAE5D,IAAIM,YAAY;YACd,IAAI;gBACF,MAAMG,QAAQ,MAAMrB,QAAQ,CAACkB,WAAWI,kBAAkB,CAAC,EAAEC,SAASlB,IAAIY,QAAQ;gBAElF,IAAII,OAAO;oBACT,MAAMrB,QAAQ,CAACkB,WAAWI,kBAAkB,CAAC,EAAEE,IAAInB,IAAIY,QAAQ;oBAC/D,IAAIT,MACFE,QAAQG,MAAM,CAACC,IAAI,CACjB,CAAC,iDAAiD,EAAET,IAAIY,QAAQ,CAAC,EAAE,CAAC;gBAE1E,OAAO;oBACL,IAAIT,MACFE,QAAQG,MAAM,CAACC,IAAI,CACjB,CAAC,4BAA4B,EAAET,IAAIY,QAAQ,CAAC,wBAAwB,CAAC;gBAE3E;YACF,EAAE,OAAOQ,OAAgB;gBACvB,MAAMC,MAAMD,iBAAiBE,QAAQF,MAAMG,OAAO,GAAGH;gBACrD,MAAM,IAAI/B,SAAS,CAAC,2CAA2C,EAAEW,IAAIY,QAAQ,CAAC,GAAG,EAAES,IAAI,CAAC;YAC1F;QACF;IACF;AACF,EAAC"}