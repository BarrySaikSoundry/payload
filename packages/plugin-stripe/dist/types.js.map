{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { Payload, Config as PayloadConfig, PayloadRequest } from 'payload'\nimport type Stripe from 'stripe'\n\nexport type StripeWebhookHandler<T = any> = (args: {\n  config: PayloadConfig\n  event: T\n  payload: Payload\n  pluginConfig?: StripePluginConfig\n  req: PayloadRequest\n  stripe: Stripe\n}) => void\n\nexport type StripeWebhookHandlers = {\n  [webhookName: string]: StripeWebhookHandler\n}\n\nexport type FieldSyncConfig = {\n  fieldPath: string\n  stripeProperty: string\n}\n\nexport type SyncConfig = {\n  collection: string\n  fields: FieldSyncConfig[]\n  stripeResourceType: 'customers' | 'products' // TODO: get this from Stripe types\n  stripeResourceTypeSingular: 'customer' | 'product' // TODO: there must be a better way to do this\n}\n\nexport type StripePluginConfig = {\n  isTestKey?: boolean\n  logs?: boolean\n  /** @default false */\n  rest?: boolean\n  stripeSecretKey: string\n  stripeWebhooksEndpointSecret?: string\n  sync?: SyncConfig[]\n  webhooks?: StripeWebhookHandler | StripeWebhookHandlers\n}\n\nexport type SanitizedStripePluginConfig = {\n  sync: SyncConfig[] // convert to required\n} & StripePluginConfig\n\nexport type StripeProxy = (args: {\n  stripeArgs: any[]\n  stripeMethod: string\n  stripeSecretKey: string\n}) => Promise<{\n  data?: any\n  message?: string\n  status: number\n}>\n"],"names":[],"mappings":"AA2CA,WAQE"}