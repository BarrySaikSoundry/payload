{"version":3,"sources":["../../../src/resolvers/collections/duplicate.ts"],"sourcesContent":["import type { Collection, CollectionSlug, DataFromCollectionSlug, PayloadRequest } from 'payload'\n\nimport { duplicateOperation, isolateObjectProperty } from 'payload'\n\nimport type { Context } from '../types.js'\n\nexport type Resolver<TData> = (\n  _: unknown,\n  args: {\n    draft: boolean\n    fallbackLocale?: string\n    id: string\n    locale?: string\n  },\n  context: {\n    req: PayloadRequest\n  },\n) => Promise<TData>\n\nexport default function duplicateResolver<TSlug extends CollectionSlug>(\n  collection: Collection,\n): Resolver<DataFromCollectionSlug<TSlug>> {\n  return async function resolver(_, args, context: Context) {\n    const { req } = context\n    const locale = req.locale\n    const fallbackLocale = req.fallbackLocale\n    req.locale = args.locale || locale\n    req.fallbackLocale = args.fallbackLocale || fallbackLocale\n    context.req = req\n\n    const options = {\n      id: args.id,\n      collection,\n      depth: 0,\n      draft: args.draft,\n      req: isolateObjectProperty(req, 'transactionID'),\n    }\n\n    const result = await duplicateOperation(options)\n\n    return result\n  }\n}\n"],"names":["duplicateOperation","isolateObjectProperty","duplicateResolver","collection","resolver","_","args","context","req","locale","fallbackLocale","options","id","depth","draft","result"],"mappings":"AAEA,SAASA,kBAAkB,EAAEC,qBAAqB,QAAQ,UAAS;AAiBnE,eAAe,SAASC,kBACtBC,UAAsB;IAEtB,OAAO,eAAeC,SAASC,CAAC,EAAEC,IAAI,EAAEC,OAAgB;QACtD,MAAM,EAAEC,GAAG,EAAE,GAAGD;QAChB,MAAME,SAASD,IAAIC,MAAM;QACzB,MAAMC,iBAAiBF,IAAIE,cAAc;QACzCF,IAAIC,MAAM,GAAGH,KAAKG,MAAM,IAAIA;QAC5BD,IAAIE,cAAc,GAAGJ,KAAKI,cAAc,IAAIA;QAC5CH,QAAQC,GAAG,GAAGA;QAEd,MAAMG,UAAU;YACdC,IAAIN,KAAKM,EAAE;YACXT;YACAU,OAAO;YACPC,OAAOR,KAAKQ,KAAK;YACjBN,KAAKP,sBAAsBO,KAAK;QAClC;QAEA,MAAMO,SAAS,MAAMf,mBAAmBW;QAExC,OAAOI;IACT;AACF"}