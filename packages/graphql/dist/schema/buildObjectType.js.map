{"version":3,"sources":["../../src/schema/buildObjectType.ts"],"sourcesContent":["import type { GraphQLFieldConfig, GraphQLType } from 'graphql'\nimport type {\n  ArrayField,\n  BlockField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GraphQLInfo,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextAdapter,\n  RichTextField,\n  RowField,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextField,\n  TextareaField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n  GraphQLUnionType,\n} from 'graphql'\nimport { DateTimeResolver, EmailAddressResolver } from 'graphql-scalars'\nimport { MissingEditorProp, createDataloaderCacheKey, toWords } from 'payload'\nimport { tabHasName } from 'payload/shared'\n\nimport type { Context } from '../resolvers/types.js'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport combineParentName from '../utilities/combineParentName.js'\nimport formatName from '../utilities/formatName.js'\nimport formatOptions from '../utilities/formatOptions.js'\nimport buildWhereInputType from './buildWhereInputType.js'\nimport isFieldNullable from './isFieldNullable.js'\nimport withNullableType from './withNullableType.js'\n\ntype LocaleInputType = {\n  fallbackLocale: {\n    type: GraphQLType\n  }\n  locale: {\n    type: GraphQLType\n  }\n  where: {\n    type: GraphQLType\n  }\n}\n\nexport type ObjectTypeConfig = {\n  [path: string]: GraphQLFieldConfig<any, any>\n}\n\ntype Args = {\n  baseFields?: ObjectTypeConfig\n  config: SanitizedConfig\n  fields: Field[]\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  name: string\n  parentName: string\n}\n\nexport function buildObjectType({\n  name,\n  baseFields = {},\n  config,\n  fields,\n  forceNullable,\n  graphqlResult,\n  parentName,\n}: Args): GraphQLObjectType {\n  const fieldToSchemaMap = {\n    array: (objectTypeConfig: ObjectTypeConfig, field: ArrayField) => {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.arrayTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable(field, forceNullable),\n          graphqlResult,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.arrayTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.arrayTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      const arrayType = new GraphQLList(\n        new GraphQLNonNull(graphqlResult.types.arrayTypes[interfaceName]),\n      )\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type: withNullableType(field, arrayType) },\n      }\n    },\n    blocks: (objectTypeConfig: ObjectTypeConfig, field: BlockField) => {\n      const blockTypes: GraphQLObjectType<any, any>[] = field.blocks.reduce((acc, block) => {\n        if (!graphqlResult.types.blockTypes[block.slug]) {\n          const interfaceName =\n            block?.interfaceName || block?.graphQL?.singularName || toWords(block.slug, true)\n\n          const objectType = buildObjectType({\n            name: interfaceName,\n            config,\n            fields: [\n              ...block.fields,\n              {\n                name: 'blockType',\n                type: 'text',\n              },\n            ],\n            forceNullable,\n            graphqlResult,\n            parentName: interfaceName,\n          })\n\n          if (Object.keys(objectType.getFields()).length) {\n            graphqlResult.types.blockTypes[block.slug] = objectType\n          }\n        }\n\n        if (graphqlResult.types.blockTypes[block.slug]) {\n          acc.push(graphqlResult.types.blockTypes[block.slug])\n        }\n\n        return acc\n      }, [])\n\n      if (blockTypes.length === 0) {\n        return objectTypeConfig\n      }\n\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n\n      const type = new GraphQLList(\n        new GraphQLNonNull(\n          new GraphQLUnionType({\n            name: fullName,\n            resolveType: (data) => graphqlResult.types.blockTypes[data.blockType].name,\n            types: blockTypes,\n          }),\n        ),\n      )\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type: withNullableType(field, type) },\n      }\n    },\n    checkbox: (objectTypeConfig: ObjectTypeConfig, field: CheckboxField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLBoolean, forceNullable) },\n    }),\n    code: (objectTypeConfig: ObjectTypeConfig, field: CodeField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    collapsible: (objectTypeConfig: ObjectTypeConfig, field: CollapsibleField) =>\n      field.fields.reduce((objectTypeConfigWithCollapsibleFields, subField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) return addSubField(objectTypeConfigWithCollapsibleFields, subField)\n        return objectTypeConfigWithCollapsibleFields\n      }, objectTypeConfig),\n    date: (objectTypeConfig: ObjectTypeConfig, field: DateField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, DateTimeResolver, forceNullable) },\n    }),\n    email: (objectTypeConfig: ObjectTypeConfig, field: EmailField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, EmailAddressResolver, forceNullable) },\n    }),\n    group: (objectTypeConfig: ObjectTypeConfig, field: GroupField) => {\n      const interfaceName =\n        field?.interfaceName || combineParentName(parentName, toWords(field.name, true))\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        const objectType = buildObjectType({\n          name: interfaceName,\n          config,\n          fields: field.fields,\n          forceNullable: isFieldNullable(field, forceNullable),\n          graphqlResult,\n          parentName: interfaceName,\n        })\n\n        if (Object.keys(objectType.getFields()).length) {\n          graphqlResult.types.groupTypes[interfaceName] = objectType\n        }\n      }\n\n      if (!graphqlResult.types.groupTypes[interfaceName]) {\n        return objectTypeConfig\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type: graphqlResult.types.groupTypes[interfaceName] },\n      }\n    },\n    json: (objectTypeConfig: ObjectTypeConfig, field: JSONField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    number: (objectTypeConfig: ObjectTypeConfig, field: NumberField) => {\n      const type = field?.name === 'id' ? GraphQLInt : GraphQLFloat\n      return {\n        ...objectTypeConfig,\n        [field.name]: {\n          type: withNullableType(\n            field,\n            field?.hasMany === true ? new GraphQLList(type) : type,\n            forceNullable,\n          ),\n        },\n      }\n    },\n    point: (objectTypeConfig: ObjectTypeConfig, field: PointField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          new GraphQLList(new GraphQLNonNull(GraphQLFloat)),\n          forceNullable,\n        ),\n      },\n    }),\n    radio: (objectTypeConfig: ObjectTypeConfig, field: RadioField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          new GraphQLEnumType({\n            name: combineParentName(parentName, field.name),\n            values: formatOptions(field),\n          }),\n          forceNullable,\n        ),\n      },\n    }),\n    relationship: (objectTypeConfig: ObjectTypeConfig, field: RelationshipField) => {\n      const { relationTo } = field\n      const isRelatedToManyCollections = Array.isArray(relationTo)\n      const hasManyValues = field.hasMany\n      const relationshipName = combineParentName(parentName, toWords(field.name, true))\n\n      let type\n      let relationToType = null\n\n      if (Array.isArray(relationTo)) {\n        relationToType = new GraphQLEnumType({\n          name: `${relationshipName}_RelationTo`,\n          values: relationTo.reduce(\n            (relations, relation) => ({\n              ...relations,\n              [formatName(relation)]: {\n                value: relation,\n              },\n            }),\n            {},\n          ),\n        })\n\n        const types = relationTo.map((relation) => graphqlResult.collections[relation].graphQL.type)\n\n        type = new GraphQLObjectType({\n          name: `${relationshipName}_Relationship`,\n          fields: {\n            relationTo: {\n              type: relationToType,\n            },\n            value: {\n              type: new GraphQLUnionType({\n                name: relationshipName,\n                resolveType(data, { req }) {\n                  return graphqlResult.collections[data.collection].graphQL.type.name\n                },\n                types,\n              }),\n            },\n          },\n        })\n      } else {\n        ;({ type } = graphqlResult.collections[relationTo].graphQL)\n      }\n\n      // If the relationshipType is undefined at this point,\n      // it can be assumed that this blockType can have a relationship\n      // to itself. Therefore, we set the relationshipType equal to the blockType\n      // that is currently being created.\n\n      type = type || newlyCreatedBlockType\n\n      const relationshipArgs: {\n        draft?: unknown\n        fallbackLocale?: unknown\n        limit?: unknown\n        locale?: unknown\n        page?: unknown\n        where?: unknown\n      } = {}\n\n      const relationsUseDrafts = (Array.isArray(relationTo) ? relationTo : [relationTo]).some(\n        (relation) => graphqlResult.collections[relation].config.versions?.drafts,\n      )\n\n      if (relationsUseDrafts) {\n        relationshipArgs.draft = {\n          type: GraphQLBoolean,\n        }\n      }\n\n      if (config.localization) {\n        relationshipArgs.locale = {\n          type: graphqlResult.types.localeInputType,\n        }\n\n        relationshipArgs.fallbackLocale = {\n          type: graphqlResult.types.fallbackLocaleInputType,\n        }\n      }\n\n      const relationship = {\n        type: withNullableType(\n          field,\n          hasManyValues ? new GraphQLList(new GraphQLNonNull(type)) : type,\n          forceNullable,\n        ),\n        args: relationshipArgs,\n        extensions: { complexity: 10 },\n        async resolve(parent, args, context: Context) {\n          const value = parent[field.name]\n          const locale = args.locale || context.req.locale\n          const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n          let relatedCollectionSlug = field.relationTo\n          const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n          if (hasManyValues) {\n            const results = []\n            const resultPromises = []\n\n            const createPopulationPromise = async (relatedDoc, i) => {\n              let id = relatedDoc\n              let collectionSlug = field.relationTo\n\n              if (isRelatedToManyCollections) {\n                collectionSlug = relatedDoc.relationTo\n                id = relatedDoc.value\n              }\n\n              const result = await context.req.payloadDataLoader.load(\n                createDataloaderCacheKey({\n                  collectionSlug: collectionSlug as string,\n                  currentDepth: 0,\n                  depth: 0,\n                  docID: id,\n                  draft,\n                  fallbackLocale,\n                  locale,\n                  overrideAccess: false,\n                  showHiddenFields: false,\n                  transactionID: context.req.transactionID,\n                }),\n              )\n\n              if (result) {\n                if (isRelatedToManyCollections) {\n                  results[i] = {\n                    relationTo: collectionSlug,\n                    value: {\n                      ...result,\n                      collection: collectionSlug,\n                    },\n                  }\n                } else {\n                  results[i] = result\n                }\n              }\n            }\n\n            if (value) {\n              value.forEach((relatedDoc, i) => {\n                resultPromises.push(createPopulationPromise(relatedDoc, i))\n              })\n            }\n\n            await Promise.all(resultPromises)\n            return results\n          }\n\n          let id = value\n          if (isRelatedToManyCollections && value) {\n            id = value.value\n            relatedCollectionSlug = value.relationTo\n          }\n\n          if (id) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug as string,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            if (relatedDocument) {\n              if (isRelatedToManyCollections) {\n                return {\n                  relationTo: relatedCollectionSlug,\n                  value: {\n                    ...relatedDocument,\n                    collection: relatedCollectionSlug,\n                  },\n                }\n              }\n\n              return relatedDocument\n            }\n\n            return null\n          }\n\n          return null\n        },\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: relationship,\n      }\n    },\n    richText: (objectTypeConfig: ObjectTypeConfig, field: RichTextField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(field, GraphQLJSON, forceNullable),\n        args: {\n          depth: {\n            type: GraphQLInt,\n          },\n        },\n        async resolve(parent, args, context: Context) {\n          let depth = config.defaultDepth\n          if (typeof args.depth !== 'undefined') depth = args.depth\n          if (!field?.editor) {\n            throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n          }\n\n          if (typeof field?.editor === 'function') {\n            throw new Error('Attempted to access unsanitized rich text editor.')\n          }\n\n          const editor: RichTextAdapter = field?.editor\n\n          // RichText fields have their own depth argument in GraphQL.\n          // This is why the populationPromise (which populates richtext fields like uploads and relationships)\n          // is run here again, with the provided depth.\n          // In the graphql find.ts resolver, the depth is then hard-coded to 0.\n          // Effectively, this means that the populationPromise for GraphQL is only run here, and not in the find.ts resolver / normal population promise.\n          if (editor?.graphQLPopulationPromises) {\n            const fieldPromises = []\n            const populationPromises = []\n            const populateDepth =\n              field?.maxDepth !== undefined && field?.maxDepth < depth ? field?.maxDepth : depth\n\n            editor?.graphQLPopulationPromises({\n              context,\n              depth: populateDepth,\n              draft: args.draft,\n              field,\n              fieldPromises,\n              findMany: false,\n              flattenLocales: false,\n              overrideAccess: false,\n              populationPromises,\n              req: context.req,\n              showHiddenFields: false,\n              siblingDoc: parent,\n            })\n            await Promise.all(fieldPromises)\n            await Promise.all(populationPromises)\n          }\n\n          return parent[field.name]\n        },\n      },\n    }),\n    row: (objectTypeConfig: ObjectTypeConfig, field: RowField) =>\n      field.fields.reduce((objectTypeConfigWithRowFields, subField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) return addSubField(objectTypeConfigWithRowFields, subField)\n        return objectTypeConfigWithRowFields\n      }, objectTypeConfig),\n    select: (objectTypeConfig: ObjectTypeConfig, field: SelectField) => {\n      const fullName = combineParentName(parentName, field.name)\n\n      let type: GraphQLType = new GraphQLEnumType({\n        name: fullName,\n        values: formatOptions(field),\n      })\n\n      type = field.hasMany ? new GraphQLList(new GraphQLNonNull(type)) : type\n      type = withNullableType(field, type, forceNullable)\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    tabs: (objectTypeConfig: ObjectTypeConfig, field: TabsField) =>\n      field.tabs.reduce((tabSchema, tab) => {\n        if (tabHasName(tab)) {\n          const interfaceName =\n            tab?.interfaceName || combineParentName(parentName, toWords(tab.name, true))\n\n          if (!graphqlResult.types.groupTypes[interfaceName]) {\n            const objectType = buildObjectType({\n              name: interfaceName,\n              config,\n              fields: tab.fields,\n              forceNullable,\n              graphqlResult,\n              parentName: interfaceName,\n            })\n\n            if (Object.keys(objectType.getFields()).length) {\n              graphqlResult.types.groupTypes[interfaceName] = objectType\n            }\n          }\n\n          if (!graphqlResult.types.groupTypes[interfaceName]) {\n            return tabSchema\n          }\n\n          return {\n            ...tabSchema,\n            [tab.name]: { type: graphqlResult.types.groupTypes[interfaceName] },\n          }\n        }\n\n        return {\n          ...tabSchema,\n          ...tab.fields.reduce((subFieldSchema, subField) => {\n            const addSubField = fieldToSchemaMap[subField.type]\n            if (addSubField) return addSubField(subFieldSchema, subField)\n            return subFieldSchema\n          }, tabSchema),\n        }\n      }, objectTypeConfig),\n    text: (objectTypeConfig: ObjectTypeConfig, field: TextField) => ({\n      ...objectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          field.hasMany === true ? new GraphQLList(GraphQLString) : GraphQLString,\n          forceNullable,\n        ),\n      },\n    }),\n    textarea: (objectTypeConfig: ObjectTypeConfig, field: TextareaField) => ({\n      ...objectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    upload: (objectTypeConfig: ObjectTypeConfig, field: UploadField) => {\n      const { relationTo } = field\n\n      const uploadName = combineParentName(parentName, toWords(field.name, true))\n\n      // If the relationshipType is undefined at this point,\n      // it can be assumed that this blockType can have a relationship\n      // to itself. Therefore, we set the relationshipType equal to the blockType\n      // that is currently being created.\n\n      const type = withNullableType(\n        field,\n        graphqlResult.collections[relationTo].graphQL.type || newlyCreatedBlockType,\n        forceNullable,\n      )\n\n      const uploadArgs = {} as LocaleInputType\n\n      if (config.localization) {\n        uploadArgs.locale = {\n          type: graphqlResult.types.localeInputType,\n        }\n\n        uploadArgs.fallbackLocale = {\n          type: graphqlResult.types.fallbackLocaleInputType,\n        }\n      }\n\n      const relatedCollectionSlug = field.relationTo\n\n      const upload = {\n        type,\n        args: uploadArgs,\n        extensions: { complexity: 20 },\n        async resolve(parent, args, context: Context) {\n          const value = parent[field.name]\n          const locale = args.locale || context.req.locale\n          const fallbackLocale = args.fallbackLocale || context.req.fallbackLocale\n          const id = value\n          const draft = Boolean(args.draft ?? context.req.query?.draft)\n\n          if (id) {\n            const relatedDocument = await context.req.payloadDataLoader.load(\n              createDataloaderCacheKey({\n                collectionSlug: relatedCollectionSlug,\n                currentDepth: 0,\n                depth: 0,\n                docID: id,\n                draft,\n                fallbackLocale,\n                locale,\n                overrideAccess: false,\n                showHiddenFields: false,\n                transactionID: context.req.transactionID,\n              }),\n            )\n\n            return relatedDocument || null\n          }\n\n          return null\n        },\n      }\n\n      const whereFields = graphqlResult.collections[relationTo].config.fields\n\n      upload.args.where = {\n        type: buildWhereInputType({\n          name: uploadName,\n          fields: whereFields,\n          parentName: uploadName,\n        }),\n      }\n\n      return {\n        ...objectTypeConfig,\n        [field.name]: upload,\n      }\n    },\n  }\n\n  const objectSchema = {\n    name,\n    fields: () =>\n      fields.reduce((objectTypeConfig, field) => {\n        const fieldSchema = fieldToSchemaMap[field.type]\n\n        if (typeof fieldSchema !== 'function') {\n          return objectTypeConfig\n        }\n\n        return {\n          ...objectTypeConfig,\n          ...fieldSchema(objectTypeConfig, field),\n        }\n      }, baseFields),\n  }\n\n  const newlyCreatedBlockType = new GraphQLObjectType(objectSchema)\n\n  return newlyCreatedBlockType\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLObjectType","GraphQLString","GraphQLUnionType","DateTimeResolver","EmailAddressResolver","MissingEditorProp","createDataloaderCacheKey","toWords","tabHasName","GraphQLJSON","combineParentName","formatName","formatOptions","buildWhereInputType","isFieldNullable","withNullableType","buildObjectType","name","baseFields","config","fields","forceNullable","graphqlResult","parentName","fieldToSchemaMap","array","objectTypeConfig","field","interfaceName","types","arrayTypes","objectType","Object","keys","getFields","length","arrayType","type","blocks","blockTypes","reduce","acc","block","slug","graphQL","singularName","push","fullName","resolveType","data","blockType","checkbox","code","collapsible","objectTypeConfigWithCollapsibleFields","subField","addSubField","date","email","group","groupTypes","json","number","hasMany","point","radio","values","relationship","relationTo","isRelatedToManyCollections","Array","isArray","hasManyValues","relationshipName","relationToType","relations","relation","value","map","collections","req","collection","newlyCreatedBlockType","relationshipArgs","relationsUseDrafts","some","versions","drafts","draft","localization","locale","localeInputType","fallbackLocale","fallbackLocaleInputType","args","extensions","complexity","resolve","parent","context","relatedCollectionSlug","Boolean","query","results","resultPromises","createPopulationPromise","relatedDoc","i","id","collectionSlug","result","payloadDataLoader","load","currentDepth","depth","docID","overrideAccess","showHiddenFields","transactionID","forEach","Promise","all","relatedDocument","richText","defaultDepth","editor","Error","graphQLPopulationPromises","fieldPromises","populationPromises","populateDepth","maxDepth","undefined","findMany","flattenLocales","siblingDoc","row","objectTypeConfigWithRowFields","select","tabs","tabSchema","tab","subFieldSchema","text","textarea","upload","uploadName","uploadArgs","whereFields","where","objectSchema","fieldSchema"],"mappings":"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"}