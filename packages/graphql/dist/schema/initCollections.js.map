{"version":3,"sources":["../../src/schema/initCollections.ts"],"sourcesContent":["import type {\n  Collection,\n  Field,\n  GraphQLInfo,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLInt,\n  GraphQLNonNull,\n  GraphQLObjectType,\n  GraphQLString,\n} from 'graphql'\nimport { buildVersionCollectionFields, flattenTopLevelFields, formatNames, toWords } from 'payload'\nimport { fieldAffectsData } from 'payload/shared'\n\nimport type { ObjectTypeConfig } from './buildObjectType.js'\n\nimport forgotPassword from '../resolvers/auth/forgotPassword.js'\nimport init from '../resolvers/auth/init.js'\nimport login from '../resolvers/auth/login.js'\nimport logout from '../resolvers/auth/logout.js'\nimport me from '../resolvers/auth/me.js'\nimport refresh from '../resolvers/auth/refresh.js'\nimport resetPassword from '../resolvers/auth/resetPassword.js'\nimport unlock from '../resolvers/auth/unlock.js'\nimport verifyEmail from '../resolvers/auth/verifyEmail.js'\nimport { countResolver } from '../resolvers/collections/count.js'\nimport createResolver from '../resolvers/collections/create.js'\nimport { getDeleteResolver } from '../resolvers/collections/delete.js'\nimport { docAccessResolver } from '../resolvers/collections/docAccess.js'\nimport duplicateResolver from '../resolvers/collections/duplicate.js'\nimport { findResolver } from '../resolvers/collections/find.js'\nimport { findByIDResolver } from '../resolvers/collections/findByID.js'\nimport { findVersionByIDResolver } from '../resolvers/collections/findVersionByID.js'\nimport { findVersionsResolver } from '../resolvers/collections/findVersions.js'\nimport restoreVersionResolver from '../resolvers/collections/restoreVersion.js'\nimport { updateResolver } from '../resolvers/collections/update.js'\nimport formatName from '../utilities/formatName.js'\nimport { buildMutationInputType, getCollectionIDType } from './buildMutationInputType.js'\nimport { buildObjectType } from './buildObjectType.js'\nimport { buildPaginatedListType } from './buildPaginatedListType.js'\nimport { buildPolicyType } from './buildPoliciesType.js'\nimport buildWhereInputType from './buildWhereInputType.js'\n\ntype InitCollectionsGraphQLArgs = {\n  config: SanitizedConfig\n  graphqlResult: GraphQLInfo\n}\nfunction initCollectionsGraphQL({ config, graphqlResult }: InitCollectionsGraphQLArgs): void {\n  Object.keys(graphqlResult.collections).forEach((slug) => {\n    const collection: Collection = graphqlResult.collections[slug]\n    const {\n      config: collectionConfig,\n      config: { fields, graphQL = {} as SanitizedCollectionConfig['graphQL'], versions },\n    } = collection\n\n    if (!graphQL) return\n\n    let singularName\n    let pluralName\n    const fromSlug = formatNames(collection.config.slug)\n    if (graphQL.singularName) {\n      singularName = toWords(graphQL.singularName, true)\n    } else {\n      singularName = fromSlug.singular\n    }\n    if (graphQL.pluralName) {\n      pluralName = toWords(graphQL.pluralName, true)\n    } else {\n      pluralName = fromSlug.plural\n    }\n\n    // For collections named 'Media' or similar,\n    // there is a possibility that the singular name\n    // will equal the plural name. Append `all` to the beginning\n    // of potential conflicts\n    if (singularName === pluralName) {\n      pluralName = `all${singularName}`\n    }\n\n    collection.graphQL = {} as Collection['graphQL']\n\n    const hasIDField =\n      flattenTopLevelFields(fields).findIndex(\n        (field) => fieldAffectsData(field) && field.name === 'id',\n      ) > -1\n\n    const idType = getCollectionIDType(config.db.defaultIDType, collectionConfig)\n\n    const baseFields: ObjectTypeConfig = {}\n\n    const whereInputFields = [...fields]\n\n    if (!hasIDField) {\n      baseFields.id = { type: idType }\n      whereInputFields.push({\n        name: 'id',\n        type: config.db.defaultIDType as 'text',\n      })\n    }\n\n    const forceNullableObjectType = Boolean(versions?.drafts)\n\n    collection.graphQL.type = buildObjectType({\n      name: singularName,\n      baseFields,\n      config,\n      fields,\n      forceNullable: forceNullableObjectType,\n      graphqlResult,\n      parentName: singularName,\n    })\n\n    collection.graphQL.paginatedType = buildPaginatedListType(pluralName, collection.graphQL.type)\n\n    collection.graphQL.whereInputType = buildWhereInputType({\n      name: singularName,\n      fields: whereInputFields,\n      parentName: singularName,\n    })\n\n    if (collectionConfig.auth && !collectionConfig.auth.disableLocalStrategy) {\n      fields.push({\n        name: 'password',\n        type: 'text',\n        label: 'Password',\n        required: true,\n      })\n    }\n\n    const createMutationInputType = buildMutationInputType({\n      name: singularName,\n      config,\n      fields,\n      graphqlResult,\n      parentName: singularName,\n    })\n    if (createMutationInputType) {\n      collection.graphQL.mutationInputType = new GraphQLNonNull(createMutationInputType)\n    }\n\n    const updateMutationInputType = buildMutationInputType({\n      name: `${singularName}Update`,\n      config,\n      fields: fields.filter((field) => !(fieldAffectsData(field) && field.name === 'id')),\n      forceNullable: true,\n      graphqlResult,\n      parentName: `${singularName}Update`,\n    })\n    if (updateMutationInputType) {\n      collection.graphQL.updateMutationInputType = new GraphQLNonNull(updateMutationInputType)\n    }\n\n    graphqlResult.Query.fields[singularName] = {\n      type: collection.graphQL.type,\n      args: {\n        id: { type: new GraphQLNonNull(idType) },\n        draft: { type: GraphQLBoolean },\n        ...(config.localization\n          ? {\n              fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: findByIDResolver(collection),\n    }\n\n    graphqlResult.Query.fields[pluralName] = {\n      type: buildPaginatedListType(pluralName, collection.graphQL.type),\n      args: {\n        draft: { type: GraphQLBoolean },\n        where: { type: collection.graphQL.whereInputType },\n        ...(config.localization\n          ? {\n              fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n        limit: { type: GraphQLInt },\n        page: { type: GraphQLInt },\n        sort: { type: GraphQLString },\n      },\n      resolve: findResolver(collection),\n    }\n\n    graphqlResult.Query.fields[`count${pluralName}`] = {\n      type: new GraphQLObjectType({\n        name: `count${pluralName}`,\n        fields: {\n          totalDocs: { type: GraphQLInt },\n        },\n      }),\n      args: {\n        draft: { type: GraphQLBoolean },\n        where: { type: collection.graphQL.whereInputType },\n        ...(config.localization\n          ? {\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: countResolver(collection),\n    }\n\n    graphqlResult.Query.fields[`docAccess${singularName}`] = {\n      type: buildPolicyType({\n        type: 'collection',\n        entity: collectionConfig,\n        scope: 'docAccess',\n        typeSuffix: 'DocAccess',\n      }),\n      args: {\n        id: { type: new GraphQLNonNull(idType) },\n      },\n      resolve: docAccessResolver(collection),\n    }\n\n    graphqlResult.Mutation.fields[`create${singularName}`] = {\n      type: collection.graphQL.type,\n      args: {\n        ...(createMutationInputType\n          ? { data: { type: collection.graphQL.mutationInputType } }\n          : {}),\n        draft: { type: GraphQLBoolean },\n        ...(config.localization\n          ? {\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: createResolver(collection),\n    }\n\n    graphqlResult.Mutation.fields[`update${singularName}`] = {\n      type: collection.graphQL.type,\n      args: {\n        id: { type: new GraphQLNonNull(idType) },\n        autosave: { type: GraphQLBoolean },\n        ...(updateMutationInputType\n          ? { data: { type: collection.graphQL.updateMutationInputType } }\n          : {}),\n        draft: { type: GraphQLBoolean },\n        ...(config.localization\n          ? {\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: updateResolver(collection),\n    }\n\n    graphqlResult.Mutation.fields[`delete${singularName}`] = {\n      type: collection.graphQL.type,\n      args: {\n        id: { type: new GraphQLNonNull(idType) },\n      },\n      resolve: getDeleteResolver(collection),\n    }\n\n    if (collectionConfig.disableDuplicate !== true) {\n      graphqlResult.Mutation.fields[`duplicate${singularName}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: new GraphQLNonNull(idType) },\n        },\n        resolve: duplicateResolver(collection),\n      }\n    }\n\n    if (collectionConfig.versions) {\n      const versionIDType = config.db.defaultIDType === 'text' ? GraphQLString : GraphQLInt\n      const versionCollectionFields: Field[] = [\n        ...buildVersionCollectionFields(collectionConfig),\n        {\n          name: 'id',\n          type: config.db.defaultIDType as 'text',\n        },\n        {\n          name: 'createdAt',\n          type: 'date',\n          label: 'Created At',\n        },\n        {\n          name: 'updatedAt',\n          type: 'date',\n          label: 'Updated At',\n        },\n      ]\n\n      collection.graphQL.versionType = buildObjectType({\n        name: `${singularName}Version`,\n        config,\n        fields: versionCollectionFields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: `${singularName}Version`,\n      })\n\n      graphqlResult.Query.fields[`version${formatName(singularName)}`] = {\n        type: collection.graphQL.versionType,\n        args: {\n          id: { type: versionIDType },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: findVersionByIDResolver(collection),\n      }\n      graphqlResult.Query.fields[`versions${pluralName}`] = {\n        type: buildPaginatedListType(\n          `versions${formatName(pluralName)}`,\n          collection.graphQL.versionType,\n        ),\n        args: {\n          where: {\n            type: buildWhereInputType({\n              name: `versions${singularName}`,\n              fields: versionCollectionFields,\n              parentName: `versions${singularName}`,\n            }),\n          },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          limit: { type: GraphQLInt },\n          page: { type: GraphQLInt },\n          sort: { type: GraphQLString },\n        },\n        resolve: findVersionsResolver(collection),\n      }\n      graphqlResult.Mutation.fields[`restoreVersion${formatName(singularName)}`] = {\n        type: collection.graphQL.type,\n        args: {\n          id: { type: versionIDType },\n        },\n        resolve: restoreVersionResolver(collection),\n      }\n    }\n\n    if (collectionConfig.auth) {\n      const authFields: Field[] = collectionConfig.auth.disableLocalStrategy\n        ? []\n        : [\n            {\n              name: 'email',\n              type: 'email',\n              required: true,\n            },\n          ]\n      collection.graphQL.JWT = buildObjectType({\n        name: formatName(`${slug}JWT`),\n        config,\n        fields: [\n          ...collectionConfig.fields.filter((field) => fieldAffectsData(field) && field.saveToJWT),\n          ...authFields,\n          {\n            name: 'collection',\n            type: 'text',\n            required: true,\n          },\n        ],\n        graphqlResult,\n        parentName: formatName(`${slug}JWT`),\n      })\n\n      graphqlResult.Query.fields[`me${singularName}`] = {\n        type: new GraphQLObjectType({\n          name: formatName(`${slug}Me`),\n          fields: {\n            collection: {\n              type: GraphQLString,\n            },\n            exp: {\n              type: GraphQLInt,\n            },\n            strategy: {\n              type: GraphQLString,\n            },\n            token: {\n              type: GraphQLString,\n            },\n            user: {\n              type: collection.graphQL.type,\n            },\n          },\n        }),\n        resolve: me(collection),\n      }\n\n      graphqlResult.Query.fields[`initialized${singularName}`] = {\n        type: GraphQLBoolean,\n        resolve: init(collection.config.slug),\n      }\n\n      graphqlResult.Mutation.fields[`refreshToken${singularName}`] = {\n        type: new GraphQLObjectType({\n          name: formatName(`${slug}Refreshed${singularName}`),\n          fields: {\n            exp: {\n              type: GraphQLInt,\n            },\n            refreshedToken: {\n              type: GraphQLString,\n            },\n            strategy: {\n              type: GraphQLString,\n            },\n            user: {\n              type: collection.graphQL.JWT,\n            },\n          },\n        }),\n        resolve: refresh(collection),\n      }\n\n      graphqlResult.Mutation.fields[`logout${singularName}`] = {\n        type: GraphQLString,\n        resolve: logout(collection),\n      }\n\n      if (!collectionConfig.auth.disableLocalStrategy) {\n        if (collectionConfig.auth.maxLoginAttempts > 0) {\n          graphqlResult.Mutation.fields[`unlock${singularName}`] = {\n            type: new GraphQLNonNull(GraphQLBoolean),\n            args: {\n              email: { type: new GraphQLNonNull(GraphQLString) },\n            },\n            resolve: unlock(collection),\n          }\n        }\n\n        graphqlResult.Mutation.fields[`login${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}LoginResult`),\n            fields: {\n              exp: {\n                type: GraphQLInt,\n              },\n              token: {\n                type: GraphQLString,\n              },\n              user: {\n                type: collection.graphQL.type,\n              },\n            },\n          }),\n          args: {\n            email: { type: GraphQLString },\n            password: { type: GraphQLString },\n            username: { type: GraphQLString },\n          },\n          resolve: login(collection),\n        }\n\n        graphqlResult.Mutation.fields[`forgotPassword${singularName}`] = {\n          type: new GraphQLNonNull(GraphQLBoolean),\n          args: {\n            disableEmail: { type: GraphQLBoolean },\n            email: { type: new GraphQLNonNull(GraphQLString) },\n            expiration: { type: GraphQLInt },\n          },\n          resolve: forgotPassword(collection),\n        }\n\n        graphqlResult.Mutation.fields[`resetPassword${singularName}`] = {\n          type: new GraphQLObjectType({\n            name: formatName(`${slug}ResetPassword`),\n            fields: {\n              token: { type: GraphQLString },\n              user: { type: collection.graphQL.type },\n            },\n          }),\n          args: {\n            password: { type: GraphQLString },\n            token: { type: GraphQLString },\n          },\n          resolve: resetPassword(collection),\n        }\n\n        graphqlResult.Mutation.fields[`verifyEmail${singularName}`] = {\n          type: GraphQLBoolean,\n          args: {\n            token: { type: GraphQLString },\n          },\n          resolve: verifyEmail(collection),\n        }\n      }\n    }\n  })\n}\n\nexport default initCollectionsGraphQL\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLNonNull","GraphQLObjectType","GraphQLString","buildVersionCollectionFields","flattenTopLevelFields","formatNames","toWords","fieldAffectsData","forgotPassword","init","login","logout","me","refresh","resetPassword","unlock","verifyEmail","countResolver","createResolver","getDeleteResolver","docAccessResolver","duplicateResolver","findResolver","findByIDResolver","findVersionByIDResolver","findVersionsResolver","restoreVersionResolver","updateResolver","formatName","buildMutationInputType","getCollectionIDType","buildObjectType","buildPaginatedListType","buildPolicyType","buildWhereInputType","initCollectionsGraphQL","config","graphqlResult","Object","keys","collections","forEach","slug","collection","collectionConfig","fields","graphQL","versions","singularName","pluralName","fromSlug","singular","plural","hasIDField","findIndex","field","name","idType","db","defaultIDType","baseFields","whereInputFields","id","type","push","forceNullableObjectType","Boolean","drafts","forceNullable","parentName","paginatedType","whereInputType","auth","disableLocalStrategy","label","required","createMutationInputType","mutationInputType","updateMutationInputType","filter","Query","args","draft","localization","fallbackLocale","types","fallbackLocaleInputType","locale","localeInputType","resolve","where","limit","page","sort","totalDocs","entity","scope","typeSuffix","Mutation","data","autosave","disableDuplicate","versionIDType","versionCollectionFields","versionType","authFields","JWT","saveToJWT","exp","strategy","token","user","refreshedToken","maxLoginAttempts","email","password","username","disableEmail","expiration"],"mappings":"AAQA,SACEA,cAAc,EACdC,UAAU,EACVC,cAAc,EACdC,iBAAiB,EACjBC,aAAa,QACR,UAAS;AAChB,SAASC,4BAA4B,EAAEC,qBAAqB,EAAEC,WAAW,EAAEC,OAAO,QAAQ,UAAS;AACnG,SAASC,gBAAgB,QAAQ,iBAAgB;AAIjD,OAAOC,oBAAoB,sCAAqC;AAChE,OAAOC,UAAU,4BAA2B;AAC5C,OAAOC,WAAW,6BAA4B;AAC9C,OAAOC,YAAY,8BAA6B;AAChD,OAAOC,QAAQ,0BAAyB;AACxC,OAAOC,aAAa,+BAA8B;AAClD,OAAOC,mBAAmB,qCAAoC;AAC9D,OAAOC,YAAY,8BAA6B;AAChD,OAAOC,iBAAiB,mCAAkC;AAC1D,SAASC,aAAa,QAAQ,oCAAmC;AACjE,OAAOC,oBAAoB,qCAAoC;AAC/D,SAASC,iBAAiB,QAAQ,qCAAoC;AACtE,SAASC,iBAAiB,QAAQ,wCAAuC;AACzE,OAAOC,uBAAuB,wCAAuC;AACrE,SAASC,YAAY,QAAQ,mCAAkC;AAC/D,SAASC,gBAAgB,QAAQ,uCAAsC;AACvE,SAASC,uBAAuB,QAAQ,8CAA6C;AACrF,SAASC,oBAAoB,QAAQ,2CAA0C;AAC/E,OAAOC,4BAA4B,6CAA4C;AAC/E,SAASC,cAAc,QAAQ,qCAAoC;AACnE,OAAOC,gBAAgB,6BAA4B;AACnD,SAASC,sBAAsB,EAAEC,mBAAmB,QAAQ,8BAA6B;AACzF,SAASC,eAAe,QAAQ,uBAAsB;AACtD,SAASC,sBAAsB,QAAQ,8BAA6B;AACpE,SAASC,eAAe,QAAQ,yBAAwB;AACxD,OAAOC,yBAAyB,2BAA0B;AAM1D,SAASC,uBAAuB,EAAEC,MAAM,EAAEC,aAAa,EAA8B;IACnFC,OAAOC,IAAI,CAACF,cAAcG,WAAW,EAAEC,OAAO,CAAC,CAACC;QAC9C,MAAMC,aAAyBN,cAAcG,WAAW,CAACE,KAAK;QAC9D,MAAM,EACJN,QAAQQ,gBAAgB,EACxBR,QAAQ,EAAES,MAAM,EAAEC,UAAU,CAAC,CAAyC,EAAEC,QAAQ,EAAE,EACnF,GAAGJ;QAEJ,IAAI,CAACG,SAAS;QAEd,IAAIE;QACJ,IAAIC;QACJ,MAAMC,WAAW7C,YAAYsC,WAAWP,MAAM,CAACM,IAAI;QACnD,IAAII,QAAQE,YAAY,EAAE;YACxBA,eAAe1C,QAAQwC,QAAQE,YAAY,EAAE;QAC/C,OAAO;YACLA,eAAeE,SAASC,QAAQ;QAClC;QACA,IAAIL,QAAQG,UAAU,EAAE;YACtBA,aAAa3C,QAAQwC,QAAQG,UAAU,EAAE;QAC3C,OAAO;YACLA,aAAaC,SAASE,MAAM;QAC9B;QAEA,4CAA4C;QAC5C,gDAAgD;QAChD,4DAA4D;QAC5D,yBAAyB;QACzB,IAAIJ,iBAAiBC,YAAY;YAC/BA,aAAa,CAAC,GAAG,EAAED,aAAa,CAAC;QACnC;QAEAL,WAAWG,OAAO,GAAG,CAAC;QAEtB,MAAMO,aACJjD,sBAAsByC,QAAQS,SAAS,CACrC,CAACC,QAAUhD,iBAAiBgD,UAAUA,MAAMC,IAAI,KAAK,QACnD,CAAC;QAEP,MAAMC,SAAS3B,oBAAoBM,OAAOsB,EAAE,CAACC,aAAa,EAAEf;QAE5D,MAAMgB,aAA+B,CAAC;QAEtC,MAAMC,mBAAmB;eAAIhB;SAAO;QAEpC,IAAI,CAACQ,YAAY;YACfO,WAAWE,EAAE,GAAG;gBAAEC,MAAMN;YAAO;YAC/BI,iBAAiBG,IAAI,CAAC;gBACpBR,MAAM;gBACNO,MAAM3B,OAAOsB,EAAE,CAACC,aAAa;YAC/B;QACF;QAEA,MAAMM,0BAA0BC,QAAQnB,UAAUoB;QAElDxB,WAAWG,OAAO,CAACiB,IAAI,GAAGhC,gBAAgB;YACxCyB,MAAMR;YACNY;YACAxB;YACAS;YACAuB,eAAeH;YACf5B;YACAgC,YAAYrB;QACd;QAEAL,WAAWG,OAAO,CAACwB,aAAa,GAAGtC,uBAAuBiB,YAAYN,WAAWG,OAAO,CAACiB,IAAI;QAE7FpB,WAAWG,OAAO,CAACyB,cAAc,GAAGrC,oBAAoB;YACtDsB,MAAMR;YACNH,QAAQgB;YACRQ,YAAYrB;QACd;QAEA,IAAIJ,iBAAiB4B,IAAI,IAAI,CAAC5B,iBAAiB4B,IAAI,CAACC,oBAAoB,EAAE;YACxE5B,OAAOmB,IAAI,CAAC;gBACVR,MAAM;gBACNO,MAAM;gBACNW,OAAO;gBACPC,UAAU;YACZ;QACF;QAEA,MAAMC,0BAA0B/C,uBAAuB;YACrD2B,MAAMR;YACNZ;YACAS;YACAR;YACAgC,YAAYrB;QACd;QACA,IAAI4B,yBAAyB;YAC3BjC,WAAWG,OAAO,CAAC+B,iBAAiB,GAAG,IAAI7E,eAAe4E;QAC5D;QAEA,MAAME,0BAA0BjD,uBAAuB;YACrD2B,MAAM,CAAC,EAAER,aAAa,MAAM,CAAC;YAC7BZ;YACAS,QAAQA,OAAOkC,MAAM,CAAC,CAACxB,QAAU,CAAEhD,CAAAA,iBAAiBgD,UAAUA,MAAMC,IAAI,KAAK,IAAG;YAChFY,eAAe;YACf/B;YACAgC,YAAY,CAAC,EAAErB,aAAa,MAAM,CAAC;QACrC;QACA,IAAI8B,yBAAyB;YAC3BnC,WAAWG,OAAO,CAACgC,uBAAuB,GAAG,IAAI9E,eAAe8E;QAClE;QAEAzC,cAAc2C,KAAK,CAACnC,MAAM,CAACG,aAAa,GAAG;YACzCe,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;YAC7BkB,MAAM;gBACJnB,IAAI;oBAAEC,MAAM,IAAI/D,eAAeyD;gBAAQ;gBACvCyB,OAAO;oBAAEnB,MAAMjE;gBAAe;gBAC9B,GAAIsC,OAAO+C,YAAY,GACnB;oBACEC,gBAAgB;wBAAErB,MAAM1B,cAAcgD,KAAK,CAACC,uBAAuB;oBAAC;oBACpEC,QAAQ;wBAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;oBAAC;gBACtD,IACA,CAAC,CAAC;YACR;YACAC,SAASlE,iBAAiBoB;QAC5B;QAEAN,cAAc2C,KAAK,CAACnC,MAAM,CAACI,WAAW,GAAG;YACvCc,MAAM/B,uBAAuBiB,YAAYN,WAAWG,OAAO,CAACiB,IAAI;YAChEkB,MAAM;gBACJC,OAAO;oBAAEnB,MAAMjE;gBAAe;gBAC9B4F,OAAO;oBAAE3B,MAAMpB,WAAWG,OAAO,CAACyB,cAAc;gBAAC;gBACjD,GAAInC,OAAO+C,YAAY,GACnB;oBACEC,gBAAgB;wBAAErB,MAAM1B,cAAcgD,KAAK,CAACC,uBAAuB;oBAAC;oBACpEC,QAAQ;wBAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;oBAAC;gBACtD,IACA,CAAC,CAAC;gBACNG,OAAO;oBAAE5B,MAAMhE;gBAAW;gBAC1B6F,MAAM;oBAAE7B,MAAMhE;gBAAW;gBACzB8F,MAAM;oBAAE9B,MAAM7D;gBAAc;YAC9B;YACAuF,SAASnE,aAAaqB;QACxB;QAEAN,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,KAAK,EAAEI,WAAW,CAAC,CAAC,GAAG;YACjDc,MAAM,IAAI9D,kBAAkB;gBAC1BuD,MAAM,CAAC,KAAK,EAAEP,WAAW,CAAC;gBAC1BJ,QAAQ;oBACNiD,WAAW;wBAAE/B,MAAMhE;oBAAW;gBAChC;YACF;YACAkF,MAAM;gBACJC,OAAO;oBAAEnB,MAAMjE;gBAAe;gBAC9B4F,OAAO;oBAAE3B,MAAMpB,WAAWG,OAAO,CAACyB,cAAc;gBAAC;gBACjD,GAAInC,OAAO+C,YAAY,GACnB;oBACEI,QAAQ;wBAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;oBAAC;gBACtD,IACA,CAAC,CAAC;YACR;YACAC,SAASxE,cAAc0B;QACzB;QAEAN,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,SAAS,EAAEG,aAAa,CAAC,CAAC,GAAG;YACvDe,MAAM9B,gBAAgB;gBACpB8B,MAAM;gBACNgC,QAAQnD;gBACRoD,OAAO;gBACPC,YAAY;YACd;YACAhB,MAAM;gBACJnB,IAAI;oBAAEC,MAAM,IAAI/D,eAAeyD;gBAAQ;YACzC;YACAgC,SAASrE,kBAAkBuB;QAC7B;QAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,MAAM,EAAEG,aAAa,CAAC,CAAC,GAAG;YACvDe,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;YAC7BkB,MAAM;gBACJ,GAAIL,0BACA;oBAAEuB,MAAM;wBAAEpC,MAAMpB,WAAWG,OAAO,CAAC+B,iBAAiB;oBAAC;gBAAE,IACvD,CAAC,CAAC;gBACNK,OAAO;oBAAEnB,MAAMjE;gBAAe;gBAC9B,GAAIsC,OAAO+C,YAAY,GACnB;oBACEI,QAAQ;wBAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;oBAAC;gBACtD,IACA,CAAC,CAAC;YACR;YACAC,SAASvE,eAAeyB;QAC1B;QAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,MAAM,EAAEG,aAAa,CAAC,CAAC,GAAG;YACvDe,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;YAC7BkB,MAAM;gBACJnB,IAAI;oBAAEC,MAAM,IAAI/D,eAAeyD;gBAAQ;gBACvC2C,UAAU;oBAAErC,MAAMjE;gBAAe;gBACjC,GAAIgF,0BACA;oBAAEqB,MAAM;wBAAEpC,MAAMpB,WAAWG,OAAO,CAACgC,uBAAuB;oBAAC;gBAAE,IAC7D,CAAC,CAAC;gBACNI,OAAO;oBAAEnB,MAAMjE;gBAAe;gBAC9B,GAAIsC,OAAO+C,YAAY,GACnB;oBACEI,QAAQ;wBAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;oBAAC;gBACtD,IACA,CAAC,CAAC;YACR;YACAC,SAAS9D,eAAegB;QAC1B;QAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,MAAM,EAAEG,aAAa,CAAC,CAAC,GAAG;YACvDe,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;YAC7BkB,MAAM;gBACJnB,IAAI;oBAAEC,MAAM,IAAI/D,eAAeyD;gBAAQ;YACzC;YACAgC,SAAStE,kBAAkBwB;QAC7B;QAEA,IAAIC,iBAAiByD,gBAAgB,KAAK,MAAM;YAC9ChE,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,SAAS,EAAEG,aAAa,CAAC,CAAC,GAAG;gBAC1De,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;gBAC7BkB,MAAM;oBACJnB,IAAI;wBAAEC,MAAM,IAAI/D,eAAeyD;oBAAQ;gBACzC;gBACAgC,SAASpE,kBAAkBsB;YAC7B;QACF;QAEA,IAAIC,iBAAiBG,QAAQ,EAAE;YAC7B,MAAMuD,gBAAgBlE,OAAOsB,EAAE,CAACC,aAAa,KAAK,SAASzD,gBAAgBH;YAC3E,MAAMwG,0BAAmC;mBACpCpG,6BAA6ByC;gBAChC;oBACEY,MAAM;oBACNO,MAAM3B,OAAOsB,EAAE,CAACC,aAAa;gBAC/B;gBACA;oBACEH,MAAM;oBACNO,MAAM;oBACNW,OAAO;gBACT;gBACA;oBACElB,MAAM;oBACNO,MAAM;oBACNW,OAAO;gBACT;aACD;YAED/B,WAAWG,OAAO,CAAC0D,WAAW,GAAGzE,gBAAgB;gBAC/CyB,MAAM,CAAC,EAAER,aAAa,OAAO,CAAC;gBAC9BZ;gBACAS,QAAQ0D;gBACRnC,eAAeH;gBACf5B;gBACAgC,YAAY,CAAC,EAAErB,aAAa,OAAO,CAAC;YACtC;YAEAX,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,OAAO,EAAEjB,WAAWoB,cAAc,CAAC,CAAC,GAAG;gBACjEe,MAAMpB,WAAWG,OAAO,CAAC0D,WAAW;gBACpCvB,MAAM;oBACJnB,IAAI;wBAAEC,MAAMuC;oBAAc;oBAC1B,GAAIlE,OAAO+C,YAAY,GACnB;wBACEC,gBAAgB;4BAAErB,MAAM1B,cAAcgD,KAAK,CAACC,uBAAuB;wBAAC;wBACpEC,QAAQ;4BAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;wBAAC;oBACtD,IACA,CAAC,CAAC;gBACR;gBACAC,SAASjE,wBAAwBmB;YACnC;YACAN,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,QAAQ,EAAEI,WAAW,CAAC,CAAC,GAAG;gBACpDc,MAAM/B,uBACJ,CAAC,QAAQ,EAAEJ,WAAWqB,YAAY,CAAC,EACnCN,WAAWG,OAAO,CAAC0D,WAAW;gBAEhCvB,MAAM;oBACJS,OAAO;wBACL3B,MAAM7B,oBAAoB;4BACxBsB,MAAM,CAAC,QAAQ,EAAER,aAAa,CAAC;4BAC/BH,QAAQ0D;4BACRlC,YAAY,CAAC,QAAQ,EAAErB,aAAa,CAAC;wBACvC;oBACF;oBACA,GAAIZ,OAAO+C,YAAY,GACnB;wBACEC,gBAAgB;4BAAErB,MAAM1B,cAAcgD,KAAK,CAACC,uBAAuB;wBAAC;wBACpEC,QAAQ;4BAAExB,MAAM1B,cAAcgD,KAAK,CAACG,eAAe;wBAAC;oBACtD,IACA,CAAC,CAAC;oBACNG,OAAO;wBAAE5B,MAAMhE;oBAAW;oBAC1B6F,MAAM;wBAAE7B,MAAMhE;oBAAW;oBACzB8F,MAAM;wBAAE9B,MAAM7D;oBAAc;gBAC9B;gBACAuF,SAAShE,qBAAqBkB;YAChC;YACAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,cAAc,EAAEjB,WAAWoB,cAAc,CAAC,CAAC,GAAG;gBAC3Ee,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;gBAC7BkB,MAAM;oBACJnB,IAAI;wBAAEC,MAAMuC;oBAAc;gBAC5B;gBACAb,SAAS/D,uBAAuBiB;YAClC;QACF;QAEA,IAAIC,iBAAiB4B,IAAI,EAAE;YACzB,MAAMiC,aAAsB7D,iBAAiB4B,IAAI,CAACC,oBAAoB,GAClE,EAAE,GACF;gBACE;oBACEjB,MAAM;oBACNO,MAAM;oBACNY,UAAU;gBACZ;aACD;YACLhC,WAAWG,OAAO,CAAC4D,GAAG,GAAG3E,gBAAgB;gBACvCyB,MAAM5B,WAAW,CAAC,EAAEc,KAAK,GAAG,CAAC;gBAC7BN;gBACAS,QAAQ;uBACHD,iBAAiBC,MAAM,CAACkC,MAAM,CAAC,CAACxB,QAAUhD,iBAAiBgD,UAAUA,MAAMoD,SAAS;uBACpFF;oBACH;wBACEjD,MAAM;wBACNO,MAAM;wBACNY,UAAU;oBACZ;iBACD;gBACDtC;gBACAgC,YAAYzC,WAAW,CAAC,EAAEc,KAAK,GAAG,CAAC;YACrC;YAEAL,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,EAAE,EAAEG,aAAa,CAAC,CAAC,GAAG;gBAChDe,MAAM,IAAI9D,kBAAkB;oBAC1BuD,MAAM5B,WAAW,CAAC,EAAEc,KAAK,EAAE,CAAC;oBAC5BG,QAAQ;wBACNF,YAAY;4BACVoB,MAAM7D;wBACR;wBACA0G,KAAK;4BACH7C,MAAMhE;wBACR;wBACA8G,UAAU;4BACR9C,MAAM7D;wBACR;wBACA4G,OAAO;4BACL/C,MAAM7D;wBACR;wBACA6G,MAAM;4BACJhD,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;wBAC/B;oBACF;gBACF;gBACA0B,SAAS7E,GAAG+B;YACd;YAEAN,cAAc2C,KAAK,CAACnC,MAAM,CAAC,CAAC,WAAW,EAAEG,aAAa,CAAC,CAAC,GAAG;gBACzDe,MAAMjE;gBACN2F,SAAShF,KAAKkC,WAAWP,MAAM,CAACM,IAAI;YACtC;YAEAL,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,YAAY,EAAEG,aAAa,CAAC,CAAC,GAAG;gBAC7De,MAAM,IAAI9D,kBAAkB;oBAC1BuD,MAAM5B,WAAW,CAAC,EAAEc,KAAK,SAAS,EAAEM,aAAa,CAAC;oBAClDH,QAAQ;wBACN+D,KAAK;4BACH7C,MAAMhE;wBACR;wBACAiH,gBAAgB;4BACdjD,MAAM7D;wBACR;wBACA2G,UAAU;4BACR9C,MAAM7D;wBACR;wBACA6G,MAAM;4BACJhD,MAAMpB,WAAWG,OAAO,CAAC4D,GAAG;wBAC9B;oBACF;gBACF;gBACAjB,SAAS5E,QAAQ8B;YACnB;YAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,MAAM,EAAEG,aAAa,CAAC,CAAC,GAAG;gBACvDe,MAAM7D;gBACNuF,SAAS9E,OAAOgC;YAClB;YAEA,IAAI,CAACC,iBAAiB4B,IAAI,CAACC,oBAAoB,EAAE;gBAC/C,IAAI7B,iBAAiB4B,IAAI,CAACyC,gBAAgB,GAAG,GAAG;oBAC9C5E,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,MAAM,EAAEG,aAAa,CAAC,CAAC,GAAG;wBACvDe,MAAM,IAAI/D,eAAeF;wBACzBmF,MAAM;4BACJiC,OAAO;gCAAEnD,MAAM,IAAI/D,eAAeE;4BAAe;wBACnD;wBACAuF,SAAS1E,OAAO4B;oBAClB;gBACF;gBAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,KAAK,EAAEG,aAAa,CAAC,CAAC,GAAG;oBACtDe,MAAM,IAAI9D,kBAAkB;wBAC1BuD,MAAM5B,WAAW,CAAC,EAAEc,KAAK,WAAW,CAAC;wBACrCG,QAAQ;4BACN+D,KAAK;gCACH7C,MAAMhE;4BACR;4BACA+G,OAAO;gCACL/C,MAAM7D;4BACR;4BACA6G,MAAM;gCACJhD,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;4BAC/B;wBACF;oBACF;oBACAkB,MAAM;wBACJiC,OAAO;4BAAEnD,MAAM7D;wBAAc;wBAC7BiH,UAAU;4BAAEpD,MAAM7D;wBAAc;wBAChCkH,UAAU;4BAAErD,MAAM7D;wBAAc;oBAClC;oBACAuF,SAAS/E,MAAMiC;gBACjB;gBAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,cAAc,EAAEG,aAAa,CAAC,CAAC,GAAG;oBAC/De,MAAM,IAAI/D,eAAeF;oBACzBmF,MAAM;wBACJoC,cAAc;4BAAEtD,MAAMjE;wBAAe;wBACrCoH,OAAO;4BAAEnD,MAAM,IAAI/D,eAAeE;wBAAe;wBACjDoH,YAAY;4BAAEvD,MAAMhE;wBAAW;oBACjC;oBACA0F,SAASjF,eAAemC;gBAC1B;gBAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,aAAa,EAAEG,aAAa,CAAC,CAAC,GAAG;oBAC9De,MAAM,IAAI9D,kBAAkB;wBAC1BuD,MAAM5B,WAAW,CAAC,EAAEc,KAAK,aAAa,CAAC;wBACvCG,QAAQ;4BACNiE,OAAO;gCAAE/C,MAAM7D;4BAAc;4BAC7B6G,MAAM;gCAAEhD,MAAMpB,WAAWG,OAAO,CAACiB,IAAI;4BAAC;wBACxC;oBACF;oBACAkB,MAAM;wBACJkC,UAAU;4BAAEpD,MAAM7D;wBAAc;wBAChC4G,OAAO;4BAAE/C,MAAM7D;wBAAc;oBAC/B;oBACAuF,SAAS3E,cAAc6B;gBACzB;gBAEAN,cAAc6D,QAAQ,CAACrD,MAAM,CAAC,CAAC,WAAW,EAAEG,aAAa,CAAC,CAAC,GAAG;oBAC5De,MAAMjE;oBACNmF,MAAM;wBACJ6B,OAAO;4BAAE/C,MAAM7D;wBAAc;oBAC/B;oBACAuF,SAASzE,YAAY2B;gBACvB;YACF;QACF;IACF;AACF;AAEA,eAAeR,uBAAsB"}