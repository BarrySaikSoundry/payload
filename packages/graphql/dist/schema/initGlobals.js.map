{"version":3,"sources":["../../src/schema/initGlobals.ts"],"sourcesContent":["import { GraphQLBoolean, GraphQLInt, GraphQLNonNull, GraphQLString } from 'graphql'\nimport pluralize from 'pluralize'\nconst { singular } = pluralize\n\nimport type { Field, GraphQLInfo, SanitizedConfig, SanitizedGlobalConfig } from 'payload'\n\nimport { buildVersionGlobalFields, toWords } from 'payload'\n\nimport { docAccessResolver } from '../resolvers/globals/docAccess.js'\nimport findOneResolver from '../resolvers/globals/findOne.js'\nimport findVersionByIDResolver from '../resolvers/globals/findVersionByID.js'\nimport findVersionsResolver from '../resolvers/globals/findVersions.js'\nimport restoreVersionResolver from '../resolvers/globals/restoreVersion.js'\nimport updateResolver from '../resolvers/globals/update.js'\nimport formatName from '../utilities/formatName.js'\nimport { buildMutationInputType } from './buildMutationInputType.js'\nimport { buildObjectType } from './buildObjectType.js'\nimport { buildPaginatedListType } from './buildPaginatedListType.js'\nimport { buildPolicyType } from './buildPoliciesType.js'\nimport buildWhereInputType from './buildWhereInputType.js'\n\ntype InitGlobalsGraphQLArgs = {\n  config: SanitizedConfig\n  graphqlResult: GraphQLInfo\n}\nfunction initGlobalsGraphQL({ config, graphqlResult }: InitGlobalsGraphQLArgs): void {\n  Object.keys(graphqlResult.globals.config).forEach((slug) => {\n    const global: SanitizedGlobalConfig = graphqlResult.globals.config[slug]\n    const { fields, graphQL, versions } = global\n\n    if (graphQL === false) {\n      return\n    }\n\n    const formattedName = graphQL?.name ? graphQL.name : singular(toWords(global.slug, true))\n\n    const forceNullableObjectType = Boolean(versions?.drafts)\n\n    if (!graphqlResult.globals.graphQL) graphqlResult.globals.graphQL = {}\n\n    const updateMutationInputType = buildMutationInputType({\n      name: formattedName,\n      config,\n      fields,\n      graphqlResult,\n      parentName: formattedName,\n    })\n    graphqlResult.globals.graphQL[slug] = {\n      type: buildObjectType({\n        name: formattedName,\n        config,\n        fields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: formattedName,\n      }),\n      mutationInputType: updateMutationInputType\n        ? new GraphQLNonNull(updateMutationInputType)\n        : null,\n    }\n\n    graphqlResult.Query.fields[formattedName] = {\n      type: graphqlResult.globals.graphQL[slug].type,\n      args: {\n        draft: { type: GraphQLBoolean },\n        ...(config.localization\n          ? {\n              fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: findOneResolver(global),\n    }\n\n    graphqlResult.Mutation.fields[`update${formattedName}`] = {\n      type: graphqlResult.globals.graphQL[slug].type,\n      args: {\n        ...(updateMutationInputType\n          ? { data: { type: graphqlResult.globals.graphQL[slug].mutationInputType } }\n          : {}),\n        draft: { type: GraphQLBoolean },\n        ...(config.localization\n          ? {\n              locale: { type: graphqlResult.types.localeInputType },\n            }\n          : {}),\n      },\n      resolve: updateResolver(global),\n    }\n\n    graphqlResult.Query.fields[`docAccess${formattedName}`] = {\n      type: buildPolicyType({\n        type: 'global',\n        entity: global,\n        scope: 'docAccess',\n        typeSuffix: 'DocAccess',\n      }),\n      resolve: docAccessResolver(global),\n    }\n\n    if (global.versions) {\n      const idType = config.db.defaultIDType === 'number' ? GraphQLInt : GraphQLString\n\n      const versionGlobalFields: Field[] = [\n        ...buildVersionGlobalFields(global),\n        {\n          name: 'id',\n          type: config.db.defaultIDType as 'text',\n        },\n        {\n          name: 'createdAt',\n          type: 'date',\n          label: 'Created At',\n        },\n        {\n          name: 'updatedAt',\n          type: 'date',\n          label: 'Updated At',\n        },\n      ]\n\n      graphqlResult.globals.graphQL[slug].versionType = buildObjectType({\n        name: `${formattedName}Version`,\n        config,\n        fields: versionGlobalFields,\n        forceNullable: forceNullableObjectType,\n        graphqlResult,\n        parentName: `${formattedName}Version`,\n      })\n\n      graphqlResult.Query.fields[`version${formatName(formattedName)}`] = {\n        type: graphqlResult.globals.graphQL[slug].versionType,\n        args: {\n          id: { type: idType },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n        },\n        resolve: findVersionByIDResolver(global),\n      }\n      graphqlResult.Query.fields[`versions${formattedName}`] = {\n        type: buildPaginatedListType(\n          `versions${formatName(formattedName)}`,\n          graphqlResult.globals.graphQL[slug].versionType,\n        ),\n        args: {\n          where: {\n            type: buildWhereInputType({\n              name: `versions${formattedName}`,\n              fields: versionGlobalFields,\n              parentName: `versions${formattedName}`,\n            }),\n          },\n          ...(config.localization\n            ? {\n                fallbackLocale: { type: graphqlResult.types.fallbackLocaleInputType },\n                locale: { type: graphqlResult.types.localeInputType },\n              }\n            : {}),\n          limit: { type: GraphQLInt },\n          page: { type: GraphQLInt },\n          sort: { type: GraphQLString },\n        },\n        resolve: findVersionsResolver(global),\n      }\n      graphqlResult.Mutation.fields[`restoreVersion${formatName(formattedName)}`] = {\n        type: graphqlResult.globals.graphQL[slug].type,\n        args: {\n          id: { type: idType },\n        },\n        resolve: restoreVersionResolver(global),\n      }\n    }\n  })\n}\n\nexport default initGlobalsGraphQL\n"],"names":["GraphQLBoolean","GraphQLInt","GraphQLNonNull","GraphQLString","pluralize","singular","buildVersionGlobalFields","toWords","docAccessResolver","findOneResolver","findVersionByIDResolver","findVersionsResolver","restoreVersionResolver","updateResolver","formatName","buildMutationInputType","buildObjectType","buildPaginatedListType","buildPolicyType","buildWhereInputType","initGlobalsGraphQL","config","graphqlResult","Object","keys","globals","forEach","slug","global","fields","graphQL","versions","formattedName","name","forceNullableObjectType","Boolean","drafts","updateMutationInputType","parentName","type","forceNullable","mutationInputType","Query","args","draft","localization","fallbackLocale","types","fallbackLocaleInputType","locale","localeInputType","resolve","Mutation","data","entity","scope","typeSuffix","idType","db","defaultIDType","versionGlobalFields","label","versionType","id","where","limit","page","sort"],"mappings":"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"}