{"version":3,"sources":["../../src/schema/buildMutationInputType.ts"],"sourcesContent":["import type { GraphQLInputFieldConfig, GraphQLScalarType, GraphQLType } from 'graphql'\nimport type {\n  ArrayField,\n  BlockField,\n  CheckboxField,\n  CodeField,\n  CollapsibleField,\n  DateField,\n  EmailField,\n  Field,\n  GraphQLInfo,\n  GroupField,\n  JSONField,\n  NumberField,\n  PointField,\n  RadioField,\n  RelationshipField,\n  RichTextField,\n  RowField,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SelectField,\n  TabsField,\n  TextField,\n  TextareaField,\n  UploadField,\n} from 'payload'\n\nimport {\n  GraphQLBoolean,\n  GraphQLEnumType,\n  GraphQLFloat,\n  GraphQLInputObjectType,\n  GraphQLInt,\n  GraphQLList,\n  GraphQLNonNull,\n  GraphQLString,\n} from 'graphql'\nimport { flattenTopLevelFields, toWords } from 'payload'\nimport { fieldAffectsData, optionIsObject, tabHasName } from 'payload/shared'\n\nimport { GraphQLJSON } from '../packages/graphql-type-json/index.js'\nimport combineParentName from '../utilities/combineParentName.js'\nimport formatName from '../utilities/formatName.js'\nimport { groupOrTabHasRequiredSubfield } from '../utilities/groupOrTabHasRequiredSubfield.js'\nimport withNullableType from './withNullableType.js'\n\nconst idFieldTypes = {\n  number: GraphQLInt,\n  text: GraphQLString,\n}\n\nexport const getCollectionIDType = (\n  type: keyof typeof idFieldTypes,\n  collection: SanitizedCollectionConfig,\n): GraphQLScalarType => {\n  const idField = flattenTopLevelFields(collection.fields).find(\n    (field) => fieldAffectsData(field) && field.name === 'id',\n  )\n\n  if (!idField) {\n    return idFieldTypes[type]\n  }\n\n  return idFieldTypes[idField.type]\n}\n\nexport type InputObjectTypeConfig = {\n  [path: string]: GraphQLInputFieldConfig\n}\n\ntype BuildMutationInputTypeArgs = {\n  config: SanitizedConfig\n  fields: Field[]\n  forceNullable?: boolean\n  graphqlResult: GraphQLInfo\n  name: string\n  parentName: string\n}\n\nexport function buildMutationInputType({\n  name,\n  config,\n  fields,\n  forceNullable = false,\n  graphqlResult,\n  parentName,\n}: BuildMutationInputTypeArgs): GraphQLInputObjectType | null {\n  const fieldToSchemaMap = {\n    array: (inputObjectTypeConfig: InputObjectTypeConfig, field: ArrayField) => {\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n      let type: GraphQLList<GraphQLType> | GraphQLType = buildMutationInputType({\n        name: fullName,\n        config,\n        fields: field.fields,\n        graphqlResult,\n        parentName: fullName,\n      })\n\n      if (!type) return inputObjectTypeConfig\n\n      type = new GraphQLList(withNullableType(field, type, forceNullable))\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    blocks: (inputObjectTypeConfig: InputObjectTypeConfig, field: BlockField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: GraphQLJSON },\n    }),\n    checkbox: (inputObjectTypeConfig: InputObjectTypeConfig, field: CheckboxField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: GraphQLBoolean },\n    }),\n    code: (inputObjectTypeConfig: InputObjectTypeConfig, field: CodeField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    collapsible: (inputObjectTypeConfig: InputObjectTypeConfig, field: CollapsibleField) =>\n      field.fields.reduce((acc, subField: CollapsibleField) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) return addSubField(acc, subField)\n        return acc\n      }, inputObjectTypeConfig),\n    date: (inputObjectTypeConfig: InputObjectTypeConfig, field: DateField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    email: (inputObjectTypeConfig: InputObjectTypeConfig, field: EmailField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    group: (inputObjectTypeConfig: InputObjectTypeConfig, field: GroupField) => {\n      const requiresAtLeastOneField = groupOrTabHasRequiredSubfield(field)\n      const fullName = combineParentName(parentName, toWords(field.name, true))\n      let type: GraphQLType = buildMutationInputType({\n        name: fullName,\n        config,\n        fields: field.fields,\n        graphqlResult,\n        parentName: fullName,\n      })\n\n      if (!type) return inputObjectTypeConfig\n\n      if (requiresAtLeastOneField) type = new GraphQLNonNull(type)\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    json: (inputObjectTypeConfig: InputObjectTypeConfig, field: JSONField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    number: (inputObjectTypeConfig: InputObjectTypeConfig, field: NumberField) => {\n      const type = field.name === 'id' ? GraphQLInt : GraphQLFloat\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: {\n          type: withNullableType(\n            field,\n            field.hasMany === true ? new GraphQLList(type) : type,\n            forceNullable,\n          ),\n        },\n      }\n    },\n    point: (inputObjectTypeConfig: InputObjectTypeConfig, field: PointField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, new GraphQLList(GraphQLFloat), forceNullable) },\n    }),\n    radio: (inputObjectTypeConfig: InputObjectTypeConfig, field: RadioField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    relationship: (inputObjectTypeConfig: InputObjectTypeConfig, field: RelationshipField) => {\n      const { relationTo } = field\n      type PayloadGraphQLRelationshipType =\n        | GraphQLInputObjectType\n        | GraphQLList<GraphQLScalarType>\n        | GraphQLScalarType\n      let type: PayloadGraphQLRelationshipType\n\n      if (Array.isArray(relationTo)) {\n        const fullName = `${combineParentName(\n          parentName,\n          toWords(field.name, true),\n        )}RelationshipInput`\n        type = new GraphQLInputObjectType({\n          name: fullName,\n          fields: {\n            relationTo: {\n              type: new GraphQLEnumType({\n                name: `${fullName}RelationTo`,\n                values: relationTo.reduce(\n                  (values, option) => ({\n                    ...values,\n                    [formatName(option)]: {\n                      value: option,\n                    },\n                  }),\n                  {},\n                ),\n              }),\n            },\n            value: { type: GraphQLJSON },\n          },\n        })\n      } else {\n        type = getCollectionIDType(\n          config.db.defaultIDType,\n          graphqlResult.collections[relationTo].config,\n        )\n      }\n\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type: field.hasMany ? new GraphQLList(type) : type },\n      }\n    },\n    richText: (inputObjectTypeConfig: InputObjectTypeConfig, field: RichTextField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLJSON, forceNullable) },\n    }),\n    row: (inputObjectTypeConfig: InputObjectTypeConfig, field: RowField) =>\n      field.fields.reduce((acc, subField: Field) => {\n        const addSubField = fieldToSchemaMap[subField.type]\n        if (addSubField) return addSubField(acc, subField)\n        return acc\n      }, inputObjectTypeConfig),\n    select: (inputObjectTypeConfig: InputObjectTypeConfig, field: SelectField) => {\n      const formattedName = `${combineParentName(parentName, field.name)}_MutationInput`\n      let type: GraphQLType = new GraphQLEnumType({\n        name: formattedName,\n        values: field.options.reduce((values, option) => {\n          if (optionIsObject(option)) {\n            return {\n              ...values,\n              [formatName(option.value)]: {\n                value: option.value,\n              },\n            }\n          }\n\n          return {\n            ...values,\n            [formatName(option)]: {\n              value: option,\n            },\n          }\n        }, {}),\n      })\n\n      type = field.hasMany ? new GraphQLList(type) : type\n      type = withNullableType(field, type, forceNullable)\n\n      return {\n        ...inputObjectTypeConfig,\n        [field.name]: { type },\n      }\n    },\n    tabs: (inputObjectTypeConfig: InputObjectTypeConfig, field: TabsField) => {\n      return field.tabs.reduce((acc, tab) => {\n        if (tabHasName(tab)) {\n          const fullName = combineParentName(parentName, toWords(tab.name, true))\n          const requiresAtLeastOneField = groupOrTabHasRequiredSubfield(field)\n          let type: GraphQLType = buildMutationInputType({\n            name: fullName,\n            config,\n            fields: tab.fields,\n            graphqlResult,\n            parentName: fullName,\n          })\n\n          if (!type) return acc\n\n          if (requiresAtLeastOneField) type = new GraphQLNonNull(type)\n          return {\n            ...acc,\n            [tab.name]: { type },\n          }\n        }\n\n        return {\n          ...acc,\n          ...tab.fields.reduce((subFieldSchema, subField) => {\n            const addSubField = fieldToSchemaMap[subField.type]\n            if (addSubField) return addSubField(subFieldSchema, subField)\n            return subFieldSchema\n          }, acc),\n        }\n      }, inputObjectTypeConfig)\n    },\n    text: (inputObjectTypeConfig: InputObjectTypeConfig, field: TextField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: {\n        type: withNullableType(\n          field,\n          field.hasMany === true ? new GraphQLList(GraphQLString) : GraphQLString,\n          forceNullable,\n        ),\n      },\n    }),\n    textarea: (inputObjectTypeConfig: InputObjectTypeConfig, field: TextareaField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n    upload: (inputObjectTypeConfig: InputObjectTypeConfig, field: UploadField) => ({\n      ...inputObjectTypeConfig,\n      [field.name]: { type: withNullableType(field, GraphQLString, forceNullable) },\n    }),\n  }\n\n  const fieldName = formatName(name)\n\n  const fieldSchemas = fields.reduce((inputObjectTypeConfig, field) => {\n    const fieldSchema = fieldToSchemaMap[field.type]\n\n    if (typeof fieldSchema !== 'function') {\n      return inputObjectTypeConfig\n    }\n\n    const schema = fieldSchema(inputObjectTypeConfig, field)\n    if (Object.keys(schema).length === 0) {\n      return inputObjectTypeConfig\n    }\n\n    return {\n      ...inputObjectTypeConfig,\n      ...fieldSchema(inputObjectTypeConfig, field),\n    }\n  }, {})\n\n  if (Object.keys(fieldSchemas).length === 0) {\n    return null\n  }\n\n  return new GraphQLInputObjectType({\n    name: `mutation${fieldName}Input`,\n    fields: fieldSchemas,\n  })\n}\n"],"names":["GraphQLBoolean","GraphQLEnumType","GraphQLFloat","GraphQLInputObjectType","GraphQLInt","GraphQLList","GraphQLNonNull","GraphQLString","flattenTopLevelFields","toWords","fieldAffectsData","optionIsObject","tabHasName","GraphQLJSON","combineParentName","formatName","groupOrTabHasRequiredSubfield","withNullableType","idFieldTypes","number","text","getCollectionIDType","type","collection","idField","fields","find","field","name","buildMutationInputType","config","forceNullable","graphqlResult","parentName","fieldToSchemaMap","array","inputObjectTypeConfig","fullName","blocks","checkbox","code","collapsible","reduce","acc","subField","addSubField","date","email","group","requiresAtLeastOneField","json","hasMany","point","radio","relationship","relationTo","Array","isArray","values","option","value","db","defaultIDType","collections","richText","row","select","formattedName","options","tabs","tab","subFieldSchema","textarea","upload","fieldName","fieldSchemas","fieldSchema","schema","Object","keys","length"],"mappings":"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"}