{"version":3,"sources":["../../../../src/lexical/plugins/SlashMenu/useMenuTriggerMatch.ts"],"sourcesContent":["import type { LexicalEditor } from 'lexical'\n\nimport { useCallback } from 'react'\n\nimport { PUNCTUATION } from './LexicalTypeaheadMenuPlugin/index.js'\n\nexport type TriggerFn = ({\n  editor,\n  query,\n}: {\n  editor: LexicalEditor\n  /** The query string is the POTENTIAL trigger AND the text after the trigger text. */\n  query: string\n}) => MenuTextMatch | null\n\nexport type MenuTextMatch = {\n  leadOffset: number\n  matchingString: string\n  replaceableString: string\n}\n\n/**\n * Returns a function which checks if the trigger (e.g. '/') is present in the query and, if so, returns the matching string (text after the trigger)\n */\nexport function useMenuTriggerMatch(\n  /**\n   * Text which triggers the menu. Everything after this text will be used as the query.\n   */\n  trigger: string,\n  { maxLength = 75, minLength = 1 }: { maxLength?: number; minLength?: number },\n): TriggerFn {\n  return useCallback(\n    ({ query }) => {\n      const validChars = '[^' + trigger + PUNCTUATION + '\\\\s]'\n      const TypeaheadTriggerRegex = new RegExp(\n        '(^|\\\\s|\\\\()(' +\n          '[' +\n          trigger +\n          ']' +\n          '((?:' +\n          validChars +\n          '){0,' +\n          maxLength +\n          '})' +\n          ')$',\n      )\n      const match = TypeaheadTriggerRegex.exec(query)\n      if (match !== null) {\n        const maybeLeadingWhitespace = match[1]\n\n        /**\n         * matchingString is only the text AFTER the trigger text. (So everything after the /)\n         */\n        const matchingString = match[3]\n\n        if (matchingString.length >= minLength) {\n          return {\n            leadOffset: match.index + maybeLeadingWhitespace.length,\n            matchingString,\n            replaceableString: match[2], // replaceableString is the trigger text + the matching string\n          }\n        }\n      }\n      return null\n    },\n    [maxLength, minLength, trigger],\n  )\n}\n"],"names":["useCallback","PUNCTUATION","useMenuTriggerMatch","trigger","maxLength","minLength","query","validChars","TypeaheadTriggerRegex","RegExp","match","exec","maybeLeadingWhitespace","matchingString","length","leadOffset","index","replaceableString"],"mappings":"AAEA,SAASA,WAAW,QAAQ,QAAO;AAEnC,SAASC,WAAW,QAAQ,wCAAuC;AAiBnE;;CAEC,GACD,OAAO,SAASC,oBACd;;GAEC,GACDC,OAAe,EACf,EAAEC,YAAY,EAAE,EAAEC,YAAY,CAAC,EAA8C;IAE7E,OAAOL,YACL,CAAC,EAAEM,KAAK,EAAE;QACR,MAAMC,aAAa,OAAOJ,UAAUF,cAAc;QAClD,MAAMO,wBAAwB,IAAIC,OAChC,iBACE,MACAN,UACA,MACA,SACAI,aACA,SACAH,YACA,OACA;QAEJ,MAAMM,QAAQF,sBAAsBG,IAAI,CAACL;QACzC,IAAII,UAAU,MAAM;YAClB,MAAME,yBAAyBF,KAAK,CAAC,EAAE;YAEvC;;SAEC,GACD,MAAMG,iBAAiBH,KAAK,CAAC,EAAE;YAE/B,IAAIG,eAAeC,MAAM,IAAIT,WAAW;gBACtC,OAAO;oBACLU,YAAYL,MAAMM,KAAK,GAAGJ,uBAAuBE,MAAM;oBACvDD;oBACAI,mBAAmBP,KAAK,CAAC,EAAE;gBAC7B;YACF;QACF;QACA,OAAO;IACT,GACA;QAACN;QAAWC;QAAWF;KAAQ;AAEnC"}