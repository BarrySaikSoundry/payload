{"version":3,"sources":["../../src/validate/index.ts"],"sourcesContent":["import type { SerializedEditorState, SerializedParagraphNode } from 'lexical'\nimport type { RichTextField, Validate } from 'payload'\n\nimport type { SanitizedServerEditorConfig } from '../lexical/config/types.js'\n\nimport { validateNodes } from './validateNodes.js'\n\nexport const richTextValidateHOC = ({\n  editorConfig,\n}: {\n  editorConfig: SanitizedServerEditorConfig\n}) => {\n  const richTextValidate: Validate<SerializedEditorState, unknown, unknown, RichTextField> = async (\n    value,\n    options,\n  ) => {\n    const {\n      req: { t },\n      required,\n    } = options\n\n    if (required) {\n      const hasChildren = value?.root?.children?.length\n\n      const hasOnlyEmptyParagraph =\n        (value?.root?.children?.length === 1 &&\n          value?.root?.children[0]?.type === 'paragraph' &&\n          (value?.root?.children[0] as SerializedParagraphNode)?.children?.length === 0) ||\n        ((value?.root?.children[0] as SerializedParagraphNode)?.children?.length === 1 &&\n          (value?.root?.children[0] as SerializedParagraphNode)?.children[0]?.type === 'text' &&\n          (value?.root?.children[0] as SerializedParagraphNode)?.children[0]?.['text'] === '')\n\n      if (!hasChildren || hasOnlyEmptyParagraph) {\n        return t('validation:required')\n      }\n    }\n\n    // Traverse through nodes and validate them. Just like a node can hook into the population process (e.g. link or relationship nodes),\n    // they can also hook into the validation process. E.g. a block node probably has fields with validation rules.\n\n    const rootNodes = value?.root?.children\n    if (rootNodes && Array.isArray(rootNodes) && rootNodes?.length) {\n      return await validateNodes({\n        nodeValidations: editorConfig.features.validations,\n        nodes: rootNodes,\n        validation: {\n          options,\n          value,\n        },\n      })\n    }\n\n    return true\n  }\n\n  return richTextValidate\n}\n"],"names":["validateNodes","richTextValidateHOC","editorConfig","richTextValidate","value","options","req","t","required","hasChildren","root","children","length","hasOnlyEmptyParagraph","type","rootNodes","Array","isArray","nodeValidations","features","validations","nodes","validation"],"mappings":"AAKA,SAASA,aAAa,QAAQ,qBAAoB;AAElD,OAAO,MAAMC,sBAAsB,CAAC,EAClCC,YAAY,EAGb;IACC,MAAMC,mBAAqF,OACzFC,OACAC;QAEA,MAAM,EACJC,KAAK,EAAEC,CAAC,EAAE,EACVC,QAAQ,EACT,GAAGH;QAEJ,IAAIG,UAAU;YACZ,MAAMC,cAAcL,OAAOM,MAAMC,UAAUC;YAE3C,MAAMC,wBACJ,AAACT,OAAOM,MAAMC,UAAUC,WAAW,KACjCR,OAAOM,MAAMC,QAAQ,CAAC,EAAE,EAAEG,SAAS,eACnC,AAACV,OAAOM,MAAMC,QAAQ,CAAC,EAAE,EAA8BA,UAAUC,WAAW,KAC7E,AAACR,OAAOM,MAAMC,QAAQ,CAAC,EAAE,EAA8BA,UAAUC,WAAW,KAC3E,AAACR,OAAOM,MAAMC,QAAQ,CAAC,EAAE,EAA8BA,QAAQ,CAAC,EAAE,EAAEG,SAAS,UAC7E,AAACV,OAAOM,MAAMC,QAAQ,CAAC,EAAE,EAA8BA,QAAQ,CAAC,EAAE,EAAE,CAAC,OAAO,KAAK;YAErF,IAAI,CAACF,eAAeI,uBAAuB;gBACzC,OAAON,EAAE;YACX;QACF;QAEA,qIAAqI;QACrI,+GAA+G;QAE/G,MAAMQ,YAAYX,OAAOM,MAAMC;QAC/B,IAAII,aAAaC,MAAMC,OAAO,CAACF,cAAcA,WAAWH,QAAQ;YAC9D,OAAO,MAAMZ,cAAc;gBACzBkB,iBAAiBhB,aAAaiB,QAAQ,CAACC,WAAW;gBAClDC,OAAON;gBACPO,YAAY;oBACVjB;oBACAD;gBACF;YACF;QACF;QAEA,OAAO;IACT;IAEA,OAAOD;AACT,EAAC"}