{"version":3,"sources":["../../../../src/features/upload/component/index.tsx"],"sourcesContent":["'use client'\nimport type { ClientCollectionConfig, Data } from 'payload'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection.js'\nimport { mergeRegister } from '@lexical/utils'\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  DrawerToggler,\n  File,\n  useConfig,\n  useDocumentDrawer,\n  useDrawerSlug,\n  useModal,\n  usePayloadAPI,\n  useTranslation,\n} from '@payloadcms/ui'\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from 'lexical'\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'\n\nimport type { ClientComponentProps } from '../../typesClient.js'\nimport type { UploadFeaturePropsClient } from '../feature.client.js'\nimport type { UploadData, UploadNode } from '../nodes/UploadNode.js'\n\nimport { useEditorConfigContext } from '../../../lexical/config/client/EditorConfigProvider.js'\nimport { FieldsDrawer } from '../../../utilities/fieldsDrawer/Drawer.js'\nimport { EnabledRelationshipsCondition } from '../../relationship/utils/EnabledRelationshipsCondition.js'\nimport { INSERT_UPLOAD_WITH_DRAWER_COMMAND } from '../drawer/commands.js'\nimport { $isUploadNode } from '../nodes/UploadNode.js'\nimport './index.scss'\n\nconst baseClass = 'lexical-upload'\n\nconst initialParams = {\n  depth: 0,\n}\n\nexport type ElementProps = {\n  data: UploadData\n  nodeKey: string\n}\n\nconst Component: React.FC<ElementProps> = (props) => {\n  const {\n    data: { fields, relationTo, value },\n    nodeKey,\n  } = props\n\n  const {\n    collections,\n    routes: { api },\n    serverURL,\n  } = useConfig()\n  const uploadRef = useRef<HTMLDivElement | null>(null)\n  const { closeModal } = useModal()\n\n  const [editor] = useLexicalComposerContext()\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey)\n\n  const { editorConfig, field } = useEditorConfigContext()\n\n  const { i18n, t } = useTranslation()\n  const [cacheBust, dispatchCacheBust] = useReducer((state) => state + 1, 0)\n  const [relatedCollection] = useState<ClientCollectionConfig>(() =>\n    collections.find((coll) => coll.slug === relationTo),\n  )\n\n  const drawerSlug = useDrawerSlug('upload-drawer')\n\n  const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = useDocumentDrawer({\n    id: value,\n    collectionSlug: relatedCollection.slug,\n  })\n\n  // Get the referenced document\n  const [{ data }, { setParams }] = usePayloadAPI(\n    `${serverURL}${api}/${relatedCollection.slug}/${value}`,\n    { initialParams },\n  )\n\n  const thumbnailSRC = data?.thumbnailURL || data?.url\n\n  const removeUpload = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey).remove()\n    })\n  }, [editor, nodeKey])\n\n  const updateUpload = useCallback(\n    (data: Data) => {\n      setParams({\n        ...initialParams,\n        cacheBust, // do this to get the usePayloadAPI to re-fetch the data even though the URL string hasn't changed\n      })\n\n      dispatchCacheBust()\n      closeDrawer()\n    },\n    [setParams, cacheBust, closeDrawer],\n  )\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        event.preventDefault()\n        const node = $getNodeByKey(nodeKey)\n        if ($isUploadNode(node)) {\n          node.remove()\n          return true\n        }\n      }\n      return false\n    },\n    [isSelected, nodeKey],\n  )\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      // Check if uploadRef.target or anything WITHIN uploadRef.target was clicked\n      if (event.target === uploadRef.current || uploadRef.current?.contains(event.target as Node)) {\n        if (event.shiftKey) {\n          setSelected(!isSelected)\n        } else {\n          if (!isSelected) {\n            clearSelection()\n            setSelected(true)\n          }\n        }\n        return true\n      }\n\n      return false\n    },\n    [isSelected, setSelected, clearSelection],\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand<MouseEvent>(CLICK_COMMAND, onClick, COMMAND_PRIORITY_LOW),\n\n      editor.registerCommand(KEY_DELETE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_BACKSPACE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected, onClick])\n\n  const hasExtraFields = (\n    editorConfig?.resolvedFeatureMap?.get('upload')\n      ?.sanitizedClientFeatureProps as ClientComponentProps<UploadFeaturePropsClient>\n  ).collections?.[relatedCollection.slug]?.hasExtraFields\n\n  const onExtraFieldsDrawerSubmit = useCallback(\n    (_, data) => {\n      // Update lexical node (with key nodeKey) with new data\n      editor.update(() => {\n        const uploadNode: UploadNode | null = $getNodeByKey(nodeKey)\n        if (uploadNode) {\n          const newData: UploadData = {\n            ...uploadNode.getData(),\n            fields: data,\n          }\n          uploadNode.setData(newData)\n        }\n      })\n\n      closeModal(drawerSlug)\n    },\n    [closeModal, editor, drawerSlug, nodeKey],\n  )\n\n  return (\n    <div\n      className={[baseClass, isSelected && `${baseClass}--selected`].filter(Boolean).join(' ')}\n      contentEditable={false}\n      ref={uploadRef}\n    >\n      <div className={`${baseClass}__card`}>\n        <div className={`${baseClass}__topRow`}>\n          {/* TODO: migrate to use @payloadcms/ui/elements/Thumbnail component */}\n          <div className={`${baseClass}__thumbnail`}>\n            {thumbnailSRC ? (\n              <img\n                alt={data?.filename}\n                data-lexical-upload-id={value}\n                data-lexical-upload-relation-to={relationTo}\n                src={thumbnailSRC}\n              />\n            ) : (\n              <File />\n            )}\n          </div>\n          <div className={`${baseClass}__topRowRightPanel`}>\n            <div className={`${baseClass}__collectionLabel`}>\n              {getTranslation(relatedCollection.labels.singular, i18n)}\n            </div>\n            {editor.isEditable() && (\n              <div className={`${baseClass}__actions`}>\n                {hasExtraFields ? (\n                  <DrawerToggler\n                    className={`${baseClass}__upload-drawer-toggler`}\n                    disabled={field?.readOnly}\n                    slug={drawerSlug}\n                  >\n                    <Button\n                      buttonStyle=\"icon-label\"\n                      el=\"div\"\n                      icon=\"edit\"\n                      onClick={(e) => {\n                        e.preventDefault()\n                      }}\n                      round\n                      tooltip={t('fields:editRelationship')}\n                    />\n                  </DrawerToggler>\n                ) : null}\n\n                <Button\n                  buttonStyle=\"icon-label\"\n                  disabled={field?.readOnly}\n                  el=\"div\"\n                  icon=\"swap\"\n                  onClick={() => {\n                    editor.dispatchCommand(INSERT_UPLOAD_WITH_DRAWER_COMMAND, {\n                      replace: { nodeKey },\n                    })\n                  }}\n                  round\n                  tooltip={t('fields:swapUpload')}\n                />\n                <Button\n                  buttonStyle=\"icon-label\"\n                  className={`${baseClass}__removeButton`}\n                  disabled={field?.readOnly}\n                  icon=\"x\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    removeUpload()\n                  }}\n                  round\n                  tooltip={t('fields:removeUpload')}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        <div className={`${baseClass}__bottomRow`}>\n          <DocumentDrawerToggler className={`${baseClass}__doc-drawer-toggler`}>\n            <strong>{data?.filename}</strong>\n          </DocumentDrawerToggler>\n        </div>\n      </div>\n      {value && <DocumentDrawer onSave={updateUpload} />}\n      {hasExtraFields ? (\n        <FieldsDrawer\n          data={fields}\n          drawerSlug={drawerSlug}\n          drawerTitle={t('general:editLabel', {\n            label: getTranslation(relatedCollection.labels.singular, i18n),\n          })}\n          featureKey=\"upload\"\n          handleDrawerSubmit={onExtraFieldsDrawerSubmit}\n          schemaPathSuffix={relatedCollection.slug}\n        />\n      ) : null}\n    </div>\n  )\n}\n\nexport const UploadComponent = (props: ElementProps): React.ReactNode => {\n  return (\n    <EnabledRelationshipsCondition {...props} uploads>\n      <Component {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],"names":["useLexicalComposerContext","useLexicalNodeSelection","mergeRegister","getTranslation","Button","DrawerToggler","File","useConfig","useDocumentDrawer","useDrawerSlug","useModal","usePayloadAPI","useTranslation","$getNodeByKey","$getSelection","$isNodeSelection","CLICK_COMMAND","COMMAND_PRIORITY_LOW","KEY_BACKSPACE_COMMAND","KEY_DELETE_COMMAND","React","useCallback","useEffect","useReducer","useRef","useState","useEditorConfigContext","FieldsDrawer","EnabledRelationshipsCondition","INSERT_UPLOAD_WITH_DRAWER_COMMAND","$isUploadNode","baseClass","initialParams","depth","Component","props","data","fields","relationTo","value","nodeKey","collections","routes","api","serverURL","uploadRef","closeModal","editor","isSelected","setSelected","clearSelection","editorConfig","field","i18n","t","cacheBust","dispatchCacheBust","state","relatedCollection","find","coll","slug","drawerSlug","DocumentDrawer","DocumentDrawerToggler","closeDrawer","id","collectionSlug","setParams","thumbnailSRC","thumbnailURL","url","removeUpload","update","remove","updateUpload","$onDelete","event","preventDefault","node","onClick","target","current","contains","shiftKey","registerCommand","hasExtraFields","resolvedFeatureMap","get","sanitizedClientFeatureProps","onExtraFieldsDrawerSubmit","_","uploadNode","newData","getData","setData","div","className","filter","Boolean","join","contentEditable","ref","img","alt","filename","data-lexical-upload-id","data-lexical-upload-relation-to","src","labels","singular","isEditable","disabled","readOnly","buttonStyle","el","icon","e","round","tooltip","dispatchCommand","replace","strong","onSave","drawerTitle","label","featureKey","handleDrawerSubmit","schemaPathSuffix","UploadComponent","uploads"],"mappings":"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"}