{"version":3,"sources":["../../../src/features/upload/graphQLPopulationPromise.ts"],"sourcesContent":["import type { PopulationPromise } from '../typesServer.js'\nimport type { UploadFeatureProps } from './feature.server.js'\nimport type { SerializedUploadNode } from './nodes/UploadNode.js'\n\nimport { populate } from '../../populateGraphQL/populate.js'\nimport { recursivelyPopulateFieldsForGraphQL } from '../../populateGraphQL/recursivelyPopulateFieldsForGraphQL.js'\n\nexport const uploadPopulationPromiseHOC = (\n  props?: UploadFeatureProps,\n): PopulationPromise<SerializedUploadNode> => {\n  return ({\n    context,\n    currentDepth,\n    depth,\n    draft,\n    editorPopulationPromises,\n    fieldPromises,\n    findMany,\n    flattenLocales,\n    node,\n    overrideAccess,\n    populationPromises,\n    req,\n    showHiddenFields,\n  }) => {\n    if (node?.value) {\n      const collection = req.payload.collections[node?.relationTo]\n\n      if (collection) {\n        // @ts-expect-error\n        const id = node?.value?.id || node?.value // for backwards-compatibility\n\n        const populateDepth =\n          props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth\n\n        populationPromises.push(\n          populate({\n            id,\n            collectionSlug: collection.config.slug,\n            currentDepth,\n            data: node,\n            depth: populateDepth,\n            draft,\n            key: 'value',\n            overrideAccess,\n            req,\n            showHiddenFields,\n          }),\n        )\n\n        const collectionFieldSchema = props?.collections?.[node?.relationTo]?.fields\n\n        if (Array.isArray(collectionFieldSchema)) {\n          if (!collectionFieldSchema?.length) {\n            return\n          }\n          recursivelyPopulateFieldsForGraphQL({\n            context,\n            currentDepth,\n            data: node.fields || {},\n            depth,\n            draft,\n            editorPopulationPromises,\n            fieldPromises,\n            fields: collectionFieldSchema,\n            findMany,\n            flattenLocales,\n            overrideAccess,\n            populationPromises,\n            req,\n            showHiddenFields,\n            siblingDoc: node.fields || {},\n          })\n        }\n      }\n    }\n  }\n}\n"],"names":["populate","recursivelyPopulateFieldsForGraphQL","uploadPopulationPromiseHOC","props","context","currentDepth","depth","draft","editorPopulationPromises","fieldPromises","findMany","flattenLocales","node","overrideAccess","populationPromises","req","showHiddenFields","value","collection","payload","collections","relationTo","id","populateDepth","maxDepth","undefined","push","collectionSlug","config","slug","data","key","collectionFieldSchema","fields","Array","isArray","length","siblingDoc"],"mappings":"AAIA,SAASA,QAAQ,QAAQ,oCAAmC;AAC5D,SAASC,mCAAmC,QAAQ,+DAA8D;AAElH,OAAO,MAAMC,6BAA6B,CACxCC;IAEA,OAAO,CAAC,EACNC,OAAO,EACPC,YAAY,EACZC,KAAK,EACLC,KAAK,EACLC,wBAAwB,EACxBC,aAAa,EACbC,QAAQ,EACRC,cAAc,EACdC,IAAI,EACJC,cAAc,EACdC,kBAAkB,EAClBC,GAAG,EACHC,gBAAgB,EACjB;QACC,IAAIJ,MAAMK,OAAO;YACf,MAAMC,aAAaH,IAAII,OAAO,CAACC,WAAW,CAACR,MAAMS,WAAW;YAE5D,IAAIH,YAAY;gBACd,mBAAmB;gBACnB,MAAMI,KAAKV,MAAMK,OAAOK,MAAMV,MAAMK,MAAM,8BAA8B;;gBAExE,MAAMM,gBACJpB,OAAOqB,aAAaC,aAAatB,OAAOqB,WAAWlB,QAAQH,OAAOqB,WAAWlB;gBAE/EQ,mBAAmBY,IAAI,CACrB1B,SAAS;oBACPsB;oBACAK,gBAAgBT,WAAWU,MAAM,CAACC,IAAI;oBACtCxB;oBACAyB,MAAMlB;oBACNN,OAAOiB;oBACPhB;oBACAwB,KAAK;oBACLlB;oBACAE;oBACAC;gBACF;gBAGF,MAAMgB,wBAAwB7B,OAAOiB,aAAa,CAACR,MAAMS,WAAW,EAAEY;gBAEtE,IAAIC,MAAMC,OAAO,CAACH,wBAAwB;oBACxC,IAAI,CAACA,uBAAuBI,QAAQ;wBAClC;oBACF;oBACAnC,oCAAoC;wBAClCG;wBACAC;wBACAyB,MAAMlB,KAAKqB,MAAM,IAAI,CAAC;wBACtB3B;wBACAC;wBACAC;wBACAC;wBACAwB,QAAQD;wBACRtB;wBACAC;wBACAE;wBACAC;wBACAC;wBACAC;wBACAqB,YAAYzB,KAAKqB,MAAM,IAAI,CAAC;oBAC9B;gBACF;YACF;QACF;IACF;AACF,EAAC"}