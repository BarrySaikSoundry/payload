{"version":3,"sources":["../../../src/features/upload/feature.client.tsx"],"sourcesContent":["'use client'\n\nimport { $isNodeSelection } from 'lexical'\n\nimport { UploadIcon } from '../../lexical/ui/icons/Upload/index.js'\nimport { createClientFeature } from '../../utilities/createClientFeature.js'\nimport { slashMenuBasicGroupWithItems } from '../shared/slashMenu/basicGroup.js'\nimport { toolbarAddDropdownGroupWithItems } from '../shared/toolbar/addDropdownGroup.js'\nimport { INSERT_UPLOAD_WITH_DRAWER_COMMAND } from './drawer/commands.js'\nimport { $isUploadNode, UploadNode } from './nodes/UploadNode.js'\nimport { UploadPlugin } from './plugin/index.js'\n\nexport type UploadFeaturePropsClient = {\n  collections: {\n    [collection: string]: {\n      hasExtraFields: boolean\n    }\n  }\n}\n\nexport const UploadFeatureClient = createClientFeature<UploadFeaturePropsClient>({\n  nodes: [UploadNode],\n  plugins: [\n    {\n      Component: UploadPlugin,\n      position: 'normal',\n    },\n  ],\n  slashMenu: {\n    groups: [\n      slashMenuBasicGroupWithItems([\n        {\n          Icon: UploadIcon,\n          key: 'upload',\n          keywords: ['upload', 'image', 'file', 'img', 'picture', 'photo', 'media'],\n          label: ({ i18n }) => {\n            return i18n.t('lexical:upload:label')\n          },\n          onSelect: ({ editor }) => {\n            editor.dispatchCommand(INSERT_UPLOAD_WITH_DRAWER_COMMAND, {\n              replace: false,\n            })\n          },\n        },\n      ]),\n    ],\n  },\n  toolbarFixed: {\n    groups: [\n      toolbarAddDropdownGroupWithItems([\n        {\n          ChildComponent: UploadIcon,\n          isActive: ({ selection }) => {\n            if (!$isNodeSelection(selection) || !selection.getNodes().length) {\n              return false\n            }\n\n            const firstNode = selection.getNodes()[0]\n            return $isUploadNode(firstNode)\n          },\n          key: 'upload',\n          label: ({ i18n }) => {\n            return i18n.t('lexical:upload:label')\n          },\n          onSelect: ({ editor }) => {\n            editor.dispatchCommand(INSERT_UPLOAD_WITH_DRAWER_COMMAND, {\n              replace: false,\n            })\n          },\n        },\n      ]),\n    ],\n  },\n})\n"],"names":["$isNodeSelection","UploadIcon","createClientFeature","slashMenuBasicGroupWithItems","toolbarAddDropdownGroupWithItems","INSERT_UPLOAD_WITH_DRAWER_COMMAND","$isUploadNode","UploadNode","UploadPlugin","UploadFeatureClient","nodes","plugins","Component","position","slashMenu","groups","Icon","key","keywords","label","i18n","t","onSelect","editor","dispatchCommand","replace","toolbarFixed","ChildComponent","isActive","selection","getNodes","length","firstNode"],"mappings":"AAAA;AAEA,SAASA,gBAAgB,QAAQ,UAAS;AAE1C,SAASC,UAAU,QAAQ,yCAAwC;AACnE,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,4BAA4B,QAAQ,oCAAmC;AAChF,SAASC,gCAAgC,QAAQ,wCAAuC;AACxF,SAASC,iCAAiC,QAAQ,uBAAsB;AACxE,SAASC,aAAa,EAAEC,UAAU,QAAQ,wBAAuB;AACjE,SAASC,YAAY,QAAQ,oBAAmB;AAUhD,OAAO,MAAMC,sBAAsBP,oBAA8C;IAC/EQ,OAAO;QAACH;KAAW;IACnBI,SAAS;QACP;YACEC,WAAWJ;YACXK,UAAU;QACZ;KACD;IACDC,WAAW;QACTC,QAAQ;YACNZ,6BAA6B;gBAC3B;oBACEa,MAAMf;oBACNgB,KAAK;oBACLC,UAAU;wBAAC;wBAAU;wBAAS;wBAAQ;wBAAO;wBAAW;wBAAS;qBAAQ;oBACzEC,OAAO,CAAC,EAAEC,IAAI,EAAE;wBACd,OAAOA,KAAKC,CAAC,CAAC;oBAChB;oBACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;wBACnBA,OAAOC,eAAe,CAACnB,mCAAmC;4BACxDoB,SAAS;wBACX;oBACF;gBACF;aACD;SACF;IACH;IACAC,cAAc;QACZX,QAAQ;YACNX,iCAAiC;gBAC/B;oBACEuB,gBAAgB1B;oBAChB2B,UAAU,CAAC,EAAEC,SAAS,EAAE;wBACtB,IAAI,CAAC7B,iBAAiB6B,cAAc,CAACA,UAAUC,QAAQ,GAAGC,MAAM,EAAE;4BAChE,OAAO;wBACT;wBAEA,MAAMC,YAAYH,UAAUC,QAAQ,EAAE,CAAC,EAAE;wBACzC,OAAOxB,cAAc0B;oBACvB;oBACAf,KAAK;oBACLE,OAAO,CAAC,EAAEC,IAAI,EAAE;wBACd,OAAOA,KAAKC,CAAC,CAAC;oBAChB;oBACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;wBACnBA,OAAOC,eAAe,CAACnB,mCAAmC;4BACxDoB,SAAS;wBACX;oBACF;gBACF;aACD;SACF;IACH;AACF,GAAE"}