{"version":3,"sources":["../../../src/features/link/feature.server.ts"],"sourcesContent":["import type { CollectionSlug, Config, Field, FieldAffectingData, SanitizedConfig } from 'payload'\n\nimport { sanitizeFields } from 'payload'\nimport { deepCopyObject } from 'payload/shared'\n\nimport type { ClientProps } from './feature.client.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { LinkFeatureClient } from '../../exports/client/index.js'\nimport { createServerFeature } from '../../utilities/createServerFeature.js'\nimport { convertLexicalNodesToHTML } from '../converters/html/converter/index.js'\nimport { createNode } from '../typeUtilities.js'\nimport { linkPopulationPromiseHOC } from './graphQLPopulationPromise.js'\nimport { i18n } from './i18n.js'\nimport { LinkMarkdownTransformer } from './markdownTransformer.js'\nimport { AutoLinkNode } from './nodes/AutoLinkNode.js'\nimport { LinkNode } from './nodes/LinkNode.js'\nimport { transformExtraFields } from './plugins/floatingLinkEditor/utilities.js'\nimport { linkValidation } from './validate.js'\n\nexport type ExclusiveLinkCollectionsProps =\n  | {\n      /**\n       * The collections that should be disabled for internal linking. Overrides the `enableRichTextLink` property in the collection config.\n       * When this property is set, `enabledCollections` will not be available.\n       **/\n      disabledCollections?: CollectionSlug[]\n\n      // Ensures that enabledCollections is not available when disabledCollections is set\n      enabledCollections?: never\n    }\n  | {\n      // Ensures that disabledCollections is not available when enabledCollections is set\n      disabledCollections?: never\n\n      /**\n       * The collections that should be enabled for internal linking. Overrides the `enableRichTextLink` property in the collection config\n       * When this property is set, `disabledCollections` will not be available.\n       **/\n      enabledCollections?: CollectionSlug[]\n    }\n\nexport type LinkFeatureServerProps = {\n  /**\n   * A function or array defining additional fields for the link feature. These will be\n   * displayed in the link editor drawer.\n   */\n  fields?:\n    | ((args: {\n        config: SanitizedConfig\n        defaultFields: FieldAffectingData[]\n      }) => (Field | FieldAffectingData)[])\n    | Field[]\n  /**\n   * Sets a maximum population depth for the internal doc default field of link, regardless of the remaining depth when the field is reached.\n   * This behaves exactly like the maxDepth properties of relationship and upload fields.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n} & ExclusiveLinkCollectionsProps\n\nexport const LinkFeature = createServerFeature<\n  LinkFeatureServerProps,\n  LinkFeatureServerProps,\n  ClientProps\n>({\n  feature: async ({ config: _config, isRoot, props }) => {\n    if (!props) {\n      props = {}\n    }\n    const validRelationships = _config.collections.map((c) => c.slug) || []\n\n    const _transformedFields = transformExtraFields(\n      deepCopyObject(props.fields),\n      _config,\n      props.enabledCollections,\n      props.disabledCollections,\n      props.maxDepth,\n    )\n\n    const sanitizedFields = await sanitizeFields({\n      config: _config as unknown as Config,\n      fields: _transformedFields,\n      requireFieldLevelRichTextEditor: isRoot,\n      validRelationships,\n    })\n    props.fields = sanitizedFields\n\n    // the text field is not included in the node data.\n    // Thus, for tasks like validation, we do not want to pass it a text field in the schema which will never have data.\n    // Otherwise, it will cause a validation error (field is required).\n    const sanitizedFieldsWithoutText = deepCopyObject(sanitizedFields).filter(\n      (field) => field.name !== 'text',\n    )\n\n    return {\n      ClientFeature: LinkFeatureClient,\n      clientFeatureProps: {\n        disabledCollections: props.disabledCollections,\n        enabledCollections: props.enabledCollections,\n      } as ExclusiveLinkCollectionsProps,\n      generateSchemaMap: () => {\n        if (!sanitizedFields || !Array.isArray(sanitizedFields) || sanitizedFields.length === 0) {\n          return null\n        }\n\n        const schemaMap = new Map<string, Field[]>()\n        schemaMap.set('fields', sanitizedFields)\n\n        return schemaMap\n      },\n      i18n,\n      markdownTransformers: [LinkMarkdownTransformer],\n      nodes: [\n        createNode({\n          converters: {\n            html: {\n              converter: async ({ converters, node, parent, req }) => {\n                const childrenText = await convertLexicalNodesToHTML({\n                  converters,\n                  lexicalNodes: node.children,\n                  parent: {\n                    ...node,\n                    parent,\n                  },\n                  req,\n                })\n\n                const rel: string = node.fields.newTab ? ' rel=\"noopener noreferrer\"' : ''\n                const target: string = node.fields.newTab ? ' target=\"_blank\"' : ''\n\n                let href: string = node.fields.url\n                if (node.fields.linkType === 'internal') {\n                  href =\n                    typeof node.fields.doc?.value === 'string'\n                      ? node.fields.doc?.value\n                      : node.fields.doc?.value?.id\n                }\n\n                return `<a href=\"${href}\"${target}${rel}>${childrenText}</a>`\n              },\n              nodeTypes: [AutoLinkNode.getType()],\n            },\n          },\n          node: AutoLinkNode,\n          // Since AutoLinkNodes are just internal links, they need no hooks or graphQL population promises\n          validations: [linkValidation(props, sanitizedFieldsWithoutText)],\n        }),\n        createNode({\n          converters: {\n            html: {\n              converter: async ({ converters, node, parent, req }) => {\n                const childrenText = await convertLexicalNodesToHTML({\n                  converters,\n                  lexicalNodes: node.children,\n                  parent: {\n                    ...node,\n                    parent,\n                  },\n                  req,\n                })\n\n                const rel: string = node.fields.newTab ? ' rel=\"noopener noreferrer\"' : ''\n                const target: string = node.fields.newTab ? ' target=\"_blank\"' : ''\n\n                const href: string =\n                  node.fields.linkType === 'custom'\n                    ? node.fields.url\n                    : (node.fields.doc?.value as string)\n\n                return `<a href=\"${href}\"${target}${rel}>${childrenText}</a>`\n              },\n              nodeTypes: [LinkNode.getType()],\n            },\n          },\n          getSubFields: () => {\n            return sanitizedFieldsWithoutText\n          },\n          getSubFieldsData: ({ node }) => {\n            return node?.fields\n          },\n          graphQLPopulationPromises: [linkPopulationPromiseHOC(props)],\n          node: LinkNode,\n          validations: [linkValidation(props, sanitizedFieldsWithoutText)],\n        }),\n      ],\n      sanitizedServerFeatureProps: props,\n    }\n  },\n  key: 'link',\n})\n"],"names":["sanitizeFields","deepCopyObject","LinkFeatureClient","createServerFeature","convertLexicalNodesToHTML","createNode","linkPopulationPromiseHOC","i18n","LinkMarkdownTransformer","AutoLinkNode","LinkNode","transformExtraFields","linkValidation","LinkFeature","feature","config","_config","isRoot","props","validRelationships","collections","map","c","slug","_transformedFields","fields","enabledCollections","disabledCollections","maxDepth","sanitizedFields","requireFieldLevelRichTextEditor","sanitizedFieldsWithoutText","filter","field","name","ClientFeature","clientFeatureProps","generateSchemaMap","Array","isArray","length","schemaMap","Map","set","markdownTransformers","nodes","converters","html","converter","node","parent","req","childrenText","lexicalNodes","children","rel","newTab","target","href","url","linkType","doc","value","id","nodeTypes","getType","validations","getSubFields","getSubFieldsData","graphQLPopulationPromises","sanitizedServerFeatureProps","key"],"mappings":"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"}