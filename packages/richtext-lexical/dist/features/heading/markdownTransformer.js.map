{"version":3,"sources":["../../../src/features/heading/markdownTransformer.ts"],"sourcesContent":["import type { ElementTransformer } from '@lexical/markdown'\nimport type { HeadingTagType } from '@lexical/rich-text'\n\nimport { $createHeadingNode, $isHeadingNode, HeadingNode } from '@lexical/rich-text'\n\nimport { createBlockNode } from '../../lexical/utils/markdown/createBlockNode.js'\n\nexport const MarkdownTransformer: (enabledHeadingSizes: HeadingTagType[]) => ElementTransformer = (\n  enabledHeadingSizes,\n) => {\n  // Convert enabledHeadingSizes to a list of numbers (1 for h1, 2 for h2, etc.)\n  const enabledSizes = enabledHeadingSizes.map((tag) => Number(tag.slice(1)))\n\n  // Create a regex pattern that matches any of the enabled sizes\n  const pattern = `^(${enabledSizes.map((size) => `#{${size}}`).join('|')})\\\\s`\n  const regExp = new RegExp(pattern)\n\n  return {\n    type: 'element',\n    dependencies: [HeadingNode],\n    export: (node, exportChildren) => {\n      if (!$isHeadingNode(node)) {\n        return null\n      }\n      const level = Number(node.getTag().slice(1))\n      return '#'.repeat(level) + ' ' + exportChildren(node)\n    },\n    regExp,\n    replace: createBlockNode((match) => {\n      const tag = ('h' + match[1].length) as HeadingTagType\n      return $createHeadingNode(tag)\n    }),\n  }\n}\n"],"names":["$createHeadingNode","$isHeadingNode","HeadingNode","createBlockNode","MarkdownTransformer","enabledHeadingSizes","enabledSizes","map","tag","Number","slice","pattern","size","join","regExp","RegExp","type","dependencies","export","node","exportChildren","level","getTag","repeat","replace","match","length"],"mappings":"AAGA,SAASA,kBAAkB,EAAEC,cAAc,EAAEC,WAAW,QAAQ,qBAAoB;AAEpF,SAASC,eAAe,QAAQ,kDAAiD;AAEjF,OAAO,MAAMC,sBAAqF,CAChGC;IAEA,8EAA8E;IAC9E,MAAMC,eAAeD,oBAAoBE,GAAG,CAAC,CAACC,MAAQC,OAAOD,IAAIE,KAAK,CAAC;IAEvE,+DAA+D;IAC/D,MAAMC,UAAU,CAAC,EAAE,EAAEL,aAAaC,GAAG,CAAC,CAACK,OAAS,CAAC,EAAE,EAAEA,KAAK,CAAC,CAAC,EAAEC,IAAI,CAAC,KAAK,IAAI,CAAC;IAC7E,MAAMC,SAAS,IAAIC,OAAOJ;IAE1B,OAAO;QACLK,MAAM;QACNC,cAAc;YAACf;SAAY;QAC3BgB,QAAQ,CAACC,MAAMC;YACb,IAAI,CAACnB,eAAekB,OAAO;gBACzB,OAAO;YACT;YACA,MAAME,QAAQZ,OAAOU,KAAKG,MAAM,GAAGZ,KAAK,CAAC;YACzC,OAAO,IAAIa,MAAM,CAACF,SAAS,MAAMD,eAAeD;QAClD;QACAL;QACAU,SAASrB,gBAAgB,CAACsB;YACxB,MAAMjB,MAAO,MAAMiB,KAAK,CAAC,EAAE,CAACC,MAAM;YAClC,OAAO1B,mBAAmBQ;QAC5B;IACF;AACF,EAAC"}