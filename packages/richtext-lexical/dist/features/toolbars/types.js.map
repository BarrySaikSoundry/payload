{"version":3,"sources":["../../../src/features/toolbars/types.ts"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { BaseSelection, LexicalEditor } from 'lexical'\nimport type React from 'react'\n\nimport type { EditorConfigContextType } from '../../lexical/config/client/EditorConfigProvider.js'\n\nexport type ToolbarGroup =\n  | {\n      /**\n       * All toolbar items part of this toolbar group need to be added here.\n       */\n      items: Array<ToolbarGroupItem>\n      /**\n       * Each toolbar group needs to have a unique key. Groups with the same keys will have their items merged together.\n       */\n      key: string\n      /**\n       * Determines where the toolbar group will be.\n       */\n      order?: number\n      /**\n       * Controls the toolbar group type. Set to `buttons` to create a buttons toolbar group, which displays toolbar items horizontally using only their icons.\n       */\n      type: 'buttons'\n    }\n  | {\n      /**\n       * The dropdown toolbar ChildComponent allows you to pass in a React Component which will be displayed within the dropdown button.\n       */\n      ChildComponent?: React.FC\n      /**\n       * All toolbar items part of this toolbar group need to be added here.\n       */\n      items: Array<ToolbarGroupItem>\n      /**\n       * Each toolbar group needs to have a unique key. Groups with the same keys will have their items merged together.\n       */\n      key: string\n      /**\n       * Determines where the toolbar group will be.\n       */\n      order?: number\n      /**\n       * Controls the toolbar group type. Set to `dropdown` to create a buttons toolbar group, which displays toolbar items vertically using their icons and labels, if the dropdown is open.\n       */\n      type: 'dropdown'\n    }\n\nexport type ToolbarGroupItem = {\n  /** A React component which is rendered within your toolbar item's default button component. Usually, you want this to be an icon. */\n  ChildComponent?: React.FC\n  /** A React component which is rendered in place of the toolbar item's default button component, thus completely replacing it. The `ChildComponent` and `onSelect` properties will be ignored. */\n  Component?: React.FC<{\n    active?: boolean\n    anchorElem: HTMLElement\n    editor: LexicalEditor\n    enabled?: boolean\n    item: ToolbarGroupItem\n  }>\n  /** This is optional and controls if the toolbar item is highlighted or not. */\n  isActive?: ({\n    editor,\n    editorConfigContext,\n    selection,\n  }: {\n    editor: LexicalEditor\n    editorConfigContext: EditorConfigContextType\n    selection: BaseSelection\n  }) => boolean\n  /** This is optional and controls if the toolbar item is clickable or not. If `false` is returned here, it will be grayed out and unclickable. */\n  isEnabled?: ({\n    editor,\n    editorConfigContext,\n    selection,\n  }: {\n    editor: LexicalEditor\n    editorConfigContext: EditorConfigContextType\n    selection: BaseSelection\n  }) => boolean\n  /** Each toolbar item needs to have a unique key. */\n  key: string\n  /** The label will be displayed in your toolbar item, if it's within a dropdown group. In order to make use of i18n, this can be a function. */\n  label?: (({ i18n }: { i18n: I18nClient<{}, string> }) => string) | string\n  /** Each toolbar item needs to have a unique key. */\n  onSelect?: ({ editor, isActive }: { editor: LexicalEditor; isActive: boolean }) => void\n  order?: number\n}\n"],"names":[],"mappings":"AAgDA,WAsCC"}