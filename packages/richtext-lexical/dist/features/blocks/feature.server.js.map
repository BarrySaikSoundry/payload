{"version":3,"sources":["../../../src/features/blocks/feature.server.ts"],"sourcesContent":["import type { Block, BlockField, Config, Field } from 'payload'\n\nimport { baseBlockFields, fieldsToJSONSchema, formatLabels, sanitizeFields } from 'payload'\n\nimport type { BlocksFeatureClientProps } from './feature.client.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { BlocksFeatureClient } from '../../exports/client/index.js'\nimport { createServerFeature } from '../../utilities/createServerFeature.js'\nimport { createNode } from '../typeUtilities.js'\nimport { blockPopulationPromiseHOC } from './graphQLPopulationPromise.js'\nimport { i18n } from './i18n.js'\nimport { BlockNode } from './nodes/BlocksNode.js'\nimport { blockValidationHOC } from './validate.js'\n\nexport type BlocksFeatureProps = {\n  blocks: Block[]\n}\n\nexport const BlocksFeature = createServerFeature<\n  BlocksFeatureProps,\n  BlocksFeatureProps,\n  BlocksFeatureClientProps\n>({\n  feature: async ({ config: _config, isRoot, props }) => {\n    if (props?.blocks?.length) {\n      const validRelationships = _config.collections.map((c) => c.slug) || []\n\n      for (const block of props.blocks) {\n        block.fields = block.fields.concat(baseBlockFields)\n        block.labels = !block.labels ? formatLabels(block.slug) : block.labels\n\n        block.fields = await sanitizeFields({\n          config: _config as unknown as Config,\n          fields: block.fields,\n          requireFieldLevelRichTextEditor: isRoot,\n          validRelationships,\n        })\n      }\n    }\n\n    // Build clientProps\n    const clientProps: BlocksFeatureClientProps = {\n      reducedBlocks: [],\n    }\n    for (const block of props.blocks) {\n      clientProps.reducedBlocks.push({\n        slug: block.slug,\n        fieldMap: [],\n        imageAltText: block.imageAltText,\n        imageURL: block.imageURL,\n        labels: block.labels,\n      })\n    }\n\n    return {\n      ClientFeature: BlocksFeatureClient,\n      clientFeatureProps: clientProps,\n      generateSchemaMap: ({ props }) => {\n        /**\n         * Add sub-fields to the schemaMap. E.g. if you have an array field as part of the block, and it runs addRow, it will request these\n         * sub-fields from the component map. Thus, we need to put them in the component map here.\n         */\n        const schemaMap = new Map<string, Field[]>()\n\n        for (const block of props.blocks) {\n          schemaMap.set(block.slug, block.fields || [])\n        }\n\n        return schemaMap\n      },\n      generatedTypes: {\n        modifyOutputSchema: ({\n          collectionIDFieldTypes,\n          config,\n          currentSchema,\n          field,\n          interfaceNameDefinitions,\n        }) => {\n          if (!props?.blocks?.length) {\n            return currentSchema\n          }\n\n          const blocksField: BlockField = {\n            name: field?.name + '_lexical_blocks',\n            type: 'blocks',\n            blocks: props.blocks,\n          }\n          // This is only done so that interfaceNameDefinitions sets those block's interfaceNames.\n          // we don't actually use the JSON Schema itself in the generated types yet.\n          fieldsToJSONSchema(\n            collectionIDFieldTypes,\n            [blocksField],\n            interfaceNameDefinitions,\n            config,\n          )\n\n          return currentSchema\n        },\n      },\n      i18n,\n      nodes: [\n        createNode({\n          getSubFields: ({ node }) => {\n            const blockType = node.fields.blockType\n\n            const block = props.blocks.find((block) => block.slug === blockType)\n            return block?.fields\n          },\n          getSubFieldsData: ({ node }) => {\n            return node?.fields\n          },\n          graphQLPopulationPromises: [blockPopulationPromiseHOC(props)],\n          node: BlockNode,\n          validations: [blockValidationHOC(props)],\n        }),\n      ],\n      sanitizedServerFeatureProps: props,\n    }\n  },\n  key: 'blocks',\n})\n"],"names":["baseBlockFields","fieldsToJSONSchema","formatLabels","sanitizeFields","BlocksFeatureClient","createServerFeature","createNode","blockPopulationPromiseHOC","i18n","BlockNode","blockValidationHOC","BlocksFeature","feature","config","_config","isRoot","props","blocks","length","validRelationships","collections","map","c","slug","block","fields","concat","labels","requireFieldLevelRichTextEditor","clientProps","reducedBlocks","push","fieldMap","imageAltText","imageURL","ClientFeature","clientFeatureProps","generateSchemaMap","schemaMap","Map","set","generatedTypes","modifyOutputSchema","collectionIDFieldTypes","currentSchema","field","interfaceNameDefinitions","blocksField","name","type","nodes","getSubFields","node","blockType","find","getSubFieldsData","graphQLPopulationPromises","validations","sanitizedServerFeatureProps","key"],"mappings":"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"}