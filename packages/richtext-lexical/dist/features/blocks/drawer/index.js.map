{"version":3,"sources":["../../../../src/features/blocks/drawer/index.tsx"],"sourcesContent":["'use client'\nimport type { LexicalCommand, LexicalEditor } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport {\n  BlocksDrawer,\n  formatDrawerSlug,\n  useEditDepth,\n  useModal,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { $getNodeByKey, COMMAND_PRIORITY_EDITOR, createCommand } from 'lexical'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport type { ClientComponentProps } from '../../typesClient.js'\nimport type { BlocksFeatureClientProps } from '../feature.client.js'\n\nimport { useEditorConfigContext } from '../../../lexical/config/client/EditorConfigProvider.js'\nimport { $createBlockNode } from '../nodes/BlocksNode.js'\nimport { INSERT_BLOCK_COMMAND } from '../plugin/commands.js'\nconst baseClass = 'lexical-blocks-drawer'\n\nexport const INSERT_BLOCK_WITH_DRAWER_COMMAND: LexicalCommand<{\n  replace: { nodeKey: string } | false\n}> = createCommand('INSERT_BLOCK_WITH_DRAWER_COMMAND')\n\nconst insertBlock = ({\n  blockType,\n  editor,\n  replaceNodeKey,\n}: {\n  blockType: string\n  editor: LexicalEditor\n  replaceNodeKey: null | string\n}) => {\n  if (!replaceNodeKey) {\n    editor.dispatchCommand(INSERT_BLOCK_COMMAND, {\n      id: null,\n      blockName: '',\n      blockType,\n    })\n  } else {\n    editor.update(() => {\n      const node = $getNodeByKey(replaceNodeKey)\n      if (node) {\n        node.replace(\n          $createBlockNode({\n            id: null,\n            blockName: '',\n            blockType,\n          }),\n        )\n      }\n    })\n  }\n}\n\nexport const BlocksDrawerComponent: React.FC = () => {\n  const [editor] = useLexicalComposerContext()\n  const { editorConfig, uuid } = useEditorConfigContext()\n\n  const [replaceNodeKey, setReplaceNodeKey] = useState<null | string>(null)\n  const editDepth = useEditDepth()\n  const { t } = useTranslation()\n  const { openModal } = useModal()\n\n  const labels = {\n    plural: t('fields:blocks') || 'Blocks',\n    singular: t('fields:block') || 'Block',\n  }\n\n  const addRow = useCallback(\n    (rowIndex: number, blockType: string) => {\n      insertBlock({\n        blockType,\n        editor,\n        replaceNodeKey,\n      })\n    },\n    [editor, replaceNodeKey],\n  )\n\n  const drawerSlug = formatDrawerSlug({\n    slug: `lexical-rich-text-blocks-` + uuid,\n    depth: editDepth,\n  })\n\n  const reducedBlocks = (\n    editorConfig?.resolvedFeatureMap?.get('blocks')\n      ?.sanitizedClientFeatureProps as ClientComponentProps<BlocksFeatureClientProps>\n  )?.reducedBlocks\n\n  useEffect(() => {\n    return editor.registerCommand<{\n      replace: { nodeKey: string } | false\n    }>(\n      INSERT_BLOCK_WITH_DRAWER_COMMAND,\n      (payload) => {\n        setReplaceNodeKey(payload?.replace ? payload?.replace.nodeKey : null)\n        openModal(drawerSlug)\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR,\n    )\n  }, [editor, drawerSlug, openModal])\n\n  return (\n    <BlocksDrawer\n      addRow={addRow}\n      addRowIndex={0}\n      blocks={reducedBlocks}\n      drawerSlug={drawerSlug}\n      labels={labels}\n    />\n  )\n}\n"],"names":["useLexicalComposerContext","BlocksDrawer","formatDrawerSlug","useEditDepth","useModal","useTranslation","$getNodeByKey","COMMAND_PRIORITY_EDITOR","createCommand","React","useCallback","useEffect","useState","useEditorConfigContext","$createBlockNode","INSERT_BLOCK_COMMAND","baseClass","INSERT_BLOCK_WITH_DRAWER_COMMAND","insertBlock","blockType","editor","replaceNodeKey","dispatchCommand","id","blockName","update","node","replace","BlocksDrawerComponent","editorConfig","uuid","setReplaceNodeKey","editDepth","t","openModal","labels","plural","singular","addRow","rowIndex","drawerSlug","slug","depth","reducedBlocks","resolvedFeatureMap","get","sanitizedClientFeatureProps","registerCommand","payload","nodeKey","addRowIndex","blocks"],"mappings":"AAAA;;AAGA,SAASA,yBAAyB,QAAQ,2CAA0C;AACpF,SACEC,YAAY,EACZC,gBAAgB,EAChBC,YAAY,EACZC,QAAQ,EACRC,cAAc,QACT,iBAAgB;AACvB,SAASC,aAAa,EAAEC,uBAAuB,EAAEC,aAAa,QAAQ,UAAS;AAC/E,OAAOC,SAASC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAK/D,SAASC,sBAAsB,QAAQ,yDAAwD;AAC/F,SAASC,gBAAgB,QAAQ,yBAAwB;AACzD,SAASC,oBAAoB,QAAQ,wBAAuB;AAC5D,MAAMC,YAAY;AAElB,OAAO,MAAMC,mCAERT,cAAc,oCAAmC;AAEtD,MAAMU,cAAc,CAAC,EACnBC,SAAS,EACTC,MAAM,EACNC,cAAc,EAKf;IACC,IAAI,CAACA,gBAAgB;QACnBD,OAAOE,eAAe,CAACP,sBAAsB;YAC3CQ,IAAI;YACJC,WAAW;YACXL;QACF;IACF,OAAO;QACLC,OAAOK,MAAM,CAAC;YACZ,MAAMC,OAAOpB,cAAce;YAC3B,IAAIK,MAAM;gBACRA,KAAKC,OAAO,CACVb,iBAAiB;oBACfS,IAAI;oBACJC,WAAW;oBACXL;gBACF;YAEJ;QACF;IACF;AACF;AAEA,OAAO,MAAMS,wBAAkC;IAC7C,MAAM,CAACR,OAAO,GAAGpB;IACjB,MAAM,EAAE6B,YAAY,EAAEC,IAAI,EAAE,GAAGjB;IAE/B,MAAM,CAACQ,gBAAgBU,kBAAkB,GAAGnB,SAAwB;IACpE,MAAMoB,YAAY7B;IAClB,MAAM,EAAE8B,CAAC,EAAE,GAAG5B;IACd,MAAM,EAAE6B,SAAS,EAAE,GAAG9B;IAEtB,MAAM+B,SAAS;QACbC,QAAQH,EAAE,oBAAoB;QAC9BI,UAAUJ,EAAE,mBAAmB;IACjC;IAEA,MAAMK,SAAS5B,YACb,CAAC6B,UAAkBpB;QACjBD,YAAY;YACVC;YACAC;YACAC;QACF;IACF,GACA;QAACD;QAAQC;KAAe;IAG1B,MAAMmB,aAAatC,iBAAiB;QAClCuC,MAAM,CAAC,yBAAyB,CAAC,GAAGX;QACpCY,OAAOV;IACT;IAEA,MAAMW,gBACJd,cAAce,oBAAoBC,IAAI,WAClCC,6BACHH;IAEHhC,UAAU;QACR,OAAOS,OAAO2B,eAAe,CAG3B9B,kCACA,CAAC+B;YACCjB,kBAAkBiB,SAASrB,UAAUqB,SAASrB,QAAQsB,UAAU;YAChEf,UAAUM;YACV,OAAO;QACT,GACAjC;IAEJ,GAAG;QAACa;QAAQoB;QAAYN;KAAU;IAElC,qBACE,KAACjC;QACCqC,QAAQA;QACRY,aAAa;QACbC,QAAQR;QACRH,YAAYA;QACZL,QAAQA;;AAGd,EAAC"}