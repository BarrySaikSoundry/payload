{"version":3,"sources":["../../../../src/features/lists/checklist/feature.client.tsx"],"sourcesContent":["'use client'\nimport { $isListNode, INSERT_CHECK_LIST_COMMAND, ListItemNode, ListNode } from '@lexical/list'\nimport { $isRangeSelection } from 'lexical'\n\nimport type { ToolbarGroup } from '../../toolbars/types.js'\nimport type { ClientFeature } from '../../typesClient.js'\n\nimport { ChecklistIcon } from '../../../lexical/ui/icons/Checklist/index.js'\nimport { createClientFeature } from '../../../utilities/createClientFeature.js'\nimport { toolbarTextDropdownGroupWithItems } from '../../shared/toolbar/textDropdownGroup.js'\nimport { LexicalListPlugin } from '../plugin/index.js'\nimport { slashMenuListGroupWithItems } from '../shared/slashMenuListGroup.js'\nimport { CHECK_LIST } from './markdownTransformers.js'\nimport { LexicalCheckListPlugin } from './plugin/index.js'\n\nconst toolbarGroups: ToolbarGroup[] = [\n  toolbarTextDropdownGroupWithItems([\n    {\n      ChildComponent: ChecklistIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if ($isListNode(node) && node.getListType() === 'check') {\n            continue\n          }\n\n          const parent = node.getParent()\n\n          if ($isListNode(parent) && parent.getListType() === 'check') {\n            continue\n          }\n\n          const parentParent = parent?.getParent()\n          // Example scenario: Node = textNode, parent = listItemNode, parentParent = listNode\n          if ($isListNode(parentParent) && parentParent.getListType() === 'check') {\n            continue\n          }\n\n          return false\n        }\n        return true\n      },\n      key: 'checklist',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:checklist:label')\n      },\n      onSelect: ({ editor }) => {\n        editor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined)\n      },\n      order: 12,\n    },\n  ]),\n]\n\nexport const ChecklistFeatureClient = createClientFeature(({ featureProviderMap }) => {\n  const plugins: ClientFeature<undefined>['plugins'] = [\n    {\n      Component: LexicalCheckListPlugin,\n      position: 'normal',\n    },\n  ]\n\n  if (!featureProviderMap.has('unorderedList') && !featureProviderMap.has('orderedList')) {\n    plugins.push({\n      Component: LexicalListPlugin,\n      position: 'normal',\n    })\n  }\n\n  return {\n    markdownTransformers: [CHECK_LIST],\n    nodes:\n      featureProviderMap.has('unorderedList') || featureProviderMap.has('orderedList')\n        ? []\n        : [ListNode, ListItemNode],\n    plugins,\n    slashMenu: {\n      groups: [\n        slashMenuListGroupWithItems([\n          {\n            Icon: ChecklistIcon,\n            key: 'checklist',\n            keywords: ['check list', 'check', 'checklist', 'cl'],\n            label: ({ i18n }) => {\n              return i18n.t('lexical:checklist:label')\n            },\n            onSelect: ({ editor }) => {\n              editor.dispatchCommand(INSERT_CHECK_LIST_COMMAND, undefined)\n            },\n          },\n        ]),\n      ],\n    },\n    toolbarFixed: {\n      groups: toolbarGroups,\n    },\n    toolbarInline: {\n      groups: toolbarGroups,\n    },\n  }\n})\n"],"names":["$isListNode","INSERT_CHECK_LIST_COMMAND","ListItemNode","ListNode","$isRangeSelection","ChecklistIcon","createClientFeature","toolbarTextDropdownGroupWithItems","LexicalListPlugin","slashMenuListGroupWithItems","CHECK_LIST","LexicalCheckListPlugin","toolbarGroups","ChildComponent","isActive","selection","node","getNodes","getListType","parent","getParent","parentParent","key","label","i18n","t","onSelect","editor","dispatchCommand","undefined","order","ChecklistFeatureClient","featureProviderMap","plugins","Component","position","has","push","markdownTransformers","nodes","slashMenu","groups","Icon","keywords","toolbarFixed","toolbarInline"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,yBAAyB,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,gBAAe;AAC9F,SAASC,iBAAiB,QAAQ,UAAS;AAK3C,SAASC,aAAa,QAAQ,+CAA8C;AAC5E,SAASC,mBAAmB,QAAQ,4CAA2C;AAC/E,SAASC,iCAAiC,QAAQ,4CAA2C;AAC7F,SAASC,iBAAiB,QAAQ,qBAAoB;AACtD,SAASC,2BAA2B,QAAQ,kCAAiC;AAC7E,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,sBAAsB,QAAQ,oBAAmB;AAE1D,MAAMC,gBAAgC;IACpCL,kCAAkC;QAChC;YACEM,gBAAgBR;YAChBS,UAAU,CAAC,EAAEC,SAAS,EAAE;gBACtB,IAAI,CAACX,kBAAkBW,YAAY;oBACjC,OAAO;gBACT;gBACA,KAAK,MAAMC,QAAQD,UAAUE,QAAQ,GAAI;oBACvC,IAAIjB,YAAYgB,SAASA,KAAKE,WAAW,OAAO,SAAS;wBACvD;oBACF;oBAEA,MAAMC,SAASH,KAAKI,SAAS;oBAE7B,IAAIpB,YAAYmB,WAAWA,OAAOD,WAAW,OAAO,SAAS;wBAC3D;oBACF;oBAEA,MAAMG,eAAeF,QAAQC;oBAC7B,oFAAoF;oBACpF,IAAIpB,YAAYqB,iBAAiBA,aAAaH,WAAW,OAAO,SAAS;wBACvE;oBACF;oBAEA,OAAO;gBACT;gBACA,OAAO;YACT;YACAI,KAAK;YACLC,OAAO,CAAC,EAAEC,IAAI,EAAE;gBACd,OAAOA,KAAKC,CAAC,CAAC;YAChB;YACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;gBACnBA,OAAOC,eAAe,CAAC3B,2BAA2B4B;YACpD;YACAC,OAAO;QACT;KACD;CACF;AAED,OAAO,MAAMC,yBAAyBzB,oBAAoB,CAAC,EAAE0B,kBAAkB,EAAE;IAC/E,MAAMC,UAA+C;QACnD;YACEC,WAAWvB;YACXwB,UAAU;QACZ;KACD;IAED,IAAI,CAACH,mBAAmBI,GAAG,CAAC,oBAAoB,CAACJ,mBAAmBI,GAAG,CAAC,gBAAgB;QACtFH,QAAQI,IAAI,CAAC;YACXH,WAAW1B;YACX2B,UAAU;QACZ;IACF;IAEA,OAAO;QACLG,sBAAsB;YAAC5B;SAAW;QAClC6B,OACEP,mBAAmBI,GAAG,CAAC,oBAAoBJ,mBAAmBI,GAAG,CAAC,iBAC9D,EAAE,GACF;YAACjC;YAAUD;SAAa;QAC9B+B;QACAO,WAAW;YACTC,QAAQ;gBACNhC,4BAA4B;oBAC1B;wBACEiC,MAAMrC;wBACNiB,KAAK;wBACLqB,UAAU;4BAAC;4BAAc;4BAAS;4BAAa;yBAAK;wBACpDpB,OAAO,CAAC,EAAEC,IAAI,EAAE;4BACd,OAAOA,KAAKC,CAAC,CAAC;wBAChB;wBACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;4BACnBA,OAAOC,eAAe,CAAC3B,2BAA2B4B;wBACpD;oBACF;iBACD;aACF;QACH;QACAe,cAAc;YACZH,QAAQ7B;QACV;QACAiC,eAAe;YACbJ,QAAQ7B;QACV;IACF;AACF,GAAE"}