{"version":3,"sources":["../../../../src/features/migrations/slateToLexical/feature.server.ts"],"sourcesContent":["import type React from 'react'\n\nimport type { SlateNodeConverterProvider } from './converter/types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { SlateToLexicalFeatureClient } from '../../../exports/client/index.js'\nimport { createServerFeature } from '../../../utilities/createServerFeature.js'\nimport { defaultSlateConverters } from './converter/defaultConverters.js'\nimport { UnknownConvertedNode } from './nodes/unknownConvertedNode/index.js'\n\nexport type SlateToLexicalFeatureProps = {\n  converters?:\n    | (({\n        defaultConverters,\n      }: {\n        defaultConverters: SlateNodeConverterProvider[]\n      }) => SlateNodeConverterProvider[])\n    | SlateNodeConverterProvider[]\n}\n\nexport const SlateToLexicalFeature = createServerFeature<\n  SlateToLexicalFeatureProps,\n  {\n    converters?: SlateNodeConverterProvider[]\n  }\n>({\n  feature: ({ props }) => {\n    if (!props) {\n      props = {}\n    }\n\n    let converters: SlateNodeConverterProvider[] = []\n    if (props?.converters && typeof props?.converters === 'function') {\n      converters = props.converters({ defaultConverters: defaultSlateConverters })\n    } else if (props.converters && typeof props?.converters !== 'function') {\n      converters = props.converters\n    } else {\n      converters = defaultSlateConverters\n    }\n\n    props.converters = converters\n\n    return {\n      ClientFeature: SlateToLexicalFeatureClient,\n      generateComponentMap: () => {\n        const map: {\n          [key: string]: React.FC\n        } = {}\n\n        for (const converter of converters) {\n          if (converter.ClientConverter) {\n            const key = converter.converter.nodeTypes.join('-')\n            map[key] = converter.ClientConverter\n          }\n        }\n\n        return map\n      },\n      nodes: [\n        {\n          node: UnknownConvertedNode,\n        },\n      ],\n      sanitizedServerFeatureProps: {\n        converters,\n      },\n    }\n  },\n  key: 'slateToLexical',\n})\n"],"names":["SlateToLexicalFeatureClient","createServerFeature","defaultSlateConverters","UnknownConvertedNode","SlateToLexicalFeature","feature","props","converters","defaultConverters","ClientFeature","generateComponentMap","map","converter","ClientConverter","key","nodeTypes","join","nodes","node","sanitizedServerFeatureProps"],"mappings":"AAIA,+DAA+D;AAC/D,SAASA,2BAA2B,QAAQ,mCAAkC;AAC9E,SAASC,mBAAmB,QAAQ,4CAA2C;AAC/E,SAASC,sBAAsB,QAAQ,mCAAkC;AACzE,SAASC,oBAAoB,QAAQ,wCAAuC;AAY5E,OAAO,MAAMC,wBAAwBH,oBAKnC;IACAI,SAAS,CAAC,EAAEC,KAAK,EAAE;QACjB,IAAI,CAACA,OAAO;YACVA,QAAQ,CAAC;QACX;QAEA,IAAIC,aAA2C,EAAE;QACjD,IAAID,OAAOC,cAAc,OAAOD,OAAOC,eAAe,YAAY;YAChEA,aAAaD,MAAMC,UAAU,CAAC;gBAAEC,mBAAmBN;YAAuB;QAC5E,OAAO,IAAII,MAAMC,UAAU,IAAI,OAAOD,OAAOC,eAAe,YAAY;YACtEA,aAAaD,MAAMC,UAAU;QAC/B,OAAO;YACLA,aAAaL;QACf;QAEAI,MAAMC,UAAU,GAAGA;QAEnB,OAAO;YACLE,eAAeT;YACfU,sBAAsB;gBACpB,MAAMC,MAEF,CAAC;gBAEL,KAAK,MAAMC,aAAaL,WAAY;oBAClC,IAAIK,UAAUC,eAAe,EAAE;wBAC7B,MAAMC,MAAMF,UAAUA,SAAS,CAACG,SAAS,CAACC,IAAI,CAAC;wBAC/CL,GAAG,CAACG,IAAI,GAAGF,UAAUC,eAAe;oBACtC;gBACF;gBAEA,OAAOF;YACT;YACAM,OAAO;gBACL;oBACEC,MAAMf;gBACR;aACD;YACDgB,6BAA6B;gBAC3BZ;YACF;QACF;IACF;IACAO,KAAK;AACP,GAAE"}