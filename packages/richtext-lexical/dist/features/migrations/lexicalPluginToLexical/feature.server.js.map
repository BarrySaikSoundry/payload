{"version":3,"sources":["../../../../src/features/migrations/lexicalPluginToLexical/feature.server.ts"],"sourcesContent":["import type React from 'react'\n\nimport type { LexicalPluginNodeConverterProvider } from './converter/types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { LexicalPluginToLexicalFeatureClient } from '../../../exports/client/index.js'\nimport { createServerFeature } from '../../../utilities/createServerFeature.js'\nimport { defaultConverters } from './converter/defaultConverters.js'\nimport { UnknownConvertedNode } from './nodes/unknownConvertedNode/index.js'\n\nexport type LexicalPluginToLexicalFeatureProps = {\n  converters?:\n    | (({\n        defaultConverters,\n      }: {\n        defaultConverters: LexicalPluginNodeConverterProvider[]\n      }) => LexicalPluginNodeConverterProvider[])\n    | LexicalPluginNodeConverterProvider[]\n}\n\nexport const LexicalPluginToLexicalFeature =\n  createServerFeature<LexicalPluginToLexicalFeatureProps>({\n    feature: ({ props }) => {\n      if (!props) {\n        props = {}\n      }\n\n      let converters: LexicalPluginNodeConverterProvider[] = []\n\n      if (props?.converters && typeof props?.converters === 'function') {\n        converters = props.converters({ defaultConverters })\n      } else if (props.converters && typeof props?.converters !== 'function') {\n        converters = props.converters\n      } else {\n        converters = defaultConverters\n      }\n\n      props.converters = converters\n\n      return {\n        ClientFeature: LexicalPluginToLexicalFeatureClient,\n        generateComponentMap: () => {\n          const map: {\n            [key: string]: React.FC\n          } = {}\n\n          for (const converter of converters) {\n            if (converter.ClientConverter) {\n              const key = converter.converter.nodeTypes.join('-')\n              map[key] = converter.ClientConverter\n            }\n          }\n\n          return map\n        },\n        nodes: [\n          {\n            node: UnknownConvertedNode,\n          },\n        ],\n        sanitizedServerFeatureProps: props,\n      }\n    },\n    key: 'lexicalPluginToLexical',\n  })\n"],"names":["LexicalPluginToLexicalFeatureClient","createServerFeature","defaultConverters","UnknownConvertedNode","LexicalPluginToLexicalFeature","feature","props","converters","ClientFeature","generateComponentMap","map","converter","ClientConverter","key","nodeTypes","join","nodes","node","sanitizedServerFeatureProps"],"mappings":"AAIA,+DAA+D;AAC/D,SAASA,mCAAmC,QAAQ,mCAAkC;AACtF,SAASC,mBAAmB,QAAQ,4CAA2C;AAC/E,SAASC,iBAAiB,QAAQ,mCAAkC;AACpE,SAASC,oBAAoB,QAAQ,wCAAuC;AAY5E,OAAO,MAAMC,gCACXH,oBAAwD;IACtDI,SAAS,CAAC,EAAEC,KAAK,EAAE;QACjB,IAAI,CAACA,OAAO;YACVA,QAAQ,CAAC;QACX;QAEA,IAAIC,aAAmD,EAAE;QAEzD,IAAID,OAAOC,cAAc,OAAOD,OAAOC,eAAe,YAAY;YAChEA,aAAaD,MAAMC,UAAU,CAAC;gBAAEL;YAAkB;QACpD,OAAO,IAAII,MAAMC,UAAU,IAAI,OAAOD,OAAOC,eAAe,YAAY;YACtEA,aAAaD,MAAMC,UAAU;QAC/B,OAAO;YACLA,aAAaL;QACf;QAEAI,MAAMC,UAAU,GAAGA;QAEnB,OAAO;YACLC,eAAeR;YACfS,sBAAsB;gBACpB,MAAMC,MAEF,CAAC;gBAEL,KAAK,MAAMC,aAAaJ,WAAY;oBAClC,IAAII,UAAUC,eAAe,EAAE;wBAC7B,MAAMC,MAAMF,UAAUA,SAAS,CAACG,SAAS,CAACC,IAAI,CAAC;wBAC/CL,GAAG,CAACG,IAAI,GAAGF,UAAUC,eAAe;oBACtC;gBACF;gBAEA,OAAOF;YACT;YACAM,OAAO;gBACL;oBACEC,MAAMd;gBACR;aACD;YACDe,6BAA6BZ;QAC/B;IACF;IACAO,KAAK;AACP,GAAE"}