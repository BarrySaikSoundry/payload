{"version":3,"sources":["../../../src/features/paragraph/feature.client.tsx"],"sourcesContent":["'use client'\n\nimport { $setBlocksType } from '@lexical/selection'\nimport { $createParagraphNode, $getSelection, $isParagraphNode, $isRangeSelection } from 'lexical'\n\nimport type { ToolbarGroup } from '../toolbars/types.js'\n\nimport { TextIcon } from '../../lexical/ui/icons/Text/index.js'\nimport { createClientFeature } from '../../utilities/createClientFeature.js'\nimport { slashMenuBasicGroupWithItems } from '../shared/slashMenu/basicGroup.js'\nimport { toolbarTextDropdownGroupWithItems } from '../shared/toolbar/textDropdownGroup.js'\n\nconst toolbarGroups: ToolbarGroup[] = [\n  toolbarTextDropdownGroupWithItems([\n    {\n      ChildComponent: TextIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if (!$isParagraphNode(node) && !$isParagraphNode(node.getParent())) {\n            return false\n          }\n        }\n        return true\n      },\n      key: 'paragraph',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:paragraph:label2')\n      },\n      onSelect: ({ editor }) => {\n        editor.update(() => {\n          const selection = $getSelection()\n          $setBlocksType(selection, () => $createParagraphNode())\n        })\n      },\n      order: 1,\n    },\n  ]),\n]\n\nexport const ParagraphFeatureClient = createClientFeature({\n  slashMenu: {\n    groups: [\n      slashMenuBasicGroupWithItems([\n        {\n          Icon: TextIcon,\n          key: 'paragraph',\n          keywords: ['normal', 'paragraph', 'p', 'text'],\n          label: ({ i18n }) => {\n            return i18n.t('lexical:paragraph:label')\n          },\n          onSelect: ({ editor }) => {\n            editor.update(() => {\n              const selection = $getSelection()\n              $setBlocksType(selection, () => $createParagraphNode())\n            })\n          },\n        },\n      ]),\n    ],\n  },\n  toolbarFixed: {\n    groups: toolbarGroups,\n  },\n  toolbarInline: {\n    groups: toolbarGroups,\n  },\n})\n"],"names":["$setBlocksType","$createParagraphNode","$getSelection","$isParagraphNode","$isRangeSelection","TextIcon","createClientFeature","slashMenuBasicGroupWithItems","toolbarTextDropdownGroupWithItems","toolbarGroups","ChildComponent","isActive","selection","node","getNodes","getParent","key","label","i18n","t","onSelect","editor","update","order","ParagraphFeatureClient","slashMenu","groups","Icon","keywords","toolbarFixed","toolbarInline"],"mappings":"AAAA;AAEA,SAASA,cAAc,QAAQ,qBAAoB;AACnD,SAASC,oBAAoB,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,iBAAiB,QAAQ,UAAS;AAIlG,SAASC,QAAQ,QAAQ,uCAAsC;AAC/D,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,4BAA4B,QAAQ,oCAAmC;AAChF,SAASC,iCAAiC,QAAQ,yCAAwC;AAE1F,MAAMC,gBAAgC;IACpCD,kCAAkC;QAChC;YACEE,gBAAgBL;YAChBM,UAAU,CAAC,EAAEC,SAAS,EAAE;gBACtB,IAAI,CAACR,kBAAkBQ,YAAY;oBACjC,OAAO;gBACT;gBACA,KAAK,MAAMC,QAAQD,UAAUE,QAAQ,GAAI;oBACvC,IAAI,CAACX,iBAAiBU,SAAS,CAACV,iBAAiBU,KAAKE,SAAS,KAAK;wBAClE,OAAO;oBACT;gBACF;gBACA,OAAO;YACT;YACAC,KAAK;YACLC,OAAO,CAAC,EAAEC,IAAI,EAAE;gBACd,OAAOA,KAAKC,CAAC,CAAC;YAChB;YACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;gBACnBA,OAAOC,MAAM,CAAC;oBACZ,MAAMV,YAAYV;oBAClBF,eAAeY,WAAW,IAAMX;gBAClC;YACF;YACAsB,OAAO;QACT;KACD;CACF;AAED,OAAO,MAAMC,yBAAyBlB,oBAAoB;IACxDmB,WAAW;QACTC,QAAQ;YACNnB,6BAA6B;gBAC3B;oBACEoB,MAAMtB;oBACNW,KAAK;oBACLY,UAAU;wBAAC;wBAAU;wBAAa;wBAAK;qBAAO;oBAC9CX,OAAO,CAAC,EAAEC,IAAI,EAAE;wBACd,OAAOA,KAAKC,CAAC,CAAC;oBAChB;oBACAC,UAAU,CAAC,EAAEC,MAAM,EAAE;wBACnBA,OAAOC,MAAM,CAAC;4BACZ,MAAMV,YAAYV;4BAClBF,eAAeY,WAAW,IAAMX;wBAClC;oBACF;gBACF;aACD;SACF;IACH;IACA4B,cAAc;QACZH,QAAQjB;IACV;IACAqB,eAAe;QACbJ,QAAQjB;IACV;AACF,GAAE"}