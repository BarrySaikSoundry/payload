{"version":3,"sources":["../../../src/features/relationship/feature.server.ts"],"sourcesContent":["import type { CollectionSlug } from 'payload'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { RelationshipFeatureClient } from '../../exports/client/index.js'\nimport { populate } from '../../populateGraphQL/populate.js'\nimport { createServerFeature } from '../../utilities/createServerFeature.js'\nimport { createNode } from '../typeUtilities.js'\nimport { relationshipPopulationPromiseHOC } from './graphQLPopulationPromise.js'\nimport { i18n } from './i18n.js'\nimport { RelationshipNode } from './nodes/RelationshipNode.js'\n\nexport type ExclusiveRelationshipFeatureProps =\n  | {\n      /**\n       * The collections that should be disabled. Overrides the `enableRichTextRelationship` property in the collection config.\n       * When this property is set, `enabledCollections` will not be available.\n       **/\n      disabledCollections?: CollectionSlug[]\n\n      // Ensures that enabledCollections is not available when disabledCollections is set\n      enabledCollections?: never\n    }\n  | {\n      // Ensures that disabledCollections is not available when enabledCollections is set\n      disabledCollections?: never\n\n      /**\n       * The collections that should be enabled. Overrides the `enableRichTextRelationship` property in the collection config\n       * When this property is set, `disabledCollections` will not be available.\n       **/\n      enabledCollections?: CollectionSlug[]\n    }\n\nexport type RelationshipFeatureProps = {\n  /**\n   * Sets a maximum population depth for this relationship, regardless of the remaining depth when the respective field is reached.\n   * This behaves exactly like the maxDepth properties of relationship and upload fields.\n   *\n   * {@link https://payloadcms.com/docs/getting-started/concepts#field-level-max-depth}\n   */\n  maxDepth?: number\n} & ExclusiveRelationshipFeatureProps\n\nexport const RelationshipFeature = createServerFeature<\n  RelationshipFeatureProps,\n  RelationshipFeatureProps\n>({\n  feature: ({ props }) => ({\n    ClientFeature: RelationshipFeatureClient,\n    i18n,\n    nodes: [\n      createNode({\n        graphQLPopulationPromises: [relationshipPopulationPromiseHOC(props)],\n        hooks: {\n          afterRead: [\n            ({\n              currentDepth,\n              depth,\n              draft,\n              node,\n              overrideAccess,\n              populationPromises,\n              req,\n              showHiddenFields,\n            }) => {\n              if (!node?.value) {\n                return node\n              }\n              const collection = req.payload.collections[node?.relationTo]\n\n              if (!collection) {\n                return node\n              }\n              // @ts-expect-error\n              const id = node?.value?.id || node?.value // for backwards-compatibility\n\n              const populateDepth =\n                props?.maxDepth !== undefined && props?.maxDepth < depth ? props?.maxDepth : depth\n\n              populationPromises.push(\n                populate({\n                  id,\n                  collectionSlug: collection.config.slug,\n                  currentDepth,\n                  data: node,\n                  depth: populateDepth,\n                  draft,\n                  key: 'value',\n                  overrideAccess,\n                  req,\n                  showHiddenFields,\n                }),\n              )\n\n              return node\n            },\n          ],\n        },\n        node: RelationshipNode,\n      }),\n    ],\n  }),\n  key: 'relationship',\n})\n"],"names":["RelationshipFeatureClient","populate","createServerFeature","createNode","relationshipPopulationPromiseHOC","i18n","RelationshipNode","RelationshipFeature","feature","props","ClientFeature","nodes","graphQLPopulationPromises","hooks","afterRead","currentDepth","depth","draft","node","overrideAccess","populationPromises","req","showHiddenFields","value","collection","payload","collections","relationTo","id","populateDepth","maxDepth","undefined","push","collectionSlug","config","slug","data","key"],"mappings":"AAEA,+DAA+D;AAC/D,SAASA,yBAAyB,QAAQ,gCAA+B;AACzE,SAASC,QAAQ,QAAQ,oCAAmC;AAC5D,SAASC,mBAAmB,QAAQ,yCAAwC;AAC5E,SAASC,UAAU,QAAQ,sBAAqB;AAChD,SAASC,gCAAgC,QAAQ,gCAA+B;AAChF,SAASC,IAAI,QAAQ,YAAW;AAChC,SAASC,gBAAgB,QAAQ,8BAA6B;AAkC9D,OAAO,MAAMC,sBAAsBL,oBAGjC;IACAM,SAAS,CAAC,EAAEC,KAAK,EAAE,GAAM,CAAA;YACvBC,eAAeV;YACfK;YACAM,OAAO;gBACLR,WAAW;oBACTS,2BAA2B;wBAACR,iCAAiCK;qBAAO;oBACpEI,OAAO;wBACLC,WAAW;4BACT,CAAC,EACCC,YAAY,EACZC,KAAK,EACLC,KAAK,EACLC,IAAI,EACJC,cAAc,EACdC,kBAAkB,EAClBC,GAAG,EACHC,gBAAgB,EACjB;gCACC,IAAI,CAACJ,MAAMK,OAAO;oCAChB,OAAOL;gCACT;gCACA,MAAMM,aAAaH,IAAII,OAAO,CAACC,WAAW,CAACR,MAAMS,WAAW;gCAE5D,IAAI,CAACH,YAAY;oCACf,OAAON;gCACT;gCACA,mBAAmB;gCACnB,MAAMU,KAAKV,MAAMK,OAAOK,MAAMV,MAAMK,MAAM,8BAA8B;;gCAExE,MAAMM,gBACJpB,OAAOqB,aAAaC,aAAatB,OAAOqB,WAAWd,QAAQP,OAAOqB,WAAWd;gCAE/EI,mBAAmBY,IAAI,CACrB/B,SAAS;oCACP2B;oCACAK,gBAAgBT,WAAWU,MAAM,CAACC,IAAI;oCACtCpB;oCACAqB,MAAMlB;oCACNF,OAAOa;oCACPZ;oCACAoB,KAAK;oCACLlB;oCACAE;oCACAC;gCACF;gCAGF,OAAOJ;4BACT;yBACD;oBACH;oBACAA,MAAMZ;gBACR;aACD;QACH,CAAA;IACA+B,KAAK;AACP,GAAE"}