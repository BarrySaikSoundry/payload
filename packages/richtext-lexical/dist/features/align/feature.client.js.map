{"version":3,"sources":["../../../src/features/align/feature.client.tsx"],"sourcesContent":["'use client'\n\nimport { $isElementNode, $isRangeSelection, FORMAT_ELEMENT_COMMAND } from 'lexical'\n\nimport type { ToolbarGroup } from '../toolbars/types.js'\n\nimport { AlignCenterIcon } from '../../lexical/ui/icons/AlignCenter/index.js'\nimport { AlignJustifyIcon } from '../../lexical/ui/icons/AlignJustify/index.js'\nimport { AlignLeftIcon } from '../../lexical/ui/icons/AlignLeft/index.js'\nimport { AlignRightIcon } from '../../lexical/ui/icons/AlignRight/index.js'\nimport { createClientFeature } from '../../utilities/createClientFeature.js'\nimport { toolbarAlignGroupWithItems } from './toolbarAlignGroup.js'\n\nconst toolbarGroups: ToolbarGroup[] = [\n  toolbarAlignGroupWithItems([\n    {\n      ChildComponent: AlignLeftIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if ($isElementNode(node)) {\n            if (node.getFormatType() === 'left') {\n              continue\n            }\n          }\n\n          const parent = node.getParent()\n          if ($isElementNode(parent)) {\n            if (parent.getFormatType() === 'left') {\n              continue\n            }\n          }\n\n          return false\n        }\n        return true\n      },\n      key: 'alignLeft',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:align:alignLeftLabel')\n      },\n      onSelect: ({ editor }) => {\n        editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'left')\n      },\n      order: 1,\n    },\n    {\n      ChildComponent: AlignCenterIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if ($isElementNode(node)) {\n            if (node.getFormatType() === 'center') {\n              continue\n            }\n          }\n\n          const parent = node.getParent()\n          if ($isElementNode(parent)) {\n            if (parent.getFormatType() === 'center') {\n              continue\n            }\n          }\n\n          return false\n        }\n        return true\n      },\n      key: 'alignCenter',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:align:alignCenterLabel')\n      },\n      onSelect: ({ editor }) => {\n        editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'center')\n      },\n      order: 2,\n    },\n    {\n      ChildComponent: AlignRightIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if ($isElementNode(node)) {\n            if (node.getFormatType() === 'right') {\n              continue\n            }\n          }\n\n          const parent = node.getParent()\n          if ($isElementNode(parent)) {\n            if (parent.getFormatType() === 'right') {\n              continue\n            }\n          }\n\n          return false\n        }\n        return true\n      },\n      key: 'alignRight',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:align:alignRightLabel')\n      },\n      onSelect: ({ editor }) => {\n        editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'right')\n      },\n      order: 3,\n    },\n    {\n      ChildComponent: AlignJustifyIcon,\n      isActive: ({ selection }) => {\n        if (!$isRangeSelection(selection)) {\n          return false\n        }\n        for (const node of selection.getNodes()) {\n          if ($isElementNode(node)) {\n            if (node.getFormatType() === 'justify') {\n              continue\n            }\n          }\n\n          const parent = node.getParent()\n          if ($isElementNode(parent)) {\n            if (parent.getFormatType() === 'justify') {\n              continue\n            }\n          }\n\n          return false\n        }\n        return true\n      },\n      key: 'alignJustify',\n      label: ({ i18n }) => {\n        return i18n.t('lexical:align:alignJustifyLabel')\n      },\n      onSelect: ({ editor }) => {\n        editor.dispatchCommand(FORMAT_ELEMENT_COMMAND, 'justify')\n      },\n      order: 4,\n    },\n  ]),\n]\n\nexport const AlignFeatureClient = createClientFeature({\n  toolbarFixed: {\n    groups: toolbarGroups,\n  },\n  toolbarInline: {\n    groups: toolbarGroups,\n  },\n})\n"],"names":["$isElementNode","$isRangeSelection","FORMAT_ELEMENT_COMMAND","AlignCenterIcon","AlignJustifyIcon","AlignLeftIcon","AlignRightIcon","createClientFeature","toolbarAlignGroupWithItems","toolbarGroups","ChildComponent","isActive","selection","node","getNodes","getFormatType","parent","getParent","key","label","i18n","t","onSelect","editor","dispatchCommand","order","AlignFeatureClient","toolbarFixed","groups","toolbarInline"],"mappings":"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"}