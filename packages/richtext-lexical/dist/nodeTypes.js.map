{"version":3,"sources":["../src/nodeTypes.ts"],"sourcesContent":["import type {\n  SerializedLineBreakNode as _SerializedLineBreakNode,\n  SerializedTextNode as _SerializedTextNode,\n  SerializedEditorState,\n  SerializedElementNode,\n  SerializedLexicalNode,\n  Spread,\n} from 'lexical'\n\nimport type { SerializedQuoteNode } from './features/blockquote/feature.server.js'\nimport type { SerializedBlockNode } from './features/blocks/nodes/BlocksNode.js'\nimport type { SerializedHeadingNode } from './features/heading/feature.server.js'\nimport type { SerializedHorizontalRuleNode } from './features/horizontalRule/nodes/HorizontalRuleNode.js'\nimport type { SerializedAutoLinkNode, SerializedLinkNode } from './features/link/nodes/types.js'\nimport type { SerializedListItemNode, SerializedListNode } from './features/lists/plugin/index.js'\nimport type { SerializedRelationshipNode } from './features/relationship/nodes/RelationshipNode.js'\nimport type { SerializedUploadNode } from './features/upload/nodes/UploadNode.js'\n\nexport type {\n  SerializedAutoLinkNode,\n  SerializedBlockNode,\n  SerializedHeadingNode,\n  SerializedHorizontalRuleNode,\n  SerializedLinkNode,\n  SerializedListItemNode,\n  SerializedListNode,\n  SerializedQuoteNode,\n  SerializedRelationshipNode,\n  SerializedUploadNode,\n}\n\nexport type SerializedParagraphNode<T extends SerializedLexicalNode = SerializedLexicalNode> =\n  Spread<\n    {\n      textFormat: number\n      type: 'paragraph'\n    },\n    SerializedElementNode<T>\n  >\nexport type SerializedTextNode = Spread<\n  {\n    children?: never // required so that our typed editor state doesn't automatically add children\n    type: 'text'\n  },\n  _SerializedTextNode\n>\n\nexport type SerializedLineBreakNode = Spread<\n  {\n    children?: never // required so that our typed editor state doesn't automatically add children\n    type: 'linebreak'\n  },\n  _SerializedLineBreakNode\n>\n\ntype RecursiveNodes<T extends SerializedLexicalNode, Depth extends number = 4> = Depth extends 0\n  ? T\n  : { children?: RecursiveNodes<T, DecrementDepth<Depth>>[] } & T\n\ntype DecrementDepth<N extends number> = [0, 0, 1, 2, 3, 4][N]\n\nexport type TypedEditorState<T extends SerializedLexicalNode = SerializedLexicalNode> =\n  SerializedEditorState<RecursiveNodes<T>>\n\nexport type DefaultNodeTypes =\n  | SerializedAutoLinkNode\n  //| SerializedBlockNode // Not included by default\n  | SerializedHeadingNode\n  | SerializedHorizontalRuleNode\n  | SerializedLineBreakNode\n  | SerializedLinkNode\n  | SerializedListItemNode\n  | SerializedListNode\n  | SerializedParagraphNode\n  | SerializedQuoteNode\n  | SerializedRelationshipNode\n  | SerializedTextNode\n  | SerializedUploadNode\n\nexport type DefaultTypedEditorState<T extends SerializedLexicalNode = SerializedLexicalNode> =\n  TypedEditorState<DefaultNodeTypes | T>\n"],"names":[],"mappings":"AA+EA,WACwC"}