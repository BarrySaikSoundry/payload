{"version":3,"sources":["../../src/populateGraphQL/populate.ts"],"sourcesContent":["import type { PayloadRequest } from 'payload'\n\nimport { createDataloaderCacheKey } from 'payload'\n\ntype Arguments = {\n  currentDepth?: number\n  data: unknown\n  depth: number\n  draft: boolean\n  key: number | string\n  overrideAccess: boolean\n  req: PayloadRequest\n  showHiddenFields: boolean\n}\n\nexport const populate = async ({\n  id,\n  collectionSlug,\n  currentDepth,\n  data,\n  depth,\n  draft,\n  key,\n  overrideAccess,\n  req,\n  showHiddenFields,\n}: {\n  collectionSlug: string\n  id: number | string\n} & Arguments): Promise<void> => {\n  const shouldPopulate = depth && currentDepth <= depth\n  // usually depth is checked within recursivelyPopulateFieldsForGraphQL. But since this populate function can be called outside of that (in rest afterRead node hooks) we need to check here too\n  if (!shouldPopulate) {\n    return\n  }\n\n  const dataRef = data as Record<string, unknown>\n\n  const doc = await req.payloadDataLoader.load(\n    createDataloaderCacheKey({\n      collectionSlug,\n      currentDepth: currentDepth + 1,\n      depth,\n      docID: id as string,\n      draft,\n      fallbackLocale: req.fallbackLocale,\n      locale: req.locale,\n      overrideAccess,\n      showHiddenFields,\n      transactionID: req.transactionID,\n    }),\n  )\n\n  if (doc) {\n    dataRef[key] = doc\n  } else {\n    dataRef[key] = null\n  }\n}\n"],"names":["createDataloaderCacheKey","populate","id","collectionSlug","currentDepth","data","depth","draft","key","overrideAccess","req","showHiddenFields","shouldPopulate","dataRef","doc","payloadDataLoader","load","docID","fallbackLocale","locale","transactionID"],"mappings":"AAEA,SAASA,wBAAwB,QAAQ,UAAS;AAalD,OAAO,MAAMC,WAAW,OAAO,EAC7BC,EAAE,EACFC,cAAc,EACdC,YAAY,EACZC,IAAI,EACJC,KAAK,EACLC,KAAK,EACLC,GAAG,EACHC,cAAc,EACdC,GAAG,EACHC,gBAAgB,EAIL;IACX,MAAMC,iBAAiBN,SAASF,gBAAgBE;IAChD,+LAA+L;IAC/L,IAAI,CAACM,gBAAgB;QACnB;IACF;IAEA,MAAMC,UAAUR;IAEhB,MAAMS,MAAM,MAAMJ,IAAIK,iBAAiB,CAACC,IAAI,CAC1ChB,yBAAyB;QACvBG;QACAC,cAAcA,eAAe;QAC7BE;QACAW,OAAOf;QACPK;QACAW,gBAAgBR,IAAIQ,cAAc;QAClCC,QAAQT,IAAIS,MAAM;QAClBV;QACAE;QACAS,eAAeV,IAAIU,aAAa;IAClC;IAGF,IAAIN,KAAK;QACPD,OAAO,CAACL,IAAI,GAAGM;IACjB,OAAO;QACLD,OAAO,CAACL,IAAI,GAAG;IACjB;AACF,EAAC"}