{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type { EditorConfig as LexicalEditorConfig, SerializedEditorState } from 'lexical'\nimport type {\n  FieldPermissions,\n  FieldTypes,\n  RichTextAdapter,\n  RichTextFieldProps,\n  SanitizedConfig,\n} from 'payload'\nimport type React from 'react'\n\nimport type { FeatureProviderServer } from './features/typesServer.js'\nimport type { SanitizedServerEditorConfig } from './lexical/config/types.js'\n\nexport type LexicalFieldAdminProps = {\n  /**\n   * Controls if the gutter (padding to the left & gray vertical line) should be hidden. @default false\n   */\n  hideGutter?: boolean\n}\n\nexport type LexicalEditorProps = {\n  admin?: LexicalFieldAdminProps\n  features?:\n    | (({\n        defaultFeatures,\n        rootFeatures,\n      }: {\n        /**\n         * This opinionated array contains all \"recommended\" default features.\n         *\n         * @Example\n         *\n         * ```ts\n         *  editor: lexicalEditor({\n         *    features: ({ defaultFeatures }) => [...defaultFeatures, FixedToolbarFeature()],\n         *  })\n         *  ```\n         */\n        defaultFeatures: FeatureProviderServer<any, any, any>[]\n        /**\n         * This array contains all features that are enabled in the root richText editor (the one defined in the payload.config.ts).\n         * If this field is the root richText editor, or if the root richText editor is not a lexical editor, this array will be empty.\n         *\n         * @Example\n         *\n         * ```ts\n         *  editor: lexicalEditor({\n         *    features: ({ rootFeatures }) => [...rootFeatures, FixedToolbarFeature()],\n         *  })\n         *  ```\n         */\n        rootFeatures: FeatureProviderServer<any, any, any>[]\n      }) => FeatureProviderServer<any, any, any>[])\n    | FeatureProviderServer<any, any, any>[]\n  lexical?: LexicalEditorConfig\n}\n\nexport type LexicalRichTextAdapter = {\n  editorConfig: SanitizedServerEditorConfig\n  features: FeatureProviderServer<any, any, any>[]\n} & RichTextAdapter<SerializedEditorState, AdapterProps, any>\n\nexport type LexicalRichTextAdapterProvider =\n  /**\n   * This is being called during the payload sanitization process\n   */\n  ({\n    config,\n    isRoot,\n  }: {\n    config: SanitizedConfig\n    isRoot?: boolean\n  }) => Promise<LexicalRichTextAdapter>\n\nexport type FieldProps = {\n  fieldTypes: FieldTypes\n  indexPath: string\n  path?: string\n  permissions: FieldPermissions\n} & RichTextFieldProps<SerializedEditorState, AdapterProps, AdapterProps>\n\nexport type AdapterProps = {\n  editorConfig: SanitizedServerEditorConfig\n}\n\nexport type GeneratedFeatureProviderComponent = {\n  ClientFeature: React.ReactNode\n  key: string\n  order: number\n}\n"],"names":[],"mappings":"AAqFA,WAIC"}