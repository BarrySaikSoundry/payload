{
  "version": 3,
  "sources": ["../../../src/features/horizontalRule/component/index.tsx"],
  "sourcesContent": ["'use client'\n\nimport type { NodeKey } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection.js'\nimport { addClassNamesToElement, mergeRegister, removeClassNamesFromElement } from '@lexical/utils'\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from 'lexical'\nimport { useCallback, useEffect } from 'react'\n\nimport { $isHorizontalRuleNode } from '../nodes/HorizontalRuleNode.js'\n\nconst isSelectedClassName = 'selected'\n\n/**\n * React component rendered in the lexical editor, WITHIN the hr element created by createDOM of the HorizontalRuleNode.\n *\n * @param nodeKey every node has a unique key (this key is not saved to the database and thus may differ between sessions). It's useful for working with the CURRENT lexical editor state\n */\nexport function HorizontalRuleComponent({ nodeKey }: { nodeKey: NodeKey }) {\n  const [editor] = useLexicalComposerContext()\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey)\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        event.preventDefault()\n        const node = $getNodeByKey(nodeKey)\n        if ($isHorizontalRuleNode(node)) {\n          node.remove()\n          return true\n        }\n      }\n      return false\n    },\n    [isSelected, nodeKey],\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand(\n        CLICK_COMMAND,\n        (event: MouseEvent) => {\n          const hrElem = editor.getElementByKey(nodeKey)\n\n          if (event.target === hrElem) {\n            if (!event.shiftKey) {\n              clearSelection()\n            }\n            setSelected(!isSelected)\n            return true\n          }\n\n          return false\n        },\n        COMMAND_PRIORITY_LOW,\n      ),\n      editor.registerCommand(KEY_DELETE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_BACKSPACE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected])\n\n  useEffect(() => {\n    const hrElem = editor.getElementByKey(nodeKey)\n    if (hrElem !== null) {\n      if (isSelected) {\n        addClassNamesToElement(hrElem, isSelectedClassName)\n      } else {\n        removeClassNamesFromElement(hrElem, isSelectedClassName)\n      }\n    }\n  }, [editor, isSelected, nodeKey])\n\n  return null\n}\n"],
  "mappings": "qDAIA,OAAS,6BAAAA,MAAiC,2CAC1C,OAAS,2BAAAC,MAA+B,4CACxC,OAAS,0BAAAC,EAAwB,iBAAAC,EAAe,+BAAAC,MAAmC,iBACnF,OACE,iBAAAC,EACA,iBAAAC,EACA,oBAAAC,EACA,iBAAAC,EACA,wBAAAC,EACA,yBAAAC,EACA,sBAAAC,MACK,UACP,OAAS,eAAAC,EAAa,aAAAC,MAAiB,QAIvC,IAAMC,EAAsB,WAOrB,SAASC,EAAwB,CAAE,QAAAC,CAAQ,EAAyB,CACzE,GAAM,CAACC,CAAM,EAAIC,EAA0B,EACrC,CAACC,EAAYC,EAAaC,CAAc,EAAIC,EAAwBN,CAAO,EAE3EO,EAAYC,EACfC,GAAyB,CACxB,GAAIN,GAAcO,EAAiBC,EAAc,CAAC,EAAG,CACnDF,EAAM,eAAe,EACrB,IAAMG,EAAOC,EAAcb,CAAO,EAClC,GAAIc,EAAsBF,CAAI,EAC5B,OAAAA,EAAK,OAAO,EACL,EAEX,CACA,MAAO,EACT,EACA,CAACT,EAAYH,CAAO,CACtB,EAEA,OAAAe,EAAU,IACDC,EACLf,EAAO,gBACLgB,EACCR,GAAsB,CACrB,IAAMS,EAASjB,EAAO,gBAAgBD,CAAO,EAE7C,OAAIS,EAAM,SAAWS,GACdT,EAAM,UACTJ,EAAe,EAEjBD,EAAY,CAACD,CAAU,EAChB,IAGF,EACT,EACAgB,CACF,EACAlB,EAAO,gBAAgBmB,EAAoBb,EAAWY,CAAoB,EAC1ElB,EAAO,gBAAgBoB,EAAuBd,EAAWY,CAAoB,CAC/E,EACC,CAACd,EAAgBJ,EAAQE,EAAYH,EAASO,EAAWH,CAAW,CAAC,EAExEW,EAAU,IAAM,CACd,IAAMG,EAASjB,EAAO,gBAAgBD,CAAO,EACzCkB,IAAW,OACTf,EACFmB,EAAuBJ,EAAQpB,CAAmB,EAElDyB,EAA4BL,EAAQpB,CAAmB,EAG7D,EAAG,CAACG,EAAQE,EAAYH,CAAO,CAAC,EAEzB,IACT",
  "names": ["useLexicalComposerContext", "useLexicalNodeSelection", "addClassNamesToElement", "mergeRegister", "removeClassNamesFromElement", "$getNodeByKey", "$getSelection", "$isNodeSelection", "CLICK_COMMAND", "COMMAND_PRIORITY_LOW", "KEY_BACKSPACE_COMMAND", "KEY_DELETE_COMMAND", "useCallback", "useEffect", "isSelectedClassName", "HorizontalRuleComponent", "nodeKey", "editor", "useLexicalComposerContext", "isSelected", "setSelected", "clearSelection", "useLexicalNodeSelection", "$onDelete", "useCallback", "event", "$isNodeSelection", "$getSelection", "node", "$getNodeByKey", "$isHorizontalRuleNode", "useEffect", "mergeRegister", "CLICK_COMMAND", "hrElem", "COMMAND_PRIORITY_LOW", "KEY_DELETE_COMMAND", "KEY_BACKSPACE_COMMAND", "addClassNamesToElement", "removeClassNamesFromElement"]
}
