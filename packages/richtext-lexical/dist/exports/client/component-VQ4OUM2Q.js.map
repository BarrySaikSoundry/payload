{
  "version": 3,
  "sources": ["../../../src/features/upload/component/index.tsx"],
  "sourcesContent": ["'use client'\nimport type { ClientCollectionConfig, Data } from 'payload'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { useLexicalNodeSelection } from '@lexical/react/useLexicalNodeSelection.js'\nimport { mergeRegister } from '@lexical/utils'\nimport { getTranslation } from '@payloadcms/translations'\nimport {\n  Button,\n  DrawerToggler,\n  File,\n  useConfig,\n  useDocumentDrawer,\n  useDrawerSlug,\n  useModal,\n  usePayloadAPI,\n  useTranslation,\n} from '@payloadcms/ui'\nimport {\n  $getNodeByKey,\n  $getSelection,\n  $isNodeSelection,\n  CLICK_COMMAND,\n  COMMAND_PRIORITY_LOW,\n  KEY_BACKSPACE_COMMAND,\n  KEY_DELETE_COMMAND,\n} from 'lexical'\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'\n\nimport type { ClientComponentProps } from '../../typesClient.js'\nimport type { UploadFeaturePropsClient } from '../feature.client.js'\nimport type { UploadData, UploadNode } from '../nodes/UploadNode.js'\n\nimport { useEditorConfigContext } from '../../../lexical/config/client/EditorConfigProvider.js'\nimport { FieldsDrawer } from '../../../utilities/fieldsDrawer/Drawer.js'\nimport { EnabledRelationshipsCondition } from '../../relationship/utils/EnabledRelationshipsCondition.js'\nimport { INSERT_UPLOAD_WITH_DRAWER_COMMAND } from '../drawer/commands.js'\nimport { $isUploadNode } from '../nodes/UploadNode.js'\nconst baseClass = 'lexical-upload'\n\nconst initialParams = {\n  depth: 0,\n}\n\nexport type ElementProps = {\n  data: UploadData\n  nodeKey: string\n}\n\nconst Component: React.FC<ElementProps> = (props) => {\n  const {\n    data: { fields, relationTo, value },\n    nodeKey,\n  } = props\n\n  const {\n    collections,\n    routes: { api },\n    serverURL,\n  } = useConfig()\n  const uploadRef = useRef<HTMLDivElement | null>(null)\n  const { closeModal } = useModal()\n\n  const [editor] = useLexicalComposerContext()\n  const [isSelected, setSelected, clearSelection] = useLexicalNodeSelection(nodeKey)\n\n  const { editorConfig, field } = useEditorConfigContext()\n\n  const { i18n, t } = useTranslation()\n  const [cacheBust, dispatchCacheBust] = useReducer((state) => state + 1, 0)\n  const [relatedCollection] = useState<ClientCollectionConfig>(() =>\n    collections.find((coll) => coll.slug === relationTo),\n  )\n\n  const drawerSlug = useDrawerSlug('upload-drawer')\n\n  const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = useDocumentDrawer({\n    id: value,\n    collectionSlug: relatedCollection.slug,\n  })\n\n  // Get the referenced document\n  const [{ data }, { setParams }] = usePayloadAPI(\n    `${serverURL}${api}/${relatedCollection.slug}/${value}`,\n    { initialParams },\n  )\n\n  const thumbnailSRC = data?.thumbnailURL || data?.url\n\n  const removeUpload = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey).remove()\n    })\n  }, [editor, nodeKey])\n\n  const updateUpload = useCallback(\n    (data: Data) => {\n      setParams({\n        ...initialParams,\n        cacheBust, // do this to get the usePayloadAPI to re-fetch the data even though the URL string hasn't changed\n      })\n\n      dispatchCacheBust()\n      closeDrawer()\n    },\n    [setParams, cacheBust, closeDrawer],\n  )\n\n  const $onDelete = useCallback(\n    (event: KeyboardEvent) => {\n      if (isSelected && $isNodeSelection($getSelection())) {\n        event.preventDefault()\n        const node = $getNodeByKey(nodeKey)\n        if ($isUploadNode(node)) {\n          node.remove()\n          return true\n        }\n      }\n      return false\n    },\n    [isSelected, nodeKey],\n  )\n  const onClick = useCallback(\n    (event: MouseEvent) => {\n      // Check if uploadRef.target or anything WITHIN uploadRef.target was clicked\n      if (event.target === uploadRef.current || uploadRef.current?.contains(event.target as Node)) {\n        if (event.shiftKey) {\n          setSelected(!isSelected)\n        } else {\n          if (!isSelected) {\n            clearSelection()\n            setSelected(true)\n          }\n        }\n        return true\n      }\n\n      return false\n    },\n    [isSelected, setSelected, clearSelection],\n  )\n\n  useEffect(() => {\n    return mergeRegister(\n      editor.registerCommand<MouseEvent>(CLICK_COMMAND, onClick, COMMAND_PRIORITY_LOW),\n\n      editor.registerCommand(KEY_DELETE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n      editor.registerCommand(KEY_BACKSPACE_COMMAND, $onDelete, COMMAND_PRIORITY_LOW),\n    )\n  }, [clearSelection, editor, isSelected, nodeKey, $onDelete, setSelected, onClick])\n\n  const hasExtraFields = (\n    editorConfig?.resolvedFeatureMap?.get('upload')\n      ?.sanitizedClientFeatureProps as ClientComponentProps<UploadFeaturePropsClient>\n  ).collections?.[relatedCollection.slug]?.hasExtraFields\n\n  const onExtraFieldsDrawerSubmit = useCallback(\n    (_, data) => {\n      // Update lexical node (with key nodeKey) with new data\n      editor.update(() => {\n        const uploadNode: UploadNode | null = $getNodeByKey(nodeKey)\n        if (uploadNode) {\n          const newData: UploadData = {\n            ...uploadNode.getData(),\n            fields: data,\n          }\n          uploadNode.setData(newData)\n        }\n      })\n\n      closeModal(drawerSlug)\n    },\n    [closeModal, editor, drawerSlug, nodeKey],\n  )\n\n  return (\n    <div\n      className={[baseClass, isSelected && `${baseClass}--selected`].filter(Boolean).join(' ')}\n      contentEditable={false}\n      ref={uploadRef}\n    >\n      <div className={`${baseClass}__card`}>\n        <div className={`${baseClass}__topRow`}>\n          {/* TODO: migrate to use @payloadcms/ui/elements/Thumbnail component */}\n          <div className={`${baseClass}__thumbnail`}>\n            {thumbnailSRC ? (\n              <img\n                alt={data?.filename}\n                data-lexical-upload-id={value}\n                data-lexical-upload-relation-to={relationTo}\n                src={thumbnailSRC}\n              />\n            ) : (\n              <File />\n            )}\n          </div>\n          <div className={`${baseClass}__topRowRightPanel`}>\n            <div className={`${baseClass}__collectionLabel`}>\n              {getTranslation(relatedCollection.labels.singular, i18n)}\n            </div>\n            {editor.isEditable() && (\n              <div className={`${baseClass}__actions`}>\n                {hasExtraFields ? (\n                  <DrawerToggler\n                    className={`${baseClass}__upload-drawer-toggler`}\n                    disabled={field?.readOnly}\n                    slug={drawerSlug}\n                  >\n                    <Button\n                      buttonStyle=\"icon-label\"\n                      el=\"div\"\n                      icon=\"edit\"\n                      onClick={(e) => {\n                        e.preventDefault()\n                      }}\n                      round\n                      tooltip={t('fields:editRelationship')}\n                    />\n                  </DrawerToggler>\n                ) : null}\n\n                <Button\n                  buttonStyle=\"icon-label\"\n                  disabled={field?.readOnly}\n                  el=\"div\"\n                  icon=\"swap\"\n                  onClick={() => {\n                    editor.dispatchCommand(INSERT_UPLOAD_WITH_DRAWER_COMMAND, {\n                      replace: { nodeKey },\n                    })\n                  }}\n                  round\n                  tooltip={t('fields:swapUpload')}\n                />\n                <Button\n                  buttonStyle=\"icon-label\"\n                  className={`${baseClass}__removeButton`}\n                  disabled={field?.readOnly}\n                  icon=\"x\"\n                  onClick={(e) => {\n                    e.preventDefault()\n                    removeUpload()\n                  }}\n                  round\n                  tooltip={t('fields:removeUpload')}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n        <div className={`${baseClass}__bottomRow`}>\n          <DocumentDrawerToggler className={`${baseClass}__doc-drawer-toggler`}>\n            <strong>{data?.filename}</strong>\n          </DocumentDrawerToggler>\n        </div>\n      </div>\n      {value && <DocumentDrawer onSave={updateUpload} />}\n      {hasExtraFields ? (\n        <FieldsDrawer\n          data={fields}\n          drawerSlug={drawerSlug}\n          drawerTitle={t('general:editLabel', {\n            label: getTranslation(relatedCollection.labels.singular, i18n),\n          })}\n          featureKey=\"upload\"\n          handleDrawerSubmit={onExtraFieldsDrawerSubmit}\n          schemaPathSuffix={relatedCollection.slug}\n        />\n      ) : null}\n    </div>\n  )\n}\n\nexport const UploadComponent = (props: ElementProps): React.ReactNode => {\n  return (\n    <EnabledRelationshipsCondition {...props} uploads>\n      <Component {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],
  "mappings": "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",
  "names": ["useLexicalComposerContext", "useLexicalNodeSelection", "mergeRegister", "getTranslation", "Button", "DrawerToggler", "File", "useConfig", "useDocumentDrawer", "useDrawerSlug", "useModal", "usePayloadAPI", "useTranslation", "$getNodeByKey", "$getSelection", "$isNodeSelection", "CLICK_COMMAND", "COMMAND_PRIORITY_LOW", "KEY_BACKSPACE_COMMAND", "KEY_DELETE_COMMAND", "useCallback", "useEffect", "useReducer", "useRef", "useState", "jsx", "jsxs", "baseClass", "initialParams", "Component", "props", "fields", "relationTo", "value", "nodeKey", "collections", "api", "serverURL", "useConfig", "uploadRef", "useRef", "closeModal", "useModal", "editor", "useLexicalComposerContext", "isSelected", "setSelected", "clearSelection", "useLexicalNodeSelection", "editorConfig", "field", "useEditorConfigContext", "i18n", "t", "useTranslation", "cacheBust", "dispatchCacheBust", "useReducer", "state", "relatedCollection", "useState", "coll", "drawerSlug", "useDrawerSlug", "DocumentDrawer", "DocumentDrawerToggler", "closeDrawer", "useDocumentDrawer", "data", "setParams", "usePayloadAPI", "thumbnailSRC", "removeUpload", "useCallback", "$getNodeByKey", "updateUpload", "$onDelete", "event", "$isNodeSelection", "$getSelection", "node", "$isUploadNode", "onClick", "useEffect", "mergeRegister", "CLICK_COMMAND", "COMMAND_PRIORITY_LOW", "KEY_DELETE_COMMAND", "KEY_BACKSPACE_COMMAND", "hasExtraFields", "onExtraFieldsDrawerSubmit", "_", "uploadNode", "newData", "File", "getTranslation", "DrawerToggler", "Button", "INSERT_UPLOAD_WITH_DRAWER_COMMAND", "FieldsDrawer", "UploadComponent", "EnabledRelationshipsCondition"]
}
