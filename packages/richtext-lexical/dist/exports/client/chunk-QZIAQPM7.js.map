{
  "version": 3,
  "sources": ["../../../src/lexical/config/client/EditorConfigProvider.tsx"],
  "sourcesContent": ["'use client'\n\nimport type { FormFieldBase } from '@payloadcms/ui'\nimport type { LexicalEditor } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport * as React from 'react'\nimport { createContext, useContext, useMemo, useRef, useState } from 'react'\n\nimport type { SanitizedClientEditorConfig } from '../types.js'\n\n// Should always produce a 20 character pseudo-random string\nfunction generateQuickGuid(): string {\n  return Math.random().toString(36).substring(2, 12) + Math.random().toString(36).substring(2, 12)\n}\n\nexport interface EditorConfigContextType {\n  // Editor focus handling\n  blurEditor: (editorContext: EditorConfigContextType) => void\n  childrenEditors: React.RefObject<Map<string, EditorConfigContextType>>\n  editor: LexicalEditor\n  editorConfig: SanitizedClientEditorConfig\n  editorContainerRef: React.RefObject<HTMLDivElement>\n  field: {\n    editorConfig: SanitizedClientEditorConfig // With rendered features n stuff\n    name: string\n    richTextComponentMap: Map<string, React.ReactNode>\n  } & FormFieldBase\n  // Editor focus handling\n  focusEditor: (editorContext: EditorConfigContextType) => void\n  focusedEditor: EditorConfigContextType | null\n  parentEditor: EditorConfigContextType\n  registerChild: (uuid: string, editorContext: EditorConfigContextType) => void\n  unregisterChild?: (uuid: string) => void\n  uuid: string\n}\n\nconst Context: React.Context<EditorConfigContextType> = createContext({\n  editorConfig: null,\n  field: null,\n  uuid: null,\n})\n\nexport const EditorConfigProvider = ({\n  children,\n  editorConfig,\n  editorContainerRef,\n  fieldProps,\n  parentContext,\n}: {\n  children: React.ReactNode\n  editorConfig: SanitizedClientEditorConfig\n  editorContainerRef: React.RefObject<HTMLDivElement>\n  fieldProps: {\n    editorConfig: SanitizedClientEditorConfig // With rendered features n stuff\n    name: string\n    richTextComponentMap: Map<string, React.ReactNode>\n  } & FormFieldBase\n  parentContext?: EditorConfigContextType\n}): React.ReactNode => {\n  const [editor] = useLexicalComposerContext()\n  // State to store the UUID\n  const [uuid] = useState(generateQuickGuid())\n\n  const childrenEditors = useRef<Map<string, EditorConfigContextType>>(new Map())\n  const [focusedEditor, setFocusedEditor] = useState<EditorConfigContextType | null>(null)\n  const focusHistory = useRef<Set<string>>(new Set())\n\n  const editorContext = useMemo(\n    () =>\n      ({\n        blurEditor: (editorContext: EditorConfigContextType) => {\n          //setFocusedEditor(null) // Clear focused editor\n          focusHistory.current.clear() // Reset focus history when focus is lost\n        },\n        childrenEditors,\n        editor,\n        editorConfig,\n        editorContainerRef,\n        field: fieldProps,\n        focusEditor: (editorContext: EditorConfigContextType) => {\n          const editorUUID = editorContext.uuid\n\n          // Avoid recursion by checking if this editor is already focused in this cycle\n          if (focusHistory.current.has(editorUUID)) {\n            return\n          }\n\n          // Add this editor to the history to prevent future recursions in this cycle\n          focusHistory.current.add(editorUUID)\n          setFocusedEditor(editorContext)\n\n          // Propagate focus event to parent and children, ensuring they do not refocus this editor\n          if (parentContext?.uuid) {\n            parentContext.focusEditor(editorContext)\n          }\n          childrenEditors.current.forEach((childEditor, childUUID) => {\n            childEditor.focusEditor(editorContext)\n          })\n\n          focusHistory.current.clear()\n        },\n        focusedEditor,\n        parentEditor: parentContext,\n        registerChild: (childUUID, childEditorContext) => {\n          if (!childrenEditors.current.has(childUUID)) {\n            const newMap = new Map(childrenEditors.current)\n            newMap.set(childUUID, childEditorContext)\n            childrenEditors.current = newMap\n          }\n        },\n        unregisterChild: (childUUID) => {\n          if (childrenEditors.current.has(childUUID)) {\n            const newMap = new Map(childrenEditors.current)\n            newMap.delete(childUUID)\n            childrenEditors.current = newMap\n          }\n        },\n\n        uuid,\n      }) as EditorConfigContextType,\n    [\n      editor,\n      childrenEditors,\n      editorConfig,\n      editorContainerRef,\n      fieldProps,\n      focusedEditor,\n      parentContext,\n      uuid,\n    ],\n  )\n\n  return <Context.Provider value={editorContext}>{children}</Context.Provider>\n}\n\nexport const useEditorConfigContext = (): EditorConfigContextType => {\n  const context = useContext(Context)\n  if (context === undefined) {\n    throw new Error('useEditorConfigContext must be used within an EditorConfigProvider')\n  }\n  return context\n}\n"],
  "mappings": "AAKA,OAAS,6BAAAA,MAAiC,2CAE1C,OAAS,iBAAAC,EAAe,cAAAC,EAAY,WAAAC,EAAS,UAAAC,EAAQ,YAAAC,MAAgB,QA8H5D,cAAAC,MAAA,oBAzHT,SAASC,GAA4B,CACnC,OAAO,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,EAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,EAAE,CACjG,CAuBA,IAAMC,EAAkDP,EAAc,CACpE,aAAc,KACd,MAAO,KACP,KAAM,IACR,CAAC,EAEYQ,EAAuB,CAAC,CACnC,SAAAC,EACA,aAAAC,EACA,mBAAAC,EACA,WAAAC,EACA,cAAAC,CACF,IAUuB,CACrB,GAAM,CAACC,CAAM,EAAIf,EAA0B,EAErC,CAACgB,CAAI,EAAIX,EAASE,EAAkB,CAAC,EAErCU,EAAkBb,EAA6C,IAAI,GAAK,EACxE,CAACc,EAAeC,CAAgB,EAAId,EAAyC,IAAI,EACjFe,EAAehB,EAAoB,IAAI,GAAK,EAE5CiB,EAAgBlB,EACpB,KACG,CACC,WAAakB,GAA2C,CAEtDD,EAAa,QAAQ,MAAM,CAC7B,EACA,gBAAAH,EACA,OAAAF,EACA,aAAAJ,EACA,mBAAAC,EACA,MAAOC,EACP,YAAcQ,GAA2C,CACvD,IAAMC,EAAaD,EAAc,KAG7BD,EAAa,QAAQ,IAAIE,CAAU,IAKvCF,EAAa,QAAQ,IAAIE,CAAU,EACnCH,EAAiBE,CAAa,EAG1BP,GAAe,MACjBA,EAAc,YAAYO,CAAa,EAEzCJ,EAAgB,QAAQ,QAAQ,CAACM,EAAaC,IAAc,CAC1DD,EAAY,YAAYF,CAAa,CACvC,CAAC,EAEDD,EAAa,QAAQ,MAAM,EAC7B,EACA,cAAAF,EACA,aAAcJ,EACd,cAAe,CAACU,EAAWC,IAAuB,CAChD,GAAI,CAACR,EAAgB,QAAQ,IAAIO,CAAS,EAAG,CAC3C,IAAME,EAAS,IAAI,IAAIT,EAAgB,OAAO,EAC9CS,EAAO,IAAIF,EAAWC,CAAkB,EACxCR,EAAgB,QAAUS,CAC5B,CACF,EACA,gBAAkBF,GAAc,CAC9B,GAAIP,EAAgB,QAAQ,IAAIO,CAAS,EAAG,CAC1C,IAAME,EAAS,IAAI,IAAIT,EAAgB,OAAO,EAC9CS,EAAO,OAAOF,CAAS,EACvBP,EAAgB,QAAUS,CAC5B,CACF,EAEA,KAAAV,CACF,GACF,CACED,EACAE,EACAN,EACAC,EACAC,EACAK,EACAJ,EACAE,CACF,CACF,EAEA,OAAOV,EAACE,EAAQ,SAAR,CAAiB,MAAOa,EAAgB,SAAAX,EAAS,CAC3D,EAEaiB,EAAyB,IAA+B,CACnE,IAAMC,EAAU1B,EAAWM,CAAO,EAClC,GAAIoB,IAAY,OACd,MAAM,IAAI,MAAM,oEAAoE,EAEtF,OAAOA,CACT",
  "names": ["useLexicalComposerContext", "createContext", "useContext", "useMemo", "useRef", "useState", "jsx", "generateQuickGuid", "Context", "EditorConfigProvider", "children", "editorConfig", "editorContainerRef", "fieldProps", "parentContext", "editor", "uuid", "childrenEditors", "focusedEditor", "setFocusedEditor", "focusHistory", "editorContext", "editorUUID", "childEditor", "childUUID", "childEditorContext", "newMap", "useEditorConfigContext", "context"]
}
