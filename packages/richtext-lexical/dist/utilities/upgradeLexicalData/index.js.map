{"version":3,"sources":["../../../src/utilities/upgradeLexicalData/index.ts"],"sourcesContent":["import type { CollectionConfig, Field, GlobalConfig, Payload } from 'payload'\n\nimport { upgradeDocumentFieldsRecursively } from './upgradeDocumentFieldsRecursively.js'\n\n/**\n * This goes through every single document in your payload app and re-saves it, if it has a lexical editor.\n * This way, the data is automatically converted to the new format, and that automatic conversion gets applied to every single document in your app.\n *\n * @param payload\n */\nexport async function upgradeLexicalData({ payload }: { payload: Payload }) {\n  const collections = payload.config.collections\n\n  const allLocales = payload.config.localization ? payload.config.localization.localeCodes : [null]\n\n  const totalCollections = collections.length\n  for (const locale of allLocales) {\n    let curCollection = 0\n    for (const collection of collections) {\n      curCollection++\n      await upgradeCollection({\n        collection,\n        cur: curCollection,\n        locale,\n        max: totalCollections,\n        payload,\n      })\n    }\n    for (const global of payload.config.globals) {\n      await upgradeGlobal({\n        global,\n        locale,\n        payload,\n      })\n    }\n  }\n}\n\nasync function upgradeGlobal({\n  global,\n  locale,\n  payload,\n}: {\n  global: GlobalConfig\n  locale: null | string\n  payload: Payload\n}) {\n  console.log(`Lexical Upgrader: ${locale}: Upgrading global:`, global.slug)\n\n  const document = await payload.findGlobal({\n    slug: global.slug,\n    depth: 0,\n    locale: locale || undefined,\n    overrideAccess: true,\n  })\n\n  const found = upgradeDocument({\n    document,\n    fields: global.fields,\n  })\n\n  if (found) {\n    await payload.updateGlobal({\n      slug: global.slug,\n      data: document,\n      depth: 0,\n      locale: locale || undefined,\n    })\n  }\n}\n\nasync function upgradeCollection({\n  collection,\n  cur,\n  locale,\n  max,\n  payload,\n}: {\n  collection: CollectionConfig\n  cur: number\n  locale: null | string\n  max: number\n  payload: Payload\n}) {\n  console.log(\n    `Lexical Upgrade: ${locale}: Upgrading collection:`,\n    collection.slug,\n    '(' + cur + '/' + max + ')',\n  )\n\n  const documentCount = (\n    await payload.count({\n      collection: collection.slug,\n      depth: 0,\n      locale: locale || undefined,\n    })\n  ).totalDocs\n\n  let page = 1\n  let upgraded = 0\n\n  while (upgraded < documentCount) {\n    const documents = await payload.find({\n      collection: collection.slug,\n      depth: 0,\n      locale: locale || undefined,\n      overrideAccess: true,\n      page,\n      pagination: true,\n    })\n\n    for (const document of documents.docs) {\n      upgraded++\n      console.log(\n        `Lexical Upgrade: ${locale}: Upgrading collection:`,\n        collection.slug,\n        '(' +\n          cur +\n          '/' +\n          max +\n          ') - Upgrading Document: ' +\n          document.id +\n          ' (' +\n          upgraded +\n          '/' +\n          documentCount +\n          ')',\n      )\n      const found = upgradeDocument({\n        document,\n        fields: collection.fields,\n      })\n\n      if (found) {\n        await payload.update({\n          id: document.id,\n          collection: collection.slug,\n          data: document,\n          depth: 0,\n          locale: locale || undefined,\n        })\n      }\n    }\n    page++\n  }\n}\n\nfunction upgradeDocument({\n  document,\n  fields,\n}: {\n  document: Record<string, unknown>\n  fields: Field[]\n}): boolean {\n  return !!upgradeDocumentFieldsRecursively({\n    data: document,\n    fields,\n    found: 0,\n  })\n}\n"],"names":["upgradeDocumentFieldsRecursively","upgradeLexicalData","payload","collections","config","allLocales","localization","localeCodes","totalCollections","length","locale","curCollection","collection","upgradeCollection","cur","max","global","globals","upgradeGlobal","console","log","slug","document","findGlobal","depth","undefined","overrideAccess","found","upgradeDocument","fields","updateGlobal","data","documentCount","count","totalDocs","page","upgraded","documents","find","pagination","docs","id","update"],"mappings":"AAEA,SAASA,gCAAgC,QAAQ,wCAAuC;AAExF;;;;;CAKC,GACD,OAAO,eAAeC,mBAAmB,EAAEC,OAAO,EAAwB;IACxE,MAAMC,cAAcD,QAAQE,MAAM,CAACD,WAAW;IAE9C,MAAME,aAAaH,QAAQE,MAAM,CAACE,YAAY,GAAGJ,QAAQE,MAAM,CAACE,YAAY,CAACC,WAAW,GAAG;QAAC;KAAK;IAEjG,MAAMC,mBAAmBL,YAAYM,MAAM;IAC3C,KAAK,MAAMC,UAAUL,WAAY;QAC/B,IAAIM,gBAAgB;QACpB,KAAK,MAAMC,cAAcT,YAAa;YACpCQ;YACA,MAAME,kBAAkB;gBACtBD;gBACAE,KAAKH;gBACLD;gBACAK,KAAKP;gBACLN;YACF;QACF;QACA,KAAK,MAAMc,UAAUd,QAAQE,MAAM,CAACa,OAAO,CAAE;YAC3C,MAAMC,cAAc;gBAClBF;gBACAN;gBACAR;YACF;QACF;IACF;AACF;AAEA,eAAegB,cAAc,EAC3BF,MAAM,EACNN,MAAM,EACNR,OAAO,EAKR;IACCiB,QAAQC,GAAG,CAAC,CAAC,kBAAkB,EAAEV,OAAO,mBAAmB,CAAC,EAAEM,OAAOK,IAAI;IAEzE,MAAMC,WAAW,MAAMpB,QAAQqB,UAAU,CAAC;QACxCF,MAAML,OAAOK,IAAI;QACjBG,OAAO;QACPd,QAAQA,UAAUe;QAClBC,gBAAgB;IAClB;IAEA,MAAMC,QAAQC,gBAAgB;QAC5BN;QACAO,QAAQb,OAAOa,MAAM;IACvB;IAEA,IAAIF,OAAO;QACT,MAAMzB,QAAQ4B,YAAY,CAAC;YACzBT,MAAML,OAAOK,IAAI;YACjBU,MAAMT;YACNE,OAAO;YACPd,QAAQA,UAAUe;QACpB;IACF;AACF;AAEA,eAAeZ,kBAAkB,EAC/BD,UAAU,EACVE,GAAG,EACHJ,MAAM,EACNK,GAAG,EACHb,OAAO,EAOR;IACCiB,QAAQC,GAAG,CACT,CAAC,iBAAiB,EAAEV,OAAO,uBAAuB,CAAC,EACnDE,WAAWS,IAAI,EACf,MAAMP,MAAM,MAAMC,MAAM;IAG1B,MAAMiB,gBAAgB,AACpB,CAAA,MAAM9B,QAAQ+B,KAAK,CAAC;QAClBrB,YAAYA,WAAWS,IAAI;QAC3BG,OAAO;QACPd,QAAQA,UAAUe;IACpB,EAAC,EACDS,SAAS;IAEX,IAAIC,OAAO;IACX,IAAIC,WAAW;IAEf,MAAOA,WAAWJ,cAAe;QAC/B,MAAMK,YAAY,MAAMnC,QAAQoC,IAAI,CAAC;YACnC1B,YAAYA,WAAWS,IAAI;YAC3BG,OAAO;YACPd,QAAQA,UAAUe;YAClBC,gBAAgB;YAChBS;YACAI,YAAY;QACd;QAEA,KAAK,MAAMjB,YAAYe,UAAUG,IAAI,CAAE;YACrCJ;YACAjB,QAAQC,GAAG,CACT,CAAC,iBAAiB,EAAEV,OAAO,uBAAuB,CAAC,EACnDE,WAAWS,IAAI,EACf,MACEP,MACA,MACAC,MACA,6BACAO,SAASmB,EAAE,GACX,OACAL,WACA,MACAJ,gBACA;YAEJ,MAAML,QAAQC,gBAAgB;gBAC5BN;gBACAO,QAAQjB,WAAWiB,MAAM;YAC3B;YAEA,IAAIF,OAAO;gBACT,MAAMzB,QAAQwC,MAAM,CAAC;oBACnBD,IAAInB,SAASmB,EAAE;oBACf7B,YAAYA,WAAWS,IAAI;oBAC3BU,MAAMT;oBACNE,OAAO;oBACPd,QAAQA,UAAUe;gBACpB;YACF;QACF;QACAU;IACF;AACF;AAEA,SAASP,gBAAgB,EACvBN,QAAQ,EACRO,MAAM,EAIP;IACC,OAAO,CAAC,CAAC7B,iCAAiC;QACxC+B,MAAMT;QACNO;QACAF,OAAO;IACT;AACF"}