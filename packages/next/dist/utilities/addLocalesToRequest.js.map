{"version":3,"sources":["../../src/utilities/addLocalesToRequest.ts"],"sourcesContent":["import type { PayloadRequest, SanitizedConfig } from 'payload'\n\n/**\n * Mutates the Request to contain 'locale' and 'fallbackLocale' based on data or searchParams\n */\nexport function addLocalesToRequestFromData(req: PayloadRequest): void {\n  const {\n    data,\n    payload: { config },\n  } = req\n\n  if (data) {\n    let localeOnReq = req.locale\n    let fallbackLocaleOnReq = req.fallbackLocale\n\n    if (!localeOnReq && data?.locale && typeof data.locale === 'string') {\n      localeOnReq = data.locale\n    }\n\n    if (\n      !fallbackLocaleOnReq &&\n      data?.['fallback-locale'] &&\n      typeof data?.['fallback-locale'] === 'string'\n    ) {\n      fallbackLocaleOnReq = data['fallback-locale']\n    }\n\n    const { fallbackLocale, locale } = sanitizeLocales({\n      fallbackLocale: fallbackLocaleOnReq,\n      locale: localeOnReq,\n      localization: config.localization,\n    })\n\n    if (locale) req.locale = locale\n    if (fallbackLocale) req.fallbackLocale = fallbackLocale\n  }\n}\n\ntype SanitizeLocalesArgs = {\n  fallbackLocale: string\n  locale: string\n  localization: SanitizedConfig['localization']\n}\ntype SanitizeLocalesReturn = {\n  fallbackLocale?: string\n  locale?: string\n}\nexport const sanitizeLocales = ({\n  fallbackLocale,\n  locale,\n  localization,\n}: SanitizeLocalesArgs): SanitizeLocalesReturn => {\n  if (['none', 'null'].includes(fallbackLocale)) {\n    fallbackLocale = 'null'\n  } else if (localization && !localization.localeCodes.includes(fallbackLocale)) {\n    fallbackLocale = localization.defaultLocale\n  }\n\n  if (locale === '*') {\n    locale = 'all'\n  } else if (localization && !localization.localeCodes.includes(locale)) {\n    locale = localization.defaultLocale\n  }\n\n  return {\n    fallbackLocale,\n    locale,\n  }\n}\n"],"names":["addLocalesToRequestFromData","req","data","payload","config","localeOnReq","locale","fallbackLocaleOnReq","fallbackLocale","sanitizeLocales","localization","includes","localeCodes","defaultLocale"],"mappings":"AAEA;;CAEC,GACD,OAAO,SAASA,4BAA4BC,GAAmB;IAC7D,MAAM,EACJC,IAAI,EACJC,SAAS,EAAEC,MAAM,EAAE,EACpB,GAAGH;IAEJ,IAAIC,MAAM;QACR,IAAIG,cAAcJ,IAAIK,MAAM;QAC5B,IAAIC,sBAAsBN,IAAIO,cAAc;QAE5C,IAAI,CAACH,eAAeH,MAAMI,UAAU,OAAOJ,KAAKI,MAAM,KAAK,UAAU;YACnED,cAAcH,KAAKI,MAAM;QAC3B;QAEA,IACE,CAACC,uBACDL,MAAM,CAAC,kBAAkB,IACzB,OAAOA,MAAM,CAAC,kBAAkB,KAAK,UACrC;YACAK,sBAAsBL,IAAI,CAAC,kBAAkB;QAC/C;QAEA,MAAM,EAAEM,cAAc,EAAEF,MAAM,EAAE,GAAGG,gBAAgB;YACjDD,gBAAgBD;YAChBD,QAAQD;YACRK,cAAcN,OAAOM,YAAY;QACnC;QAEA,IAAIJ,QAAQL,IAAIK,MAAM,GAAGA;QACzB,IAAIE,gBAAgBP,IAAIO,cAAc,GAAGA;IAC3C;AACF;AAWA,OAAO,MAAMC,kBAAkB,CAAC,EAC9BD,cAAc,EACdF,MAAM,EACNI,YAAY,EACQ;IACpB,IAAI;QAAC;QAAQ;KAAO,CAACC,QAAQ,CAACH,iBAAiB;QAC7CA,iBAAiB;IACnB,OAAO,IAAIE,gBAAgB,CAACA,aAAaE,WAAW,CAACD,QAAQ,CAACH,iBAAiB;QAC7EA,iBAAiBE,aAAaG,aAAa;IAC7C;IAEA,IAAIP,WAAW,KAAK;QAClBA,SAAS;IACX,OAAO,IAAII,gBAAgB,CAACA,aAAaE,WAAW,CAACD,QAAQ,CAACL,SAAS;QACrEA,SAASI,aAAaG,aAAa;IACrC;IAEA,OAAO;QACLL;QACAF;IACF;AACF,EAAC"}