{"version":3,"sources":["../../../src/utilities/initPage/handleAuthRedirect.ts"],"sourcesContent":["import { redirect } from 'next/navigation.js'\nimport * as qs from 'qs-esm'\n\nimport { isAdminAuthRoute, isAdminRoute } from './shared.js'\n\nexport const handleAuthRedirect = ({\n  config,\n  redirectUnauthenticatedUser,\n  route,\n  searchParams,\n}: {\n  config\n  redirectUnauthenticatedUser: boolean | string\n  route: string\n  searchParams: { [key: string]: string | string[] }\n}) => {\n  const {\n    admin: {\n      routes: { login: loginRouteFromConfig },\n    },\n    routes: { admin: adminRoute },\n  } = config\n\n  if (!isAdminAuthRoute(config, route, adminRoute)) {\n    if (searchParams && 'redirect' in searchParams) delete searchParams.redirect\n\n    const redirectRoute = encodeURIComponent(\n      route + Object.keys(searchParams ?? {}).length\n        ? `${qs.stringify(searchParams, { addQueryPrefix: true })}`\n        : undefined,\n    )\n\n    const adminLoginRoute = `${adminRoute}${loginRouteFromConfig}`\n\n    const customLoginRoute =\n      typeof redirectUnauthenticatedUser === 'string' ? redirectUnauthenticatedUser : undefined\n\n    const loginRoute = isAdminRoute(route, adminRoute)\n      ? adminLoginRoute\n      : customLoginRoute || loginRouteFromConfig\n\n    const parsedLoginRouteSearchParams = qs.parse(loginRoute.split('?')[1] ?? '')\n\n    const searchParamsWithRedirect = `${qs.stringify(\n      {\n        ...parsedLoginRouteSearchParams,\n        ...(redirectRoute ? { redirect: redirectRoute } : {}),\n      },\n      { addQueryPrefix: true },\n    )}`\n\n    redirect(`${loginRoute.split('?')[0]}${searchParamsWithRedirect}`)\n  }\n}\n"],"names":["redirect","qs","isAdminAuthRoute","isAdminRoute","handleAuthRedirect","config","redirectUnauthenticatedUser","route","searchParams","admin","routes","login","loginRouteFromConfig","adminRoute","redirectRoute","encodeURIComponent","Object","keys","length","stringify","addQueryPrefix","undefined","adminLoginRoute","customLoginRoute","loginRoute","parsedLoginRouteSearchParams","parse","split","searchParamsWithRedirect"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,qBAAoB;AAC7C,YAAYC,QAAQ,SAAQ;AAE5B,SAASC,gBAAgB,EAAEC,YAAY,QAAQ,cAAa;AAE5D,OAAO,MAAMC,qBAAqB,CAAC,EACjCC,MAAM,EACNC,2BAA2B,EAC3BC,KAAK,EACLC,YAAY,EAMb;IACC,MAAM,EACJC,OAAO,EACLC,QAAQ,EAAEC,OAAOC,oBAAoB,EAAE,EACxC,EACDF,QAAQ,EAAED,OAAOI,UAAU,EAAE,EAC9B,GAAGR;IAEJ,IAAI,CAACH,iBAAiBG,QAAQE,OAAOM,aAAa;QAChD,IAAIL,gBAAgB,cAAcA,cAAc,OAAOA,aAAaR,QAAQ;QAE5E,MAAMc,gBAAgBC,mBACpBR,QAAQS,OAAOC,IAAI,CAACT,gBAAgB,CAAC,GAAGU,MAAM,GAC1C,CAAC,EAAEjB,GAAGkB,SAAS,CAACX,cAAc;YAAEY,gBAAgB;QAAK,GAAG,CAAC,GACzDC;QAGN,MAAMC,kBAAkB,CAAC,EAAET,WAAW,EAAED,qBAAqB,CAAC;QAE9D,MAAMW,mBACJ,OAAOjB,gCAAgC,WAAWA,8BAA8Be;QAElF,MAAMG,aAAarB,aAAaI,OAAOM,cACnCS,kBACAC,oBAAoBX;QAExB,MAAMa,+BAA+BxB,GAAGyB,KAAK,CAACF,WAAWG,KAAK,CAAC,IAAI,CAAC,EAAE,IAAI;QAE1E,MAAMC,2BAA2B,CAAC,EAAE3B,GAAGkB,SAAS,CAC9C;YACE,GAAGM,4BAA4B;YAC/B,GAAIX,gBAAgB;gBAAEd,UAAUc;YAAc,IAAI,CAAC,CAAC;QACtD,GACA;YAAEM,gBAAgB;QAAK,GACvB,CAAC;QAEHpB,SAAS,CAAC,EAAEwB,WAAWG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAEC,yBAAyB,CAAC;IACnE;AACF,EAAC"}