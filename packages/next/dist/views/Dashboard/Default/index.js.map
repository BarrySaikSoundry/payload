{"version":3,"sources":["../../../../src/views/Dashboard/Default/index.tsx"],"sourcesContent":["import type { groupNavItems } from '@payloadcms/ui/shared'\nimport type { Permissions, ServerProps, VisibleEntities } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { Button, Card, Gutter, SetStepNav, SetViewActions } from '@payloadcms/ui'\nimport { EntityType, WithServerSideProps } from '@payloadcms/ui/shared'\nimport React, { Fragment } from 'react'\n\nimport './index.scss'\n\nconst baseClass = 'dashboard'\n\nexport type DashboardProps = {\n  Link: React.ComponentType<any>\n  navGroups?: ReturnType<typeof groupNavItems>\n  permissions: Permissions\n  visibleEntities: VisibleEntities\n} & ServerProps\n\nexport const DefaultDashboard: React.FC<DashboardProps> = (props) => {\n  const {\n    Link,\n    i18n,\n    i18n: { t },\n    locale,\n    navGroups,\n    params,\n    payload: {\n      config: {\n        admin: {\n          components: { afterDashboard, beforeDashboard },\n        },\n        routes: { admin: adminRoute },\n      },\n    },\n    payload,\n    permissions,\n    searchParams,\n    user,\n  } = props\n\n  const BeforeDashboards = Array.isArray(beforeDashboard)\n    ? beforeDashboard.map((Component, i) => (\n        <WithServerSideProps\n          Component={Component}\n          key={i}\n          serverOnlyProps={{\n            i18n,\n            locale,\n            params,\n            payload,\n            permissions,\n            searchParams,\n            user,\n          }}\n        />\n      ))\n    : null\n\n  const AfterDashboards = Array.isArray(afterDashboard)\n    ? afterDashboard.map((Component, i) => (\n        <WithServerSideProps\n          Component={Component}\n          key={i}\n          serverOnlyProps={{\n            i18n,\n            locale,\n            params,\n            payload,\n            permissions,\n            searchParams,\n            user,\n          }}\n        />\n      ))\n    : null\n\n  return (\n    <div className={baseClass}>\n      <SetStepNav nav={[]} />\n      <SetViewActions actions={[]} />\n      <Gutter className={`${baseClass}__wrap`}>\n        {Array.isArray(BeforeDashboards) && BeforeDashboards.map((Component) => Component)}\n        <Fragment>\n          <SetViewActions actions={[]} />\n          {!navGroups || navGroups?.length === 0 ? (\n            <p>no nav groups....</p>\n          ) : (\n            navGroups.map(({ entities, label }, groupIndex) => {\n              return (\n                <div className={`${baseClass}__group`} key={groupIndex}>\n                  <h2 className={`${baseClass}__label`}>{label}</h2>\n                  <ul className={`${baseClass}__card-list`}>\n                    {entities.map(({ type, entity }, entityIndex) => {\n                      let title: string\n                      let buttonAriaLabel: string\n                      let createHREF: string\n                      let href: string\n                      let hasCreatePermission: boolean\n\n                      if (type === EntityType.collection) {\n                        title = getTranslation(entity.labels.plural, i18n)\n                        buttonAriaLabel = t('general:showAllLabel', { label: title })\n                        href = `${adminRoute}/collections/${entity.slug}`\n                        createHREF = `${adminRoute}/collections/${entity.slug}/create`\n                        hasCreatePermission =\n                          permissions?.collections?.[entity.slug]?.create?.permission\n                      }\n\n                      if (type === EntityType.global) {\n                        title = getTranslation(entity.label, i18n)\n                        buttonAriaLabel = t('general:editLabel', {\n                          label: getTranslation(entity.label, i18n),\n                        })\n                        href = `${adminRoute}/globals/${entity.slug}`\n                      }\n\n                      return (\n                        <li key={entityIndex}>\n                          <Card\n                            Link={Link}\n                            actions={\n                              hasCreatePermission && type === EntityType.collection ? (\n                                <Button\n                                  Link={Link}\n                                  aria-label={t('general:createNewLabel', {\n                                    label: getTranslation(entity.labels.singular, i18n),\n                                  })}\n                                  buttonStyle=\"icon-label\"\n                                  el=\"link\"\n                                  icon=\"plus\"\n                                  iconStyle=\"with-border\"\n                                  round\n                                  to={createHREF}\n                                />\n                              ) : undefined\n                            }\n                            buttonAriaLabel={buttonAriaLabel}\n                            href={href}\n                            id={`card-${entity.slug}`}\n                            title={title}\n                            titleAs=\"h3\"\n                          />\n                        </li>\n                      )\n                    })}\n                  </ul>\n                </div>\n              )\n            })\n          )}\n        </Fragment>\n        {Array.isArray(AfterDashboards) && AfterDashboards.map((Component) => Component)}\n      </Gutter>\n    </div>\n  )\n}\n"],"names":["getTranslation","Button","Card","Gutter","SetStepNav","SetViewActions","EntityType","WithServerSideProps","React","Fragment","baseClass","DefaultDashboard","props","Link","i18n","t","locale","navGroups","params","payload","config","admin","components","afterDashboard","beforeDashboard","routes","adminRoute","permissions","searchParams","user","BeforeDashboards","Array","isArray","map","Component","i","serverOnlyProps","AfterDashboards","div","className","nav","actions","length","p","entities","label","groupIndex","h2","ul","type","entity","entityIndex","title","buttonAriaLabel","createHREF","href","hasCreatePermission","collection","labels","plural","slug","collections","create","permission","global","li","aria-label","singular","buttonStyle","el","icon","iconStyle","round","to","undefined","id","titleAs"],"mappings":"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"}