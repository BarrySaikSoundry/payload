{"version":3,"sources":["../../../src/views/Version/index.tsx"],"sourcesContent":["import type {\n  CollectionPermission,\n  Document,\n  EditViewComponent,\n  GlobalPermission,\n  OptionObject,\n} from 'payload'\n\nimport { notFound } from 'next/navigation.js'\nimport React from 'react'\n\nimport { getLatestVersion } from '../Versions/getLatestVersion.js'\nimport { DefaultVersionView } from './Default/index.js'\n\nexport const VersionView: EditViewComponent = async (props) => {\n  const { initPageResult, routeSegments } = props\n\n  const {\n    collectionConfig,\n    docID: id,\n    globalConfig,\n    permissions,\n    req,\n    req: { payload, payload: { config } = {}, user } = {},\n  } = initPageResult\n\n  const versionID = routeSegments[routeSegments.length - 1]\n\n  const collectionSlug = collectionConfig?.slug\n  const globalSlug = globalConfig?.slug\n\n  const { localization } = config\n\n  let docPermissions: CollectionPermission | GlobalPermission\n  let slug: string\n\n  let doc: Document\n  let latestPublishedVersion = null\n  let latestDraftVersion = null\n\n  if (collectionSlug) {\n    // /collections/:slug/:id/versions/:versionID\n    slug = collectionSlug\n    docPermissions = permissions.collections[collectionSlug]\n\n    try {\n      doc = await payload.findVersionByID({\n        id: versionID,\n        collection: slug,\n        depth: 1,\n        locale: '*',\n        overrideAccess: false,\n        req,\n        user,\n      })\n\n      if (collectionConfig?.versions?.drafts) {\n        latestDraftVersion = await getLatestVersion(payload, slug, 'draft', 'collection')\n        latestPublishedVersion = await getLatestVersion(payload, slug, 'published', 'collection')\n      }\n    } catch (error) {\n      return notFound()\n    }\n  }\n\n  if (globalSlug) {\n    // /globals/:slug/versions/:versionID\n    slug = globalSlug\n    docPermissions = permissions.globals[globalSlug]\n\n    try {\n      doc = await payload.findGlobalVersionByID({\n        id: versionID,\n        slug,\n        depth: 1,\n        locale: '*',\n        overrideAccess: false,\n        req,\n        user,\n      })\n\n      if (globalConfig?.versions?.drafts) {\n        latestDraftVersion = await getLatestVersion(payload, slug, 'draft', 'global')\n        latestPublishedVersion = await getLatestVersion(payload, slug, 'published', 'global')\n      }\n    } catch (error) {\n      return notFound()\n    }\n  }\n\n  const publishedNewerThanDraft = latestPublishedVersion?.updatedAt > latestDraftVersion?.updatedAt\n\n  if (publishedNewerThanDraft) {\n    latestDraftVersion = {\n      id: '',\n      updatedAt: '',\n    }\n  }\n\n  const localeOptions: OptionObject[] =\n    localization &&\n    localization?.locales &&\n    localization.locales.map(({ code, label }) => ({\n      label: typeof label === 'string' ? label : '',\n      value: code,\n    }))\n\n  const latestVersion =\n    latestPublishedVersion?.updatedAt > latestDraftVersion?.updatedAt\n      ? latestPublishedVersion\n      : latestDraftVersion\n\n  if (!doc) {\n    return notFound()\n  }\n\n  return (\n    <DefaultVersionView\n      doc={doc}\n      docPermissions={docPermissions}\n      initialComparisonDoc={latestVersion}\n      latestDraftVersion={latestDraftVersion.id}\n      latestPublishedVersion={latestPublishedVersion.id}\n      localeOptions={localeOptions}\n      versionID={versionID}\n    />\n  )\n}\n"],"names":["notFound","React","getLatestVersion","DefaultVersionView","VersionView","props","initPageResult","routeSegments","collectionConfig","docID","id","globalConfig","permissions","req","payload","config","user","versionID","length","collectionSlug","slug","globalSlug","localization","docPermissions","doc","latestPublishedVersion","latestDraftVersion","collections","findVersionByID","collection","depth","locale","overrideAccess","versions","drafts","error","globals","findGlobalVersionByID","publishedNewerThanDraft","updatedAt","localeOptions","locales","map","code","label","value","latestVersion","initialComparisonDoc"],"mappings":";AAQA,SAASA,QAAQ,QAAQ,qBAAoB;AAC7C,OAAOC,WAAW,QAAO;AAEzB,SAASC,gBAAgB,QAAQ,kCAAiC;AAClE,SAASC,kBAAkB,QAAQ,qBAAoB;AAEvD,OAAO,MAAMC,cAAiC,OAAOC;IACnD,MAAM,EAAEC,cAAc,EAAEC,aAAa,EAAE,GAAGF;IAE1C,MAAM,EACJG,gBAAgB,EAChBC,OAAOC,EAAE,EACTC,YAAY,EACZC,WAAW,EACXC,GAAG,EACHA,KAAK,EAAEC,OAAO,EAAEA,SAAS,EAAEC,MAAM,EAAE,GAAG,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAG,CAAC,CAAC,EACtD,GAAGV;IAEJ,MAAMW,YAAYV,aAAa,CAACA,cAAcW,MAAM,GAAG,EAAE;IAEzD,MAAMC,iBAAiBX,kBAAkBY;IACzC,MAAMC,aAAaV,cAAcS;IAEjC,MAAM,EAAEE,YAAY,EAAE,GAAGP;IAEzB,IAAIQ;IACJ,IAAIH;IAEJ,IAAII;IACJ,IAAIC,yBAAyB;IAC7B,IAAIC,qBAAqB;IAEzB,IAAIP,gBAAgB;QAClB,6CAA6C;QAC7CC,OAAOD;QACPI,iBAAiBX,YAAYe,WAAW,CAACR,eAAe;QAExD,IAAI;YACFK,MAAM,MAAMV,QAAQc,eAAe,CAAC;gBAClClB,IAAIO;gBACJY,YAAYT;gBACZU,OAAO;gBACPC,QAAQ;gBACRC,gBAAgB;gBAChBnB;gBACAG;YACF;YAEA,IAAIR,kBAAkByB,UAAUC,QAAQ;gBACtCR,qBAAqB,MAAMxB,iBAAiBY,SAASM,MAAM,SAAS;gBACpEK,yBAAyB,MAAMvB,iBAAiBY,SAASM,MAAM,aAAa;YAC9E;QACF,EAAE,OAAOe,OAAO;YACd,OAAOnC;QACT;IACF;IAEA,IAAIqB,YAAY;QACd,qCAAqC;QACrCD,OAAOC;QACPE,iBAAiBX,YAAYwB,OAAO,CAACf,WAAW;QAEhD,IAAI;YACFG,MAAM,MAAMV,QAAQuB,qBAAqB,CAAC;gBACxC3B,IAAIO;gBACJG;gBACAU,OAAO;gBACPC,QAAQ;gBACRC,gBAAgB;gBAChBnB;gBACAG;YACF;YAEA,IAAIL,cAAcsB,UAAUC,QAAQ;gBAClCR,qBAAqB,MAAMxB,iBAAiBY,SAASM,MAAM,SAAS;gBACpEK,yBAAyB,MAAMvB,iBAAiBY,SAASM,MAAM,aAAa;YAC9E;QACF,EAAE,OAAOe,OAAO;YACd,OAAOnC;QACT;IACF;IAEA,MAAMsC,0BAA0Bb,wBAAwBc,YAAYb,oBAAoBa;IAExF,IAAID,yBAAyB;QAC3BZ,qBAAqB;YACnBhB,IAAI;YACJ6B,WAAW;QACb;IACF;IAEA,MAAMC,gBACJlB,gBACAA,cAAcmB,WACdnB,aAAamB,OAAO,CAACC,GAAG,CAAC,CAAC,EAAEC,IAAI,EAAEC,KAAK,EAAE,GAAM,CAAA;YAC7CA,OAAO,OAAOA,UAAU,WAAWA,QAAQ;YAC3CC,OAAOF;QACT,CAAA;IAEF,MAAMG,gBACJrB,wBAAwBc,YAAYb,oBAAoBa,YACpDd,yBACAC;IAEN,IAAI,CAACF,KAAK;QACR,OAAOxB;IACT;IAEA,qBACE,KAACG;QACCqB,KAAKA;QACLD,gBAAgBA;QAChBwB,sBAAsBD;QACtBpB,oBAAoBA,mBAAmBhB,EAAE;QACzCe,wBAAwBA,uBAAuBf,EAAE;QACjD8B,eAAeA;QACfvB,WAAWA;;AAGjB,EAAC"}