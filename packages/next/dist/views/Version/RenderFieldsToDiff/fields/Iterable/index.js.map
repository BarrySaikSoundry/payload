{"version":3,"sources":["../../../../../../src/views/Version/RenderFieldsToDiff/fields/Iterable/index.tsx"],"sourcesContent":["import type { MappedField } from '@payloadcms/ui/utilities/buildComponentMap'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { getUniqueListBy } from 'payload/shared'\nimport React from 'react'\n\nimport type { Props } from '../types.js'\n\nimport Label from '../../Label/index.js'\nimport RenderFieldsToDiff from '../../index.js'\nimport './index.scss'\n\nconst baseClass = 'iterable-diff'\n\nconst Iterable: React.FC<Props> = ({\n  comparison,\n  diffComponents,\n  field,\n  i18n,\n  locale,\n  locales,\n  permissions,\n  version,\n}) => {\n  const versionRowCount = Array.isArray(version) ? version.length : 0\n  const comparisonRowCount = Array.isArray(comparison) ? comparison.length : 0\n  const maxRows = Math.max(versionRowCount, comparisonRowCount)\n\n  return (\n    <div className={baseClass}>\n      {'label' in field.fieldComponentProps &&\n        field.fieldComponentProps.label &&\n        typeof field.fieldComponentProps.label !== 'function' && (\n          <Label>\n            {locale && <span className={`${baseClass}__locale-label`}>{locale}</span>}\n            {getTranslation(field.fieldComponentProps.label, i18n)}\n          </Label>\n        )}\n      {maxRows > 0 && (\n        <React.Fragment>\n          {Array.from(Array(maxRows).keys()).map((row, i) => {\n            const versionRow = version?.[i] || {}\n            const comparisonRow = comparison?.[i] || {}\n\n            let fieldMap: MappedField[] = []\n\n            if (field.type === 'array' && 'fieldMap' in field.fieldComponentProps)\n              fieldMap = field.fieldComponentProps.fieldMap\n\n            if (field.type === 'blocks') {\n              fieldMap = [\n                // {\n                //   name: 'blockType',\n                //   label: i18n.t('fields:blockType'),\n                //   type: 'text',\n                // },\n              ]\n\n              if (versionRow?.blockType === comparisonRow?.blockType) {\n                const matchedBlock = ('blocks' in field.fieldComponentProps &&\n                  field.fieldComponentProps.blocks?.find(\n                    (block) => block.slug === versionRow?.blockType,\n                  )) || {\n                  fieldMap: [],\n                }\n\n                fieldMap = [...fieldMap, ...matchedBlock.fieldMap]\n              } else {\n                const matchedVersionBlock = ('blocks' in field.fieldComponentProps &&\n                  field.fieldComponentProps.blocks?.find(\n                    (block) => block.slug === versionRow?.blockType,\n                  )) || {\n                  fieldMap: [],\n                }\n\n                const matchedComparisonBlock = ('blocks' in field.fieldComponentProps &&\n                  field.fieldComponentProps.blocks?.find(\n                    (block) => block.slug === comparisonRow?.blockType,\n                  )) || {\n                  fieldMap: [],\n                }\n\n                fieldMap = getUniqueListBy<MappedField>(\n                  [\n                    ...fieldMap,\n                    ...matchedVersionBlock.fieldMap,\n                    ...matchedComparisonBlock.fieldMap,\n                  ],\n                  'name',\n                )\n              }\n            }\n\n            return (\n              <div className={`${baseClass}__wrap`} key={i}>\n                <RenderFieldsToDiff\n                  comparison={comparisonRow}\n                  diffComponents={diffComponents}\n                  fieldMap={fieldMap}\n                  fieldPermissions={permissions}\n                  i18n={i18n}\n                  locales={locales}\n                  version={versionRow}\n                />\n              </div>\n            )\n          })}\n        </React.Fragment>\n      )}\n      {maxRows === 0 && (\n        <div className={`${baseClass}__no-rows`}>\n          {i18n.t('version:noRowsFound', {\n            label:\n              'labels' in field.fieldComponentProps && field.fieldComponentProps.labels?.plural\n                ? getTranslation(field.fieldComponentProps.labels.plural, i18n)\n                : i18n.t('general:rows'),\n          })}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Iterable\n"],"names":["getTranslation","getUniqueListBy","React","Label","RenderFieldsToDiff","baseClass","Iterable","comparison","diffComponents","field","i18n","locale","locales","permissions","version","versionRowCount","Array","isArray","length","comparisonRowCount","maxRows","Math","max","div","className","fieldComponentProps","label","span","Fragment","from","keys","map","row","i","versionRow","comparisonRow","fieldMap","type","blockType","matchedBlock","blocks","find","block","slug","matchedVersionBlock","matchedComparisonBlock","fieldPermissions","t","labels","plural"],"mappings":"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"}