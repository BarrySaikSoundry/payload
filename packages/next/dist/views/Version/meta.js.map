{"version":3,"sources":["../../../src/views/Version/meta.ts"],"sourcesContent":["import type { Metadata } from 'next'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { formatDate } from '@payloadcms/ui/shared'\n\nimport type { GenerateEditViewMetadata } from '../Document/getMetaBySegment.js'\n\nimport { meta } from '../../utilities/meta.js'\n\nexport const generateMetadata: GenerateEditViewMetadata = async ({\n  collectionConfig,\n  config,\n  globalConfig,\n  i18n,\n}): Promise<Metadata> => {\n  const { t } = i18n\n\n  let title: string = ''\n  let description: string = ''\n  const keywords: string = ''\n\n  const doc: any = {} // TODO: figure this out\n\n  const formattedCreatedAt = doc?.createdAt\n    ? formatDate({ date: doc.createdAt, i18n, pattern: config?.admin?.dateFormat })\n    : ''\n\n  if (collectionConfig) {\n    const useAsTitle = collectionConfig?.admin?.useAsTitle || 'id'\n    const entityLabel = getTranslation(collectionConfig.labels.singular, i18n)\n    const titleFromData = doc?.[useAsTitle]\n    title = `${t('version:version')}${formattedCreatedAt ? ` - ${formattedCreatedAt}` : ''}${titleFromData ? ` - ${titleFromData}` : ''} - ${entityLabel}`\n    description = t('version:viewingVersion', { documentTitle: doc[useAsTitle], entityLabel })\n  }\n\n  if (globalConfig) {\n    const entityLabel = getTranslation(globalConfig.label, i18n)\n    title = `${t('version:version')}${formattedCreatedAt ? ` - ${formattedCreatedAt}` : ''}${entityLabel}`\n    description = t('version:viewingVersionGlobal', { entityLabel })\n  }\n\n  return meta({\n    ...(config.admin.meta || {}),\n    description,\n    keywords,\n    serverURL: config.serverURL,\n    title,\n    ...(collectionConfig?.admin.meta || {}),\n    ...(globalConfig?.admin.meta || {}),\n  })\n}\n"],"names":["getTranslation","formatDate","meta","generateMetadata","collectionConfig","config","globalConfig","i18n","t","title","description","keywords","doc","formattedCreatedAt","createdAt","date","pattern","admin","dateFormat","useAsTitle","entityLabel","labels","singular","titleFromData","documentTitle","label","serverURL"],"mappings":"AAEA,SAASA,cAAc,QAAQ,2BAA0B;AACzD,SAASC,UAAU,QAAQ,wBAAuB;AAIlD,SAASC,IAAI,QAAQ,0BAAyB;AAE9C,OAAO,MAAMC,mBAA6C,OAAO,EAC/DC,gBAAgB,EAChBC,MAAM,EACNC,YAAY,EACZC,IAAI,EACL;IACC,MAAM,EAAEC,CAAC,EAAE,GAAGD;IAEd,IAAIE,QAAgB;IACpB,IAAIC,cAAsB;IAC1B,MAAMC,WAAmB;IAEzB,MAAMC,MAAW,CAAC,EAAE,wBAAwB;;IAE5C,MAAMC,qBAAqBD,KAAKE,YAC5Bb,WAAW;QAAEc,MAAMH,IAAIE,SAAS;QAAEP;QAAMS,SAASX,QAAQY,OAAOC;IAAW,KAC3E;IAEJ,IAAId,kBAAkB;QACpB,MAAMe,aAAaf,kBAAkBa,OAAOE,cAAc;QAC1D,MAAMC,cAAcpB,eAAeI,iBAAiBiB,MAAM,CAACC,QAAQ,EAAEf;QACrE,MAAMgB,gBAAgBX,KAAK,CAACO,WAAW;QACvCV,QAAQ,CAAC,EAAED,EAAE,mBAAmB,EAAEK,qBAAqB,CAAC,GAAG,EAAEA,mBAAmB,CAAC,GAAG,GAAG,EAAEU,gBAAgB,CAAC,GAAG,EAAEA,cAAc,CAAC,GAAG,GAAG,GAAG,EAAEH,YAAY,CAAC;QACtJV,cAAcF,EAAE,0BAA0B;YAAEgB,eAAeZ,GAAG,CAACO,WAAW;YAAEC;QAAY;IAC1F;IAEA,IAAId,cAAc;QAChB,MAAMc,cAAcpB,eAAeM,aAAamB,KAAK,EAAElB;QACvDE,QAAQ,CAAC,EAAED,EAAE,mBAAmB,EAAEK,qBAAqB,CAAC,GAAG,EAAEA,mBAAmB,CAAC,GAAG,GAAG,EAAEO,YAAY,CAAC;QACtGV,cAAcF,EAAE,gCAAgC;YAAEY;QAAY;IAChE;IAEA,OAAOlB,KAAK;QACV,GAAIG,OAAOY,KAAK,CAACf,IAAI,IAAI,CAAC,CAAC;QAC3BQ;QACAC;QACAe,WAAWrB,OAAOqB,SAAS;QAC3BjB;QACA,GAAIL,kBAAkBa,MAAMf,QAAQ,CAAC,CAAC;QACtC,GAAII,cAAcW,MAAMf,QAAQ,CAAC,CAAC;IACpC;AACF,EAAC"}