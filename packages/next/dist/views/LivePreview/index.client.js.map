{"version":3,"sources":["../../../src/views/LivePreview/index.client.tsx"],"sourcesContent":["'use client'\nimport type { FormProps } from '@payloadcms/ui'\nimport type { FieldMap } from '@payloadcms/ui/utilities/buildComponentMap'\nimport type {\n  ClientCollectionConfig,\n  ClientConfig,\n  ClientGlobalConfig,\n  Data,\n  LivePreviewConfig,\n} from 'payload'\n\nimport {\n  DocumentControls,\n  DocumentFields,\n  Form,\n  OperationProvider,\n  SetViewActions,\n  useAuth,\n  useComponentMap,\n  useConfig,\n  useDocumentEvents,\n  useDocumentInfo,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { getFormState } from '@payloadcms/ui/shared'\nimport React, { Fragment, useCallback } from 'react'\n\nimport { LeaveWithoutSaving } from '../../elements/LeaveWithoutSaving/index.js'\nimport { SetDocumentStepNav } from '../Edit/Default/SetDocumentStepNav/index.js'\nimport { SetDocumentTitle } from '../Edit/Default/SetDocumentTitle/index.js'\nimport { useLivePreviewContext } from './Context/context.js'\nimport { LivePreviewProvider } from './Context/index.js'\nimport { LivePreview } from './Preview/index.js'\nimport './index.scss'\nimport { usePopupWindow } from './usePopupWindow.js'\n\nconst baseClass = 'live-preview'\n\ntype Props = {\n  apiRoute: string\n  collectionConfig?: ClientCollectionConfig\n  config: ClientConfig\n  fieldMap: FieldMap\n  globalConfig?: ClientGlobalConfig\n  schemaPath: string\n  serverURL: string\n}\n\nconst PreviewView: React.FC<Props> = ({\n  apiRoute,\n  collectionConfig,\n  config,\n  fieldMap,\n  globalConfig,\n  schemaPath,\n  serverURL,\n}) => {\n  const {\n    id,\n    AfterDocument,\n    AfterFields,\n    BeforeDocument,\n    BeforeFields,\n    action,\n    apiURL,\n    collectionSlug,\n    disableActions,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    getDocPreferences,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    initialData,\n    initialState,\n    isEditing,\n    isInitializing,\n    onSave: onSaveFromProps,\n  } = useDocumentInfo()\n\n  const operation = id ? 'update' : 'create'\n\n  const {\n    admin: { user: userSlug },\n  } = useConfig()\n  const { t } = useTranslation()\n  const { previewWindowType } = useLivePreviewContext()\n  const { refreshCookieAsync, user } = useAuth()\n  const { reportUpdate } = useDocumentEvents()\n\n  const onSave = useCallback(\n    (json) => {\n      reportUpdate({\n        id,\n        entitySlug: collectionSlug,\n        updatedAt: json?.result?.updatedAt || new Date().toISOString(),\n      })\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      if (typeof onSaveFromProps === 'function') {\n        void onSaveFromProps({\n          ...json,\n          operation: id ? 'update' : 'create',\n        })\n      }\n    },\n    [collectionSlug, id, onSaveFromProps, refreshCookieAsync, reportUpdate, user, userSlug],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState }) => {\n      const docPreferences = await getDocPreferences()\n\n      return getFormState({\n        apiRoute,\n        body: {\n          id,\n          docPreferences,\n          formState: prevFormState,\n          operation,\n          schemaPath,\n        },\n        serverURL,\n      })\n    },\n    [serverURL, apiRoute, id, operation, schemaPath, getDocPreferences],\n  )\n\n  return (\n    <Fragment>\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disabled={!hasSavePermission}\n          initialState={initialState}\n          isInitializing={isInitializing}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {((collectionConfig &&\n            !(collectionConfig.versions?.drafts && collectionConfig.versions?.drafts?.autosave)) ||\n            (globalConfig &&\n              !(globalConfig.versions?.drafts && globalConfig.versions?.drafts?.autosave))) &&\n            !disableLeaveWithoutSaving && <LeaveWithoutSaving />}\n          <SetDocumentStepNav\n            collectionSlug={collectionSlug}\n            globalLabel={globalConfig?.label}\n            globalSlug={globalSlug}\n            id={id}\n            pluralLabel={collectionConfig ? collectionConfig?.labels?.plural : undefined}\n            useAsTitle={collectionConfig ? collectionConfig?.admin?.useAsTitle : undefined}\n            view={t('general:livePreview')}\n          />\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={id?.toString() || ''}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            data={initialData}\n            disableActions={disableActions}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            permissions={docPermissions}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n          />\n          <div\n            className={[baseClass, previewWindowType === 'popup' && `${baseClass}--detached`]\n              .filter(Boolean)\n              .join(' ')}\n          >\n            <div\n              className={[\n                `${baseClass}__main`,\n                previewWindowType === 'popup' && `${baseClass}__main--popup-open`,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n            >\n              {BeforeDocument}\n              <DocumentFields\n                AfterFields={AfterFields}\n                BeforeFields={BeforeFields}\n                docPermissions={docPermissions}\n                fieldMap={fieldMap}\n                forceSidebarWrap\n                readOnly={!hasSavePermission}\n                schemaPath={collectionSlug || globalSlug}\n              />\n              {AfterDocument}\n            </div>\n            <LivePreview collectionSlug={collectionSlug} globalSlug={globalSlug} />\n          </div>\n        </Form>\n      </OperationProvider>\n    </Fragment>\n  )\n}\n\nexport const LivePreviewClient: React.FC<{\n  breakpoints: LivePreviewConfig['breakpoints']\n  initialData: Data\n  url: string\n}> = (props) => {\n  const { breakpoints, url } = props\n  const { collectionSlug, globalSlug } = useDocumentInfo()\n\n  const config = useConfig()\n\n  const { isPopupOpen, openPopupWindow, popupRef } = usePopupWindow({\n    eventType: 'payload-live-preview',\n    url,\n  })\n\n  const {\n    collections,\n    globals,\n    routes: { api: apiRoute },\n    serverURL,\n  } = config\n\n  const collectionConfig =\n    collectionSlug && collections.find((collection) => collection.slug === collectionSlug)\n\n  const globalConfig = globalSlug && globals.find((global) => global.slug === globalSlug)\n\n  const schemaPath = collectionSlug || globalSlug\n\n  const { getComponentMap } = useComponentMap()\n\n  const componentMap = getComponentMap({ collectionSlug, globalSlug })\n\n  const { getFieldMap } = useComponentMap()\n\n  const fieldMap = getFieldMap({\n    collectionSlug: collectionConfig?.slug,\n    globalSlug: globalConfig?.slug,\n  })\n\n  return (\n    <Fragment>\n      <SetViewActions actions={componentMap?.actionsMap?.Edit?.LivePreview} />\n      <LivePreviewProvider\n        breakpoints={breakpoints}\n        fieldSchema={collectionConfig?.fields || globalConfig?.fields}\n        isPopupOpen={isPopupOpen}\n        openPopupWindow={openPopupWindow}\n        popupRef={popupRef}\n        url={url}\n      >\n        <PreviewView\n          apiRoute={apiRoute}\n          collectionConfig={collectionConfig}\n          config={config}\n          fieldMap={fieldMap}\n          globalConfig={globalConfig}\n          schemaPath={schemaPath}\n          serverURL={serverURL}\n        />\n      </LivePreviewProvider>\n    </Fragment>\n  )\n}\n"],"names":["DocumentControls","DocumentFields","Form","OperationProvider","SetViewActions","useAuth","useComponentMap","useConfig","useDocumentEvents","useDocumentInfo","useTranslation","getFormState","React","Fragment","useCallback","LeaveWithoutSaving","SetDocumentStepNav","SetDocumentTitle","useLivePreviewContext","LivePreviewProvider","LivePreview","usePopupWindow","baseClass","PreviewView","apiRoute","collectionConfig","config","fieldMap","globalConfig","schemaPath","serverURL","id","AfterDocument","AfterFields","BeforeDocument","BeforeFields","action","apiURL","collectionSlug","disableActions","disableLeaveWithoutSaving","docPermissions","getDocPreferences","globalSlug","hasPublishPermission","hasSavePermission","initialData","initialState","isEditing","isInitializing","onSave","onSaveFromProps","operation","admin","user","userSlug","t","previewWindowType","refreshCookieAsync","reportUpdate","json","entitySlug","updatedAt","result","Date","toISOString","onChange","formState","prevFormState","docPreferences","body","className","disabled","method","onSuccess","versions","drafts","autosave","globalLabel","label","pluralLabel","labels","plural","undefined","useAsTitle","view","fallback","toString","data","permissions","slug","div","filter","Boolean","join","forceSidebarWrap","readOnly","LivePreviewClient","props","breakpoints","url","isPopupOpen","openPopupWindow","popupRef","eventType","collections","globals","routes","api","find","collection","global","getComponentMap","componentMap","getFieldMap","actions","actionsMap","Edit","fieldSchema","fields"],"mappings":"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"}