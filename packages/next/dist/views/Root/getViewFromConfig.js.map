{"version":3,"sources":["../../../src/views/Root/getViewFromConfig.tsx"],"sourcesContent":["import type { AdminViewComponent, SanitizedConfig } from 'payload'\n\nimport type { initPage } from '../../utilities/initPage/index.js'\n\nimport { Account } from '../Account/index.js'\nimport { CreateFirstUserView } from '../CreateFirstUser/index.js'\nimport { Dashboard } from '../Dashboard/index.js'\nimport { Document as DocumentView } from '../Document/index.js'\nimport { ForgotPasswordView, forgotPasswordBaseClass } from '../ForgotPassword/index.js'\nimport { ListView } from '../List/index.js'\nimport { LoginView, loginBaseClass } from '../Login/index.js'\nimport { LogoutInactivity, LogoutView } from '../Logout/index.js'\nimport { ResetPassword, resetPasswordBaseClass } from '../ResetPassword/index.js'\nimport { UnauthorizedView } from '../Unauthorized/index.js'\nimport { Verify, verifyBaseClass } from '../Verify/index.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\nimport { isPathMatchingRoute } from './isPathMatchingRoute.js'\n\nconst baseClasses = {\n  account: 'account',\n  forgot: forgotPasswordBaseClass,\n  login: loginBaseClass,\n  reset: resetPasswordBaseClass,\n  verify: verifyBaseClass,\n}\n\ntype OneSegmentViews = {\n  [K in Exclude<keyof SanitizedConfig['admin']['routes'], 'reset'>]: AdminViewComponent\n}\n\nconst oneSegmentViews: OneSegmentViews = {\n  account: Account,\n  createFirstUser: CreateFirstUserView,\n  forgot: ForgotPasswordView,\n  inactivity: LogoutInactivity,\n  login: LoginView,\n  logout: LogoutView,\n  unauthorized: UnauthorizedView,\n}\n\nexport const getViewFromConfig = ({\n  adminRoute,\n  config,\n  currentRoute,\n  searchParams,\n  segments,\n}: {\n  adminRoute\n  config: SanitizedConfig\n  currentRoute: string\n  searchParams: {\n    [key: string]: string | string[]\n  }\n  segments: string[]\n}): {\n  DefaultView: AdminViewComponent\n  initPageOptions: Parameters<typeof initPage>[0]\n  templateClassName: string\n  templateType: 'default' | 'minimal'\n} => {\n  let ViewToRender: AdminViewComponent = null\n  let templateClassName: string\n  let templateType: 'default' | 'minimal' | undefined\n\n  const initPageOptions: Parameters<typeof initPage>[0] = {\n    config,\n    route: currentRoute,\n    searchParams,\n  }\n\n  const [segmentOne, segmentTwo] = segments\n\n  const isGlobal = segmentOne === 'globals'\n  const isCollection = segmentOne === 'collections'\n\n  switch (segments.length) {\n    case 0: {\n      if (currentRoute === adminRoute) {\n        ViewToRender = Dashboard\n        templateClassName = 'dashboard'\n        templateType = 'default'\n        initPageOptions.redirectUnauthenticatedUser = true\n      }\n      break\n    }\n    case 1: {\n      // users can override the default routes via `admin.routes` config\n      // i.e.{ admin: { routes: { logout: '/sign-out', inactivity: '/idle' }}}\n      let viewToRender: keyof typeof oneSegmentViews\n\n      if (config.admin.routes) {\n        const matchedRoute = Object.entries(config.admin.routes).find(([, route]) => {\n          return isPathMatchingRoute({\n            currentRoute,\n            exact: true,\n            path: `${adminRoute}${route}`,\n          })\n        })\n\n        if (matchedRoute) {\n          viewToRender = matchedRoute[0] as keyof typeof oneSegmentViews\n        }\n      }\n\n      if (oneSegmentViews[viewToRender]) {\n        // --> /account\n        // --> /create-first-user\n        // --> /forgot\n        // --> /login\n        // --> /logout\n        // --> /logout-inactivity\n        // --> /unauthorized\n\n        ViewToRender = oneSegmentViews[viewToRender]\n        templateClassName = baseClasses[viewToRender]\n        templateType = 'minimal'\n\n        if (viewToRender === 'account') {\n          initPageOptions.redirectUnauthenticatedUser = true\n          templateType = 'default'\n        }\n      }\n      break\n    }\n    case 2: {\n      if (segmentOne === 'reset') {\n        // --> /reset/:token\n        ViewToRender = ResetPassword\n        templateClassName = baseClasses[segmentTwo]\n        templateType = 'minimal'\n      }\n\n      if (isCollection) {\n        // --> /collections/:collectionSlug\n        initPageOptions.redirectUnauthenticatedUser = true\n        ViewToRender = ListView\n        templateClassName = `${segmentTwo}-list`\n        templateType = 'default'\n      } else if (isGlobal) {\n        // --> /globals/:globalSlug\n        initPageOptions.redirectUnauthenticatedUser = true\n        ViewToRender = DocumentView\n        templateClassName = 'global-edit'\n        templateType = 'default'\n      }\n      break\n    }\n    default:\n      if (segmentTwo === 'verify') {\n        // --> /:collectionSlug/verify/:token\n        ViewToRender = Verify\n        templateClassName = 'verify'\n        templateType = 'minimal'\n      } else if (isCollection) {\n        // Custom Views\n        // --> /collections/:collectionSlug/:id\n        // --> /collections/:collectionSlug/:id/preview\n        // --> /collections/:collectionSlug/:id/versions\n        // --> /collections/:collectionSlug/:id/versions/:versionId\n        // --> /collections/:collectionSlug/:id/api\n        initPageOptions.redirectUnauthenticatedUser = true\n        ViewToRender = DocumentView\n        templateClassName = `collection-default-edit`\n        templateType = 'default'\n      } else if (isGlobal) {\n        // Custom Views\n        // --> /globals/:globalSlug/versions\n        // --> /globals/:globalSlug/preview\n        // --> /globals/:globalSlug/versions/:versionId\n        // --> /globals/:globalSlug/api\n        initPageOptions.redirectUnauthenticatedUser = true\n        ViewToRender = DocumentView\n        templateClassName = `global-edit`\n        templateType = 'default'\n      }\n      break\n  }\n\n  if (!ViewToRender) {\n    ViewToRender = getCustomViewByRoute({ config, currentRoute })\n  }\n\n  return {\n    DefaultView: ViewToRender,\n    initPageOptions,\n    templateClassName,\n    templateType,\n  }\n}\n"],"names":["Account","CreateFirstUserView","Dashboard","Document","DocumentView","ForgotPasswordView","forgotPasswordBaseClass","ListView","LoginView","loginBaseClass","LogoutInactivity","LogoutView","ResetPassword","resetPasswordBaseClass","UnauthorizedView","Verify","verifyBaseClass","getCustomViewByRoute","isPathMatchingRoute","baseClasses","account","forgot","login","reset","verify","oneSegmentViews","createFirstUser","inactivity","logout","unauthorized","getViewFromConfig","adminRoute","config","currentRoute","searchParams","segments","ViewToRender","templateClassName","templateType","initPageOptions","route","segmentOne","segmentTwo","isGlobal","isCollection","length","redirectUnauthenticatedUser","viewToRender","admin","routes","matchedRoute","Object","entries","find","exact","path","DefaultView"],"mappings":"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"}