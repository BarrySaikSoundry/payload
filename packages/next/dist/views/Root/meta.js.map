{"version":3,"sources":["../../../src/views/Root/meta.ts"],"sourcesContent":["import type { Metadata } from 'next'\nimport type { SanitizedConfig } from 'payload'\n\nimport { getNextRequestI18n } from '../../utilities/getNextRequestI18n.js'\nimport { generateAccountMetadata } from '../Account/index.js'\nimport { generateCreateFirstUserMetadata } from '../CreateFirstUser/index.js'\nimport { generateDashboardMetadata } from '../Dashboard/index.js'\nimport { generateDocumentMetadata } from '../Document/meta.js'\nimport { generateForgotPasswordMetadata } from '../ForgotPassword/index.js'\nimport { generateListMetadata } from '../List/index.js'\nimport { generateLoginMetadata } from '../Login/index.js'\nimport { generateNotFoundMeta } from '../NotFound/meta.js'\nimport { generateResetPasswordMetadata } from '../ResetPassword/index.js'\nimport { generateUnauthorizedMetadata } from '../Unauthorized/index.js'\nimport { generateVerifyMetadata } from '../Verify/index.js'\n\nconst oneSegmentMeta = {\n  'create-first-user': generateCreateFirstUserMetadata,\n  forgot: generateForgotPasswordMetadata,\n  login: generateLoginMetadata,\n  logout: generateUnauthorizedMetadata,\n  'logout-inactivity': generateUnauthorizedMetadata,\n  unauthorized: generateUnauthorizedMetadata,\n}\n\ntype Args = {\n  config: Promise<SanitizedConfig>\n  params: {\n    [key: string]: string | string[]\n  }\n  searchParams: {\n    [key: string]: string | string[]\n  }\n}\n\nexport const generatePageMetadata = async ({ config: configPromise, params }: Args) => {\n  const config = await configPromise\n\n  const segments = Array.isArray(params.segments) ? params.segments : []\n\n  const [segmentOne, segmentTwo] = segments\n\n  const isGlobal = segmentOne === 'globals'\n  const isCollection = segmentOne === 'collections'\n\n  const i18n = await getNextRequestI18n({\n    config,\n  })\n\n  let meta: Metadata\n\n  // TODO: handle custom routes\n\n  const collectionConfig =\n    isCollection &&\n    segments.length > 1 &&\n    config?.collections?.find((collection) => collection.slug === segmentTwo)\n\n  const globalConfig =\n    isGlobal && segments.length > 1 && config?.globals?.find((global) => global.slug === segmentTwo)\n\n  switch (segments.length) {\n    case 0: {\n      meta = await generateDashboardMetadata({ config, i18n })\n      break\n    }\n    case 1: {\n      if (oneSegmentMeta[segmentOne] && segmentOne !== 'account') {\n        // --> /create-first-user\n        // --> /forgot\n        // --> /login\n        // --> /logout\n        // --> /logout-inactivity\n        // --> /unauthorized\n        meta = await oneSegmentMeta[segmentOne]({ config, i18n })\n        break\n      } else if (segmentOne === 'account') {\n        // --> /account\n        meta = await generateAccountMetadata({ config, i18n })\n        break\n      }\n      break\n    }\n    case 2: {\n      if (segmentOne === 'reset') {\n        // --> /reset/:token\n        meta = await generateResetPasswordMetadata({ config, i18n })\n      }\n      if (isCollection) {\n        // --> /collections/:collectionSlug\n        meta = await generateListMetadata({ collectionConfig, config, i18n })\n      } else if (isGlobal) {\n        // --> /globals/:globalSlug\n        meta = await generateDocumentMetadata({\n          config,\n          globalConfig,\n          i18n,\n          params,\n        })\n      }\n      break\n    }\n    default: {\n      if (segmentTwo === 'verify') {\n        // --> /:collectionSlug/verify/:token\n        meta = await generateVerifyMetadata({ config, i18n })\n      } else if (isCollection) {\n        // Custom Views\n        // --> /collections/:collectionSlug/:id\n        // --> /collections/:collectionSlug/:id/preview\n        // --> /collections/:collectionSlug/:id/versions\n        // --> /collections/:collectionSlug/:id/versions/:version\n        // --> /collections/:collectionSlug/:id/api\n        meta = await generateDocumentMetadata({ collectionConfig, config, i18n, params })\n      } else if (isGlobal) {\n        // Custom Views\n        // --> /globals/:globalSlug/versions\n        // --> /globals/:globalSlug/versions/:version\n        // --> /globals/:globalSlug/preview\n        // --> /globals/:globalSlug/api\n        meta = await generateDocumentMetadata({\n          config,\n          globalConfig,\n          i18n,\n          params,\n        })\n      }\n      break\n    }\n  }\n\n  if (!meta) {\n    meta = await generateNotFoundMeta({ config, i18n })\n  }\n\n  return meta\n}\n"],"names":["getNextRequestI18n","generateAccountMetadata","generateCreateFirstUserMetadata","generateDashboardMetadata","generateDocumentMetadata","generateForgotPasswordMetadata","generateListMetadata","generateLoginMetadata","generateNotFoundMeta","generateResetPasswordMetadata","generateUnauthorizedMetadata","generateVerifyMetadata","oneSegmentMeta","forgot","login","logout","unauthorized","generatePageMetadata","config","configPromise","params","segments","Array","isArray","segmentOne","segmentTwo","isGlobal","isCollection","i18n","meta","collectionConfig","length","collections","find","collection","slug","globalConfig","globals","global"],"mappings":"AAGA,SAASA,kBAAkB,QAAQ,wCAAuC;AAC1E,SAASC,uBAAuB,QAAQ,sBAAqB;AAC7D,SAASC,+BAA+B,QAAQ,8BAA6B;AAC7E,SAASC,yBAAyB,QAAQ,wBAAuB;AACjE,SAASC,wBAAwB,QAAQ,sBAAqB;AAC9D,SAASC,8BAA8B,QAAQ,6BAA4B;AAC3E,SAASC,oBAAoB,QAAQ,mBAAkB;AACvD,SAASC,qBAAqB,QAAQ,oBAAmB;AACzD,SAASC,oBAAoB,QAAQ,sBAAqB;AAC1D,SAASC,6BAA6B,QAAQ,4BAA2B;AACzE,SAASC,4BAA4B,QAAQ,2BAA0B;AACvE,SAASC,sBAAsB,QAAQ,qBAAoB;AAE3D,MAAMC,iBAAiB;IACrB,qBAAqBV;IACrBW,QAAQR;IACRS,OAAOP;IACPQ,QAAQL;IACR,qBAAqBA;IACrBM,cAAcN;AAChB;AAYA,OAAO,MAAMO,uBAAuB,OAAO,EAAEC,QAAQC,aAAa,EAAEC,MAAM,EAAQ;IAChF,MAAMF,SAAS,MAAMC;IAErB,MAAME,WAAWC,MAAMC,OAAO,CAACH,OAAOC,QAAQ,IAAID,OAAOC,QAAQ,GAAG,EAAE;IAEtE,MAAM,CAACG,YAAYC,WAAW,GAAGJ;IAEjC,MAAMK,WAAWF,eAAe;IAChC,MAAMG,eAAeH,eAAe;IAEpC,MAAMI,OAAO,MAAM5B,mBAAmB;QACpCkB;IACF;IAEA,IAAIW;IAEJ,6BAA6B;IAE7B,MAAMC,mBACJH,gBACAN,SAASU,MAAM,GAAG,KAClBb,QAAQc,aAAaC,KAAK,CAACC,aAAeA,WAAWC,IAAI,KAAKV;IAEhE,MAAMW,eACJV,YAAYL,SAASU,MAAM,GAAG,KAAKb,QAAQmB,SAASJ,KAAK,CAACK,SAAWA,OAAOH,IAAI,KAAKV;IAEvF,OAAQJ,SAASU,MAAM;QACrB,KAAK;YAAG;gBACNF,OAAO,MAAM1B,0BAA0B;oBAAEe;oBAAQU;gBAAK;gBACtD;YACF;QACA,KAAK;YAAG;gBACN,IAAIhB,cAAc,CAACY,WAAW,IAAIA,eAAe,WAAW;oBAC1D,yBAAyB;oBACzB,cAAc;oBACd,aAAa;oBACb,cAAc;oBACd,yBAAyB;oBACzB,oBAAoB;oBACpBK,OAAO,MAAMjB,cAAc,CAACY,WAAW,CAAC;wBAAEN;wBAAQU;oBAAK;oBACvD;gBACF,OAAO,IAAIJ,eAAe,WAAW;oBACnC,eAAe;oBACfK,OAAO,MAAM5B,wBAAwB;wBAAEiB;wBAAQU;oBAAK;oBACpD;gBACF;gBACA;YACF;QACA,KAAK;YAAG;gBACN,IAAIJ,eAAe,SAAS;oBAC1B,oBAAoB;oBACpBK,OAAO,MAAMpB,8BAA8B;wBAAES;wBAAQU;oBAAK;gBAC5D;gBACA,IAAID,cAAc;oBAChB,mCAAmC;oBACnCE,OAAO,MAAMvB,qBAAqB;wBAAEwB;wBAAkBZ;wBAAQU;oBAAK;gBACrE,OAAO,IAAIF,UAAU;oBACnB,2BAA2B;oBAC3BG,OAAO,MAAMzB,yBAAyB;wBACpCc;wBACAkB;wBACAR;wBACAR;oBACF;gBACF;gBACA;YACF;QACA;YAAS;gBACP,IAAIK,eAAe,UAAU;oBAC3B,qCAAqC;oBACrCI,OAAO,MAAMlB,uBAAuB;wBAAEO;wBAAQU;oBAAK;gBACrD,OAAO,IAAID,cAAc;oBACvB,eAAe;oBACf,uCAAuC;oBACvC,+CAA+C;oBAC/C,gDAAgD;oBAChD,yDAAyD;oBACzD,2CAA2C;oBAC3CE,OAAO,MAAMzB,yBAAyB;wBAAE0B;wBAAkBZ;wBAAQU;wBAAMR;oBAAO;gBACjF,OAAO,IAAIM,UAAU;oBACnB,eAAe;oBACf,oCAAoC;oBACpC,6CAA6C;oBAC7C,mCAAmC;oBACnC,+BAA+B;oBAC/BG,OAAO,MAAMzB,yBAAyB;wBACpCc;wBACAkB;wBACAR;wBACAR;oBACF;gBACF;gBACA;YACF;IACF;IAEA,IAAI,CAACS,MAAM;QACTA,OAAO,MAAMrB,qBAAqB;YAAEU;YAAQU;QAAK;IACnD;IAEA,OAAOC;AACT,EAAC"}