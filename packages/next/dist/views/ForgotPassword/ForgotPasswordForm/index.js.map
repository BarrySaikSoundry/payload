{"version":3,"sources":["../../../../src/views/ForgotPassword/ForgotPasswordForm/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FormProps } from '@payloadcms/ui'\nimport type { FormState, PayloadRequest } from 'payload'\n\nimport { EmailField, Form, FormSubmit, TextField, useConfig, useTranslation } from '@payloadcms/ui'\nimport { email, text } from 'payload/shared'\nimport React, { Fragment, useState } from 'react'\n\nexport const ForgotPasswordForm: React.FC = () => {\n  const config = useConfig()\n\n  const {\n    admin: { user: userSlug },\n    routes: { api },\n  } = config\n\n  const { t } = useTranslation()\n  const [hasSubmitted, setHasSubmitted] = useState(false)\n  const collectionConfig = config.collections?.find((collection) => collection?.slug === userSlug)\n  const loginWithUsername = collectionConfig?.auth?.loginWithUsername\n\n  const handleResponse: FormProps['handleResponse'] = (res, successToast, errorToast) => {\n    res\n      .json()\n      .then(() => {\n        setHasSubmitted(true)\n        successToast(t('general:submissionSuccessful'))\n      })\n      .catch(() => {\n        errorToast(\n          loginWithUsername\n            ? t('authentication:usernameNotValid')\n            : t('authentication:emailNotValid'),\n        )\n      })\n  }\n\n  const initialState: FormState = loginWithUsername\n    ? {\n        username: {\n          initialValue: '',\n          valid: true,\n          value: undefined,\n        },\n      }\n    : {\n        email: {\n          initialValue: '',\n          valid: true,\n          value: undefined,\n        },\n      }\n\n  if (hasSubmitted) {\n    return (\n      <Fragment>\n        <h1>{t('authentication:emailSent')}</h1>\n        <p>{t('authentication:checkYourEmailForPasswordReset')}</p>\n      </Fragment>\n    )\n  }\n\n  return (\n    <Form\n      action={`${api}/${userSlug}/forgot-password`}\n      handleResponse={handleResponse}\n      initialState={initialState}\n      method=\"POST\"\n    >\n      <h1>{t('authentication:forgotPassword')}</h1>\n      <p>\n        {loginWithUsername\n          ? t('authentication:forgotPasswordUsernameInstructions')\n          : t('authentication:forgotPasswordEmailInstructions')}\n      </p>\n\n      {loginWithUsername ? (\n        <TextField\n          label={t('authentication:username')}\n          name=\"username\"\n          required\n          validate={(value) =>\n            text(value, {\n              name: 'username',\n              type: 'text',\n              data: {},\n              preferences: { fields: {} },\n              req: {\n                payload: {\n                  config,\n                },\n                t,\n              } as PayloadRequest,\n              required: true,\n              siblingData: {},\n            })\n          }\n        />\n      ) : (\n        <EmailField\n          autoComplete=\"email\"\n          label={t('general:email')}\n          name=\"email\"\n          required\n          validate={(value) =>\n            email(value, {\n              name: 'email',\n              type: 'email',\n              data: {},\n              preferences: { fields: {} },\n              req: { t } as PayloadRequest,\n              required: true,\n              siblingData: {},\n            })\n          }\n        />\n      )}\n      <FormSubmit>{t('general:submit')}</FormSubmit>\n    </Form>\n  )\n}\n"],"names":["EmailField","Form","FormSubmit","TextField","useConfig","useTranslation","email","text","React","Fragment","useState","ForgotPasswordForm","config","admin","user","userSlug","routes","api","t","hasSubmitted","setHasSubmitted","collectionConfig","collections","find","collection","slug","loginWithUsername","auth","handleResponse","res","successToast","errorToast","json","then","catch","initialState","username","initialValue","valid","value","undefined","h1","p","action","method","label","name","required","validate","type","data","preferences","fields","req","payload","siblingData","autoComplete"],"mappings":"AAAA;;AAKA,SAASA,UAAU,EAAEC,IAAI,EAAEC,UAAU,EAAEC,SAAS,EAAEC,SAAS,EAAEC,cAAc,QAAQ,iBAAgB;AACnG,SAASC,KAAK,EAAEC,IAAI,QAAQ,iBAAgB;AAC5C,OAAOC,SAASC,QAAQ,EAAEC,QAAQ,QAAQ,QAAO;AAEjD,OAAO,MAAMC,qBAA+B;IAC1C,MAAMC,SAASR;IAEf,MAAM,EACJS,OAAO,EAAEC,MAAMC,QAAQ,EAAE,EACzBC,QAAQ,EAAEC,GAAG,EAAE,EAChB,GAAGL;IAEJ,MAAM,EAAEM,CAAC,EAAE,GAAGb;IACd,MAAM,CAACc,cAAcC,gBAAgB,GAAGV,SAAS;IACjD,MAAMW,mBAAmBT,OAAOU,WAAW,EAAEC,KAAK,CAACC,aAAeA,YAAYC,SAASV;IACvF,MAAMW,oBAAoBL,kBAAkBM,MAAMD;IAElD,MAAME,iBAA8C,CAACC,KAAKC,cAAcC;QACtEF,IACGG,IAAI,GACJC,IAAI,CAAC;YACJb,gBAAgB;YAChBU,aAAaZ,EAAE;QACjB,GACCgB,KAAK,CAAC;YACLH,WACEL,oBACIR,EAAE,qCACFA,EAAE;QAEV;IACJ;IAEA,MAAMiB,eAA0BT,oBAC5B;QACEU,UAAU;YACRC,cAAc;YACdC,OAAO;YACPC,OAAOC;QACT;IACF,IACA;QACElC,OAAO;YACL+B,cAAc;YACdC,OAAO;YACPC,OAAOC;QACT;IACF;IAEJ,IAAIrB,cAAc;QAChB,qBACE,MAACV;;8BACC,KAACgC;8BAAIvB,EAAE;;8BACP,KAACwB;8BAAGxB,EAAE;;;;IAGZ;IAEA,qBACE,MAACjB;QACC0C,QAAQ,CAAC,EAAE1B,IAAI,CAAC,EAAEF,SAAS,gBAAgB,CAAC;QAC5Ca,gBAAgBA;QAChBO,cAAcA;QACdS,QAAO;;0BAEP,KAACH;0BAAIvB,EAAE;;0BACP,KAACwB;0BACEhB,oBACGR,EAAE,uDACFA,EAAE;;YAGPQ,kCACC,KAACvB;gBACC0C,OAAO3B,EAAE;gBACT4B,MAAK;gBACLC,QAAQ;gBACRC,UAAU,CAACT,QACThC,KAAKgC,OAAO;wBACVO,MAAM;wBACNG,MAAM;wBACNC,MAAM,CAAC;wBACPC,aAAa;4BAAEC,QAAQ,CAAC;wBAAE;wBAC1BC,KAAK;4BACHC,SAAS;gCACP1C;4BACF;4BACAM;wBACF;wBACA6B,UAAU;wBACVQ,aAAa,CAAC;oBAChB;+BAIJ,KAACvD;gBACCwD,cAAa;gBACbX,OAAO3B,EAAE;gBACT4B,MAAK;gBACLC,QAAQ;gBACRC,UAAU,CAACT,QACTjC,MAAMiC,OAAO;wBACXO,MAAM;wBACNG,MAAM;wBACNC,MAAM,CAAC;wBACPC,aAAa;4BAAEC,QAAQ,CAAC;wBAAE;wBAC1BC,KAAK;4BAAEnC;wBAAE;wBACT6B,UAAU;wBACVQ,aAAa,CAAC;oBAChB;;0BAIN,KAACrD;0BAAYgB,EAAE;;;;AAGrB,EAAC"}