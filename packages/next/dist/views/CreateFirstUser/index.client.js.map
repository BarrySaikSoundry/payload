{"version":3,"sources":["../../../src/views/CreateFirstUser/index.client.tsx"],"sourcesContent":["'use client'\nimport type { FormState } from 'payload'\n\nimport {\n  ConfirmPasswordField,\n  EmailField,\n  Form,\n  type FormProps,\n  FormSubmit,\n  PasswordField,\n  RenderFields,\n  useComponentMap,\n  useConfig,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { getFormState } from '@payloadcms/ui/shared'\nimport React from 'react'\n\nexport const CreateFirstUserClient: React.FC<{\n  initialState: FormState\n  userSlug: string\n}> = ({ initialState, userSlug }) => {\n  const { getFieldMap } = useComponentMap()\n\n  const {\n    routes: { admin, api: apiRoute },\n    serverURL,\n  } = useConfig()\n\n  const { t } = useTranslation()\n\n  const fieldMap = getFieldMap({ collectionSlug: userSlug })\n\n  const onChange: FormProps['onChange'][0] = React.useCallback(\n    async ({ formState: prevFormState }) => {\n      return getFormState({\n        apiRoute,\n        body: {\n          collectionSlug: userSlug,\n          formState: prevFormState,\n          operation: 'create',\n          schemaPath: userSlug,\n        },\n        serverURL,\n      })\n    },\n    [apiRoute, userSlug, serverURL],\n  )\n\n  return (\n    <Form\n      action={`${serverURL}${apiRoute}/${userSlug}/first-register`}\n      initialState={initialState}\n      method=\"POST\"\n      onChange={[onChange]}\n      redirect={admin}\n      validationOperation=\"create\"\n    >\n      <EmailField autoComplete=\"email\" label={t('general:email')} name=\"email\" required />\n      <PasswordField\n        autoComplete=\"off\"\n        label={t('authentication:newPassword')}\n        name=\"password\"\n        required\n      />\n      <ConfirmPasswordField />\n      <RenderFields\n        fieldMap={fieldMap}\n        operation=\"create\"\n        path=\"\"\n        readOnly={false}\n        schemaPath={userSlug}\n      />\n      <FormSubmit>{t('general:create')}</FormSubmit>\n    </Form>\n  )\n}\n"],"names":["ConfirmPasswordField","EmailField","Form","FormSubmit","PasswordField","RenderFields","useComponentMap","useConfig","useTranslation","getFormState","React","CreateFirstUserClient","initialState","userSlug","getFieldMap","routes","admin","api","apiRoute","serverURL","t","fieldMap","collectionSlug","onChange","useCallback","formState","prevFormState","body","operation","schemaPath","action","method","redirect","validationOperation","autoComplete","label","name","required","path","readOnly"],"mappings":"AAAA;;AAGA,SACEA,oBAAoB,EACpBC,UAAU,EACVC,IAAI,EAEJC,UAAU,EACVC,aAAa,EACbC,YAAY,EACZC,eAAe,EACfC,SAAS,EACTC,cAAc,QACT,iBAAgB;AACvB,SAASC,YAAY,QAAQ,wBAAuB;AACpD,OAAOC,WAAW,QAAO;AAEzB,OAAO,MAAMC,wBAGR,CAAC,EAAEC,YAAY,EAAEC,QAAQ,EAAE;IAC9B,MAAM,EAAEC,WAAW,EAAE,GAAGR;IAExB,MAAM,EACJS,QAAQ,EAAEC,KAAK,EAAEC,KAAKC,QAAQ,EAAE,EAChCC,SAAS,EACV,GAAGZ;IAEJ,MAAM,EAAEa,CAAC,EAAE,GAAGZ;IAEd,MAAMa,WAAWP,YAAY;QAAEQ,gBAAgBT;IAAS;IAExD,MAAMU,WAAqCb,MAAMc,WAAW,CAC1D,OAAO,EAAEC,WAAWC,aAAa,EAAE;QACjC,OAAOjB,aAAa;YAClBS;YACAS,MAAM;gBACJL,gBAAgBT;gBAChBY,WAAWC;gBACXE,WAAW;gBACXC,YAAYhB;YACd;YACAM;QACF;IACF,GACA;QAACD;QAAUL;QAAUM;KAAU;IAGjC,qBACE,MAACjB;QACC4B,QAAQ,CAAC,EAAEX,UAAU,EAAED,SAAS,CAAC,EAAEL,SAAS,eAAe,CAAC;QAC5DD,cAAcA;QACdmB,QAAO;QACPR,UAAU;YAACA;SAAS;QACpBS,UAAUhB;QACViB,qBAAoB;;0BAEpB,KAAChC;gBAAWiC,cAAa;gBAAQC,OAAOf,EAAE;gBAAkBgB,MAAK;gBAAQC,QAAQ;;0BACjF,KAACjC;gBACC8B,cAAa;gBACbC,OAAOf,EAAE;gBACTgB,MAAK;gBACLC,QAAQ;;0BAEV,KAACrC;0BACD,KAACK;gBACCgB,UAAUA;gBACVO,WAAU;gBACVU,MAAK;gBACLC,UAAU;gBACVV,YAAYhB;;0BAEd,KAACV;0BAAYiB,EAAE;;;;AAGrB,EAAC"}