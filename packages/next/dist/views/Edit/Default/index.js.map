{"version":3,"sources":["../../../../src/views/Edit/Default/index.tsx"],"sourcesContent":["'use client'\n\nimport {\n  DocumentControls,\n  DocumentFields,\n  Form,\n  type FormProps,\n  OperationProvider,\n  Upload,\n  useAuth,\n  useComponentMap,\n  useConfig,\n  useDocumentEvents,\n  useDocumentInfo,\n  useEditDepth,\n  useFormQueryParams,\n} from '@payloadcms/ui'\nimport { getFormState } from '@payloadcms/ui/shared'\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport React, { Fragment, useCallback } from 'react'\n\nimport { LeaveWithoutSaving } from '../../../elements/LeaveWithoutSaving/index.js'\nimport { Auth } from './Auth/index.js'\nimport { SetDocumentStepNav } from './SetDocumentStepNav/index.js'\nimport { SetDocumentTitle } from './SetDocumentTitle/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-edit'\n\n// This component receives props only on _pages_\n// When rendered within a drawer, props are empty\n// This is solely to support custom edit views which get server-rendered\nexport const DefaultEditView: React.FC = () => {\n  const {\n    id,\n    AfterDocument,\n    AfterFields,\n    BeforeDocument,\n    BeforeFields,\n    action,\n    apiURL,\n    collectionSlug,\n    disableActions,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    getDocPreferences,\n    getVersions,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    initialData: data,\n    initialState,\n    isEditing,\n    isInitializing,\n    onSave: onSaveFromContext,\n  } = useDocumentInfo()\n\n  const { refreshCookieAsync, user } = useAuth()\n  const config = useConfig()\n  const router = useRouter()\n  const { dispatchFormQueryParams } = useFormQueryParams()\n  const { getComponentMap, getFieldMap } = useComponentMap()\n  const params = useSearchParams()\n  const depth = useEditDepth()\n  const { reportUpdate } = useDocumentEvents()\n\n  const {\n    admin: { user: userSlug },\n    collections,\n    globals,\n    routes: { admin: adminRoute, api: apiRoute },\n    serverURL,\n  } = config\n\n  const locale = params.get('locale')\n\n  const collectionConfig =\n    collectionSlug && collections.find((collection) => collection.slug === collectionSlug)\n\n  const globalConfig = globalSlug && globals.find((global) => global.slug === globalSlug)\n\n  const entitySlug = collectionConfig?.slug || globalConfig?.slug\n\n  const componentMap = getComponentMap({\n    collectionSlug: collectionConfig?.slug,\n    globalSlug: globalConfig?.slug,\n  })\n  const fieldMap = getFieldMap({\n    collectionSlug: collectionConfig?.slug,\n    globalSlug: globalConfig?.slug,\n  })\n\n  const operation = collectionSlug && !id ? 'create' : 'update'\n\n  const auth = collectionConfig ? collectionConfig.auth : undefined\n  const upload = collectionConfig ? collectionConfig.upload : undefined\n\n  const preventLeaveWithoutSaving =\n    (!(collectionConfig?.versions?.drafts && collectionConfig?.versions?.drafts?.autosave) ||\n      !(globalConfig?.versions?.drafts && globalConfig?.versions?.drafts?.autosave)) &&\n    !disableLeaveWithoutSaving\n\n  const classes = [baseClass, id && `${baseClass}--is-editing`].filter(Boolean).join(' ')\n\n  const onSave = useCallback(\n    (json) => {\n      reportUpdate({\n        id,\n        entitySlug,\n        updatedAt: json?.result?.updatedAt || new Date().toISOString(),\n      })\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      void getVersions()\n\n      if (typeof onSaveFromContext === 'function') {\n        void onSaveFromContext({\n          ...json,\n          operation: id ? 'update' : 'create',\n        })\n      }\n\n      if (!isEditing && depth < 2) {\n        // Redirect to the same locale if it's been set\n        const redirectRoute = `${adminRoute}/collections/${collectionSlug}/${json?.doc?.id}${locale ? `?locale=${locale}` : ''}`\n        router.push(redirectRoute)\n      } else {\n        dispatchFormQueryParams({\n          type: 'SET',\n          params: {\n            uploadEdits: null,\n          },\n        })\n      }\n    },\n    [\n      onSaveFromContext,\n      userSlug,\n      reportUpdate,\n      id,\n      entitySlug,\n      user,\n      depth,\n      collectionSlug,\n      getVersions,\n      isEditing,\n      refreshCookieAsync,\n      adminRoute,\n      locale,\n      router,\n      dispatchFormQueryParams,\n    ],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState }) => {\n      const docPreferences = await getDocPreferences()\n\n      return getFormState({\n        apiRoute,\n        body: {\n          id,\n          collectionSlug,\n          docPreferences,\n          formState: prevFormState,\n          globalSlug,\n          operation,\n          schemaPath: entitySlug,\n        },\n        serverURL,\n      })\n    },\n    [serverURL, apiRoute, id, operation, entitySlug, collectionSlug, globalSlug, getDocPreferences],\n  )\n\n  return (\n    <main className={classes}>\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disableValidationOnSubmit\n          disabled={isInitializing || !hasSavePermission}\n          initialState={!isInitializing && initialState}\n          isInitializing={isInitializing}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {BeforeDocument}\n          {preventLeaveWithoutSaving && <LeaveWithoutSaving />}\n          <SetDocumentStepNav\n            collectionSlug={collectionConfig?.slug}\n            globalSlug={globalConfig?.slug}\n            id={id}\n            pluralLabel={collectionConfig?.labels?.plural}\n            useAsTitle={collectionConfig?.admin?.useAsTitle}\n          />\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={depth <= 1 ? id?.toString() : undefined}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            data={data}\n            disableActions={disableActions}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            permissions={docPermissions}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n          />\n          <DocumentFields\n            AfterFields={AfterFields}\n            BeforeFields={\n              BeforeFields || (\n                <Fragment>\n                  {auth && (\n                    <Auth\n                      className={`${baseClass}__auth`}\n                      collectionSlug={collectionConfig.slug}\n                      disableLocalStrategy={collectionConfig.auth?.disableLocalStrategy}\n                      email={data?.email}\n                      loginWithUsername={auth?.loginWithUsername}\n                      operation={operation}\n                      readOnly={!hasSavePermission}\n                      requirePassword={!id}\n                      useAPIKey={auth.useAPIKey}\n                      verify={auth.verify}\n                    />\n                  )}\n                  {upload && (\n                    <React.Fragment>\n                      {componentMap.Upload !== undefined ? (\n                        componentMap.Upload\n                      ) : (\n                        <Upload\n                          collectionSlug={collectionConfig.slug}\n                          initialState={initialState}\n                          uploadConfig={upload}\n                        />\n                      )}\n                    </React.Fragment>\n                  )}\n                </Fragment>\n              )\n            }\n            docPermissions={docPermissions}\n            fieldMap={fieldMap}\n            readOnly={!hasSavePermission}\n            schemaPath={entitySlug}\n          />\n          {AfterDocument}\n        </Form>\n      </OperationProvider>\n    </main>\n  )\n}\n"],"names":["DocumentControls","DocumentFields","Form","OperationProvider","Upload","useAuth","useComponentMap","useConfig","useDocumentEvents","useDocumentInfo","useEditDepth","useFormQueryParams","getFormState","useRouter","useSearchParams","React","Fragment","useCallback","LeaveWithoutSaving","Auth","SetDocumentStepNav","SetDocumentTitle","baseClass","DefaultEditView","id","AfterDocument","AfterFields","BeforeDocument","BeforeFields","action","apiURL","collectionSlug","disableActions","disableLeaveWithoutSaving","docPermissions","getDocPreferences","getVersions","globalSlug","hasPublishPermission","hasSavePermission","initialData","data","initialState","isEditing","isInitializing","onSave","onSaveFromContext","refreshCookieAsync","user","config","router","dispatchFormQueryParams","getComponentMap","getFieldMap","params","depth","reportUpdate","admin","userSlug","collections","globals","routes","adminRoute","api","apiRoute","serverURL","locale","get","collectionConfig","find","collection","slug","globalConfig","global","entitySlug","componentMap","fieldMap","operation","auth","undefined","upload","preventLeaveWithoutSaving","versions","drafts","autosave","classes","filter","Boolean","join","json","updatedAt","result","Date","toISOString","redirectRoute","doc","push","type","uploadEdits","onChange","formState","prevFormState","docPreferences","body","schemaPath","main","className","disableValidationOnSubmit","disabled","method","onSuccess","pluralLabel","labels","plural","useAsTitle","fallback","toString","permissions","disableLocalStrategy","email","loginWithUsername","readOnly","requirePassword","useAPIKey","verify","uploadConfig"],"mappings":"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"}