{"version":3,"sources":["../../../src/views/Document/getViewsFromConfig.tsx"],"sourcesContent":["import type {\n  AdminViewComponent,\n  CollectionPermission,\n  EditViewComponent,\n  GlobalPermission,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n} from 'payload'\n\nimport { notFound } from 'next/navigation.js'\n\nimport { APIView as DefaultAPIView } from '../API/index.js'\nimport { EditView as DefaultEditView } from '../Edit/index.js'\nimport { LivePreviewView as DefaultLivePreviewView } from '../LivePreview/index.js'\nimport { UnauthorizedView } from '../Unauthorized/index.js'\nimport { VersionView as DefaultVersionView } from '../Version/index.js'\nimport { VersionsView as DefaultVersionsView } from '../Versions/index.js'\nimport { getCustomViewByKey } from './getCustomViewByKey.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\n\nexport const getViewsFromConfig = ({\n  collectionConfig,\n  config,\n  docPermissions,\n  globalConfig,\n  routeSegments,\n}: {\n  collectionConfig?: SanitizedCollectionConfig\n  config: SanitizedConfig\n\n  docPermissions: CollectionPermission | GlobalPermission\n  globalConfig?: SanitizedGlobalConfig\n  routeSegments: string[]\n}): {\n  CustomView: EditViewComponent\n  DefaultView: EditViewComponent\n  /**\n   * The error view to display if CustomView or DefaultView do not exist (could be either due to not found, or unauthorized). Can be null\n   */\n  ErrorView: AdminViewComponent\n} | null => {\n  // Conditionally import and lazy load the default view\n  let DefaultView: EditViewComponent = null\n  let CustomView: EditViewComponent = null\n  let ErrorView: AdminViewComponent = null\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  const views =\n    (collectionConfig && collectionConfig?.admin?.components?.views) ||\n    (globalConfig && globalConfig?.admin?.components?.views)\n\n  const livePreviewEnabled =\n    (collectionConfig && collectionConfig?.admin?.livePreview) ||\n    config?.admin?.livePreview?.collections?.includes(collectionConfig?.slug) ||\n    (globalConfig && globalConfig?.admin?.livePreview) ||\n    config?.admin?.livePreview?.globals?.includes(globalConfig?.slug)\n\n  if (collectionConfig) {\n    const editConfig = collectionConfig?.admin?.components?.views?.Edit\n    const EditOverride = typeof editConfig === 'function' ? editConfig : null\n\n    if (EditOverride) {\n      CustomView = EditOverride\n    }\n\n    if (!EditOverride) {\n      const [collectionEntity, collectionSlug, segment3, segment4, segment5, ...remainingSegments] =\n        routeSegments\n\n      if (!docPermissions?.read?.permission) {\n        notFound()\n      } else {\n        // `../:id`, or `../create`\n        switch (routeSegments.length) {\n          case 3: {\n            switch (segment3) {\n              case 'create': {\n                if ('create' in docPermissions && docPermissions?.create?.permission) {\n                  CustomView = getCustomViewByKey(views, 'Default')\n                  DefaultView = DefaultEditView\n                } else {\n                  ErrorView = UnauthorizedView\n                }\n                break\n              }\n\n              default: {\n                CustomView = getCustomViewByKey(views, 'Default')\n                DefaultView = DefaultEditView\n                break\n              }\n            }\n            break\n          }\n\n          // `../:id/api`, `../:id/preview`, `../:id/versions`, etc\n          case 4: {\n            switch (segment4) {\n              case 'api': {\n                if (collectionConfig?.admin?.hideAPIURL !== true) {\n                  CustomView = getCustomViewByKey(views, 'API')\n                  DefaultView = DefaultAPIView\n                }\n                break\n              }\n\n              case 'preview': {\n                if (livePreviewEnabled) {\n                  DefaultView = DefaultLivePreviewView\n                }\n                break\n              }\n\n              case 'versions': {\n                if (docPermissions?.readVersions?.permission) {\n                  CustomView = getCustomViewByKey(views, 'Versions')\n                  DefaultView = DefaultVersionsView\n                } else {\n                  ErrorView = UnauthorizedView\n                }\n                break\n              }\n\n              default: {\n                const baseRoute = [adminRoute, 'collections', collectionSlug, segment3]\n                  .filter(Boolean)\n                  .join('/')\n\n                const currentRoute = [baseRoute, segment4, segment5, ...remainingSegments]\n                  .filter(Boolean)\n                  .join('/')\n\n                CustomView = getCustomViewByRoute({\n                  baseRoute,\n                  currentRoute,\n                  views,\n                })\n                break\n              }\n            }\n            break\n          }\n\n          // `../:id/versions/:version`, etc\n          default: {\n            if (segment4 === 'versions') {\n              if (docPermissions?.readVersions?.permission) {\n                CustomView = getCustomViewByKey(views, 'Version')\n                DefaultView = DefaultVersionView\n              } else {\n                ErrorView = UnauthorizedView\n              }\n            } else {\n              const baseRoute = [adminRoute, collectionEntity, collectionSlug, segment3]\n                .filter(Boolean)\n                .join('/')\n\n              const currentRoute = [baseRoute, segment4, segment5, ...remainingSegments]\n                .filter(Boolean)\n                .join('/')\n\n              CustomView = getCustomViewByRoute({\n                baseRoute,\n                currentRoute,\n                views,\n              })\n            }\n            break\n          }\n        }\n      }\n    }\n  }\n\n  if (globalConfig) {\n    const editConfig = globalConfig?.admin?.components?.views?.Edit\n    const EditOverride = typeof editConfig === 'function' ? editConfig : null\n\n    if (EditOverride) {\n      CustomView = EditOverride\n    }\n\n    if (!EditOverride) {\n      const [globalEntity, globalSlug, segment3, ...remainingSegments] = routeSegments\n\n      if (!docPermissions?.read?.permission) {\n        notFound()\n      } else {\n        switch (routeSegments.length) {\n          case 2: {\n            CustomView = getCustomViewByKey(views, 'Default')\n            DefaultView = DefaultEditView\n            break\n          }\n\n          case 3: {\n            // `../:slug/api`, `../:slug/preview`, `../:slug/versions`, etc\n            switch (segment3) {\n              case 'api': {\n                if (globalConfig?.admin?.hideAPIURL !== true) {\n                  CustomView = getCustomViewByKey(views, 'API')\n                  DefaultView = DefaultAPIView\n                }\n                break\n              }\n\n              case 'preview': {\n                if (livePreviewEnabled) {\n                  DefaultView = DefaultLivePreviewView\n                }\n                break\n              }\n\n              case 'versions': {\n                if (docPermissions?.readVersions?.permission) {\n                  CustomView = getCustomViewByKey(views, 'Versions')\n                  DefaultView = DefaultVersionsView\n                } else {\n                  ErrorView = UnauthorizedView\n                }\n                break\n              }\n\n              default: {\n                if (docPermissions?.read?.permission) {\n                  const baseRoute = [adminRoute, globalEntity, globalSlug, segment3]\n                    .filter(Boolean)\n                    .join('/')\n\n                  const currentRoute = [baseRoute, segment3, ...remainingSegments]\n                    .filter(Boolean)\n                    .join('/')\n\n                  CustomView = getCustomViewByRoute({\n                    baseRoute,\n                    currentRoute,\n                    views,\n                  })\n                  DefaultView = DefaultEditView\n                } else {\n                  ErrorView = UnauthorizedView\n                }\n                break\n              }\n            }\n            break\n          }\n\n          default: {\n            // `../:slug/versions/:version`, etc\n            if (segment3 === 'versions') {\n              if (docPermissions?.readVersions?.permission) {\n                CustomView = getCustomViewByKey(views, 'Version')\n                DefaultView = DefaultVersionView\n              } else {\n                ErrorView = UnauthorizedView\n              }\n            } else {\n              const baseRoute = [adminRoute, 'globals', globalSlug].filter(Boolean).join('/')\n\n              const currentRoute = [baseRoute, segment3, ...remainingSegments]\n                .filter(Boolean)\n                .join('/')\n\n              CustomView = getCustomViewByRoute({\n                baseRoute,\n                currentRoute,\n                views,\n              })\n            }\n            break\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    CustomView,\n    DefaultView,\n    ErrorView,\n  }\n}\n"],"names":["notFound","APIView","DefaultAPIView","EditView","DefaultEditView","LivePreviewView","DefaultLivePreviewView","UnauthorizedView","VersionView","DefaultVersionView","VersionsView","DefaultVersionsView","getCustomViewByKey","getCustomViewByRoute","getViewsFromConfig","collectionConfig","config","docPermissions","globalConfig","routeSegments","DefaultView","CustomView","ErrorView","routes","admin","adminRoute","views","components","livePreviewEnabled","livePreview","collections","includes","slug","globals","editConfig","Edit","EditOverride","collectionEntity","collectionSlug","segment3","segment4","segment5","remainingSegments","read","permission","length","create","hideAPIURL","readVersions","baseRoute","filter","Boolean","join","currentRoute","globalEntity","globalSlug"],"mappings":"AAUA,SAASA,QAAQ,QAAQ,qBAAoB;AAE7C,SAASC,WAAWC,cAAc,QAAQ,kBAAiB;AAC3D,SAASC,YAAYC,eAAe,QAAQ,mBAAkB;AAC9D,SAASC,mBAAmBC,sBAAsB,QAAQ,0BAAyB;AACnF,SAASC,gBAAgB,QAAQ,2BAA0B;AAC3D,SAASC,eAAeC,kBAAkB,QAAQ,sBAAqB;AACvE,SAASC,gBAAgBC,mBAAmB,QAAQ,uBAAsB;AAC1E,SAASC,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,oBAAoB,QAAQ,4BAA2B;AAEhE,OAAO,MAAMC,qBAAqB,CAAC,EACjCC,gBAAgB,EAChBC,MAAM,EACNC,cAAc,EACdC,YAAY,EACZC,aAAa,EAQd;IAQC,sDAAsD;IACtD,IAAIC,cAAiC;IACrC,IAAIC,aAAgC;IACpC,IAAIC,YAAgC;IAEpC,MAAM,EACJC,QAAQ,EAAEC,OAAOC,UAAU,EAAE,EAC9B,GAAGT;IAEJ,MAAMU,QACJ,AAACX,oBAAoBA,kBAAkBS,OAAOG,YAAYD,SACzDR,gBAAgBA,cAAcM,OAAOG,YAAYD;IAEpD,MAAME,qBACJ,AAACb,oBAAoBA,kBAAkBS,OAAOK,eAC9Cb,QAAQQ,OAAOK,aAAaC,aAAaC,SAAShB,kBAAkBiB,SACnEd,gBAAgBA,cAAcM,OAAOK,eACtCb,QAAQQ,OAAOK,aAAaI,SAASF,SAASb,cAAcc;IAE9D,IAAIjB,kBAAkB;QACpB,MAAMmB,aAAanB,kBAAkBS,OAAOG,YAAYD,OAAOS;QAC/D,MAAMC,eAAe,OAAOF,eAAe,aAAaA,aAAa;QAErE,IAAIE,cAAc;YAChBf,aAAae;QACf;QAEA,IAAI,CAACA,cAAc;YACjB,MAAM,CAACC,kBAAkBC,gBAAgBC,UAAUC,UAAUC,UAAU,GAAGC,kBAAkB,GAC1FvB;YAEF,IAAI,CAACF,gBAAgB0B,MAAMC,YAAY;gBACrC5C;YACF,OAAO;gBACL,2BAA2B;gBAC3B,OAAQmB,cAAc0B,MAAM;oBAC1B,KAAK;wBAAG;4BACN,OAAQN;gCACN,KAAK;oCAAU;wCACb,IAAI,YAAYtB,kBAAkBA,gBAAgB6B,QAAQF,YAAY;4CACpEvB,aAAaT,mBAAmBc,OAAO;4CACvCN,cAAchB;wCAChB,OAAO;4CACLkB,YAAYf;wCACd;wCACA;oCACF;gCAEA;oCAAS;wCACPc,aAAaT,mBAAmBc,OAAO;wCACvCN,cAAchB;wCACd;oCACF;4BACF;4BACA;wBACF;oBAEA,yDAAyD;oBACzD,KAAK;wBAAG;4BACN,OAAQoC;gCACN,KAAK;oCAAO;wCACV,IAAIzB,kBAAkBS,OAAOuB,eAAe,MAAM;4CAChD1B,aAAaT,mBAAmBc,OAAO;4CACvCN,cAAclB;wCAChB;wCACA;oCACF;gCAEA,KAAK;oCAAW;wCACd,IAAI0B,oBAAoB;4CACtBR,cAAcd;wCAChB;wCACA;oCACF;gCAEA,KAAK;oCAAY;wCACf,IAAIW,gBAAgB+B,cAAcJ,YAAY;4CAC5CvB,aAAaT,mBAAmBc,OAAO;4CACvCN,cAAcT;wCAChB,OAAO;4CACLW,YAAYf;wCACd;wCACA;oCACF;gCAEA;oCAAS;wCACP,MAAM0C,YAAY;4CAACxB;4CAAY;4CAAea;4CAAgBC;yCAAS,CACpEW,MAAM,CAACC,SACPC,IAAI,CAAC;wCAER,MAAMC,eAAe;4CAACJ;4CAAWT;4CAAUC;+CAAaC;yCAAkB,CACvEQ,MAAM,CAACC,SACPC,IAAI,CAAC;wCAER/B,aAAaR,qBAAqB;4CAChCoC;4CACAI;4CACA3B;wCACF;wCACA;oCACF;4BACF;4BACA;wBACF;oBAEA,kCAAkC;oBAClC;wBAAS;4BACP,IAAIc,aAAa,YAAY;gCAC3B,IAAIvB,gBAAgB+B,cAAcJ,YAAY;oCAC5CvB,aAAaT,mBAAmBc,OAAO;oCACvCN,cAAcX;gCAChB,OAAO;oCACLa,YAAYf;gCACd;4BACF,OAAO;gCACL,MAAM0C,YAAY;oCAACxB;oCAAYY;oCAAkBC;oCAAgBC;iCAAS,CACvEW,MAAM,CAACC,SACPC,IAAI,CAAC;gCAER,MAAMC,eAAe;oCAACJ;oCAAWT;oCAAUC;uCAAaC;iCAAkB,CACvEQ,MAAM,CAACC,SACPC,IAAI,CAAC;gCAER/B,aAAaR,qBAAqB;oCAChCoC;oCACAI;oCACA3B;gCACF;4BACF;4BACA;wBACF;gBACF;YACF;QACF;IACF;IAEA,IAAIR,cAAc;QAChB,MAAMgB,aAAahB,cAAcM,OAAOG,YAAYD,OAAOS;QAC3D,MAAMC,eAAe,OAAOF,eAAe,aAAaA,aAAa;QAErE,IAAIE,cAAc;YAChBf,aAAae;QACf;QAEA,IAAI,CAACA,cAAc;YACjB,MAAM,CAACkB,cAAcC,YAAYhB,UAAU,GAAGG,kBAAkB,GAAGvB;YAEnE,IAAI,CAACF,gBAAgB0B,MAAMC,YAAY;gBACrC5C;YACF,OAAO;gBACL,OAAQmB,cAAc0B,MAAM;oBAC1B,KAAK;wBAAG;4BACNxB,aAAaT,mBAAmBc,OAAO;4BACvCN,cAAchB;4BACd;wBACF;oBAEA,KAAK;wBAAG;4BACN,+DAA+D;4BAC/D,OAAQmC;gCACN,KAAK;oCAAO;wCACV,IAAIrB,cAAcM,OAAOuB,eAAe,MAAM;4CAC5C1B,aAAaT,mBAAmBc,OAAO;4CACvCN,cAAclB;wCAChB;wCACA;oCACF;gCAEA,KAAK;oCAAW;wCACd,IAAI0B,oBAAoB;4CACtBR,cAAcd;wCAChB;wCACA;oCACF;gCAEA,KAAK;oCAAY;wCACf,IAAIW,gBAAgB+B,cAAcJ,YAAY;4CAC5CvB,aAAaT,mBAAmBc,OAAO;4CACvCN,cAAcT;wCAChB,OAAO;4CACLW,YAAYf;wCACd;wCACA;oCACF;gCAEA;oCAAS;wCACP,IAAIU,gBAAgB0B,MAAMC,YAAY;4CACpC,MAAMK,YAAY;gDAACxB;gDAAY6B;gDAAcC;gDAAYhB;6CAAS,CAC/DW,MAAM,CAACC,SACPC,IAAI,CAAC;4CAER,MAAMC,eAAe;gDAACJ;gDAAWV;mDAAaG;6CAAkB,CAC7DQ,MAAM,CAACC,SACPC,IAAI,CAAC;4CAER/B,aAAaR,qBAAqB;gDAChCoC;gDACAI;gDACA3B;4CACF;4CACAN,cAAchB;wCAChB,OAAO;4CACLkB,YAAYf;wCACd;wCACA;oCACF;4BACF;4BACA;wBACF;oBAEA;wBAAS;4BACP,oCAAoC;4BACpC,IAAIgC,aAAa,YAAY;gCAC3B,IAAItB,gBAAgB+B,cAAcJ,YAAY;oCAC5CvB,aAAaT,mBAAmBc,OAAO;oCACvCN,cAAcX;gCAChB,OAAO;oCACLa,YAAYf;gCACd;4BACF,OAAO;gCACL,MAAM0C,YAAY;oCAACxB;oCAAY;oCAAW8B;iCAAW,CAACL,MAAM,CAACC,SAASC,IAAI,CAAC;gCAE3E,MAAMC,eAAe;oCAACJ;oCAAWV;uCAAaG;iCAAkB,CAC7DQ,MAAM,CAACC,SACPC,IAAI,CAAC;gCAER/B,aAAaR,qBAAqB;oCAChCoC;oCACAI;oCACA3B;gCACF;4BACF;4BACA;wBACF;gBACF;YACF;QACF;IACF;IAEA,OAAO;QACLL;QACAD;QACAE;IACF;AACF,EAAC"}