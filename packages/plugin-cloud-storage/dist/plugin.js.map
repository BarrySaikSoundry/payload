{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config } from 'payload'\n\nimport type { PluginOptions } from './types.js'\n\nimport { getFields } from './fields/getFields.js'\nimport { getAfterDeleteHook } from './hooks/afterDelete.js'\nimport { getBeforeChangeHook } from './hooks/beforeChange.js'\n\n// This plugin extends all targeted collections by offloading uploaded files\n// to cloud storage instead of solely storing files locally.\n\n// It is based on an adapter approach, where adapters can be written for any cloud provider.\n// Adapters are responsible for providing four actions that this plugin will use:\n// 1. handleUpload, 2. handleDelete, 3. generateURL, 4. staticHandler\n\n// Optionally, the adapter can specify any Webpack config overrides if they are necessary.\n\nexport const cloudStoragePlugin =\n  (pluginOptions: PluginOptions) =>\n  (incomingConfig: Config): Config => {\n    const { collections: allCollectionOptions, enabled } = pluginOptions\n    const config = { ...incomingConfig }\n\n    // Return early if disabled. Only webpack config mods are applied.\n    if (enabled === false) {\n      return config\n    }\n\n    const initFunctions: Array<() => void> = []\n\n    return {\n      ...config,\n      collections: (config.collections || []).map((existingCollection) => {\n        const options = allCollectionOptions[existingCollection.slug]\n\n        if (options?.adapter) {\n          const adapter = options.adapter({\n            collection: existingCollection,\n            prefix: options.prefix,\n          })\n\n          if (adapter.onInit) initFunctions.push(adapter.onInit)\n\n          const fields = getFields({\n            adapter,\n            collection: existingCollection,\n            disablePayloadAccessControl: options.disablePayloadAccessControl,\n            generateFileURL: options.generateFileURL,\n            prefix: options.prefix,\n          })\n\n          const handlers = [\n            ...(typeof existingCollection.upload === 'object' &&\n            Array.isArray(existingCollection.upload.handlers)\n              ? existingCollection.upload.handlers\n              : []),\n          ]\n\n          if (!options.disablePayloadAccessControl) {\n            handlers.push(adapter.staticHandler)\n          }\n\n          return {\n            ...existingCollection,\n            fields,\n            hooks: {\n              ...(existingCollection.hooks || {}),\n              afterDelete: [\n                ...(existingCollection.hooks?.afterDelete || []),\n                getAfterDeleteHook({ adapter, collection: existingCollection }),\n              ],\n              beforeChange: [\n                ...(existingCollection.hooks?.beforeChange || []),\n                getBeforeChangeHook({ adapter, collection: existingCollection }),\n              ],\n            },\n            upload: {\n              ...(typeof existingCollection.upload === 'object' ? existingCollection.upload : {}),\n              adapter: adapter.name,\n              disableLocalStorage:\n                typeof options.disableLocalStorage === 'boolean'\n                  ? options.disableLocalStorage\n                  : true,\n              handlers,\n            },\n          }\n        }\n\n        return existingCollection\n      }),\n      onInit: async (payload) => {\n        initFunctions.forEach((fn) => fn())\n        if (config.onInit) await config.onInit(payload)\n      },\n    }\n  }\n"],"names":["getFields","getAfterDeleteHook","getBeforeChangeHook","cloudStoragePlugin","pluginOptions","incomingConfig","collections","allCollectionOptions","enabled","config","initFunctions","map","existingCollection","options","slug","adapter","collection","prefix","onInit","push","fields","disablePayloadAccessControl","generateFileURL","handlers","upload","Array","isArray","staticHandler","hooks","afterDelete","beforeChange","name","disableLocalStorage","payload","forEach","fn"],"mappings":"AAIA,SAASA,SAAS,QAAQ,wBAAuB;AACjD,SAASC,kBAAkB,QAAQ,yBAAwB;AAC3D,SAASC,mBAAmB,QAAQ,0BAAyB;AAE7D,4EAA4E;AAC5E,4DAA4D;AAE5D,4FAA4F;AAC5F,iFAAiF;AACjF,qEAAqE;AAErE,0FAA0F;AAE1F,OAAO,MAAMC,qBACX,CAACC,gBACD,CAACC;QACC,MAAM,EAAEC,aAAaC,oBAAoB,EAAEC,OAAO,EAAE,GAAGJ;QACvD,MAAMK,SAAS;YAAE,GAAGJ,cAAc;QAAC;QAEnC,kEAAkE;QAClE,IAAIG,YAAY,OAAO;YACrB,OAAOC;QACT;QAEA,MAAMC,gBAAmC,EAAE;QAE3C,OAAO;YACL,GAAGD,MAAM;YACTH,aAAa,AAACG,CAAAA,OAAOH,WAAW,IAAI,EAAE,AAAD,EAAGK,GAAG,CAAC,CAACC;gBAC3C,MAAMC,UAAUN,oBAAoB,CAACK,mBAAmBE,IAAI,CAAC;gBAE7D,IAAID,SAASE,SAAS;oBACpB,MAAMA,UAAUF,QAAQE,OAAO,CAAC;wBAC9BC,YAAYJ;wBACZK,QAAQJ,QAAQI,MAAM;oBACxB;oBAEA,IAAIF,QAAQG,MAAM,EAAER,cAAcS,IAAI,CAACJ,QAAQG,MAAM;oBAErD,MAAME,SAASpB,UAAU;wBACvBe;wBACAC,YAAYJ;wBACZS,6BAA6BR,QAAQQ,2BAA2B;wBAChEC,iBAAiBT,QAAQS,eAAe;wBACxCL,QAAQJ,QAAQI,MAAM;oBACxB;oBAEA,MAAMM,WAAW;2BACX,OAAOX,mBAAmBY,MAAM,KAAK,YACzCC,MAAMC,OAAO,CAACd,mBAAmBY,MAAM,CAACD,QAAQ,IAC5CX,mBAAmBY,MAAM,CAACD,QAAQ,GAClC,EAAE;qBACP;oBAED,IAAI,CAACV,QAAQQ,2BAA2B,EAAE;wBACxCE,SAASJ,IAAI,CAACJ,QAAQY,aAAa;oBACrC;oBAEA,OAAO;wBACL,GAAGf,kBAAkB;wBACrBQ;wBACAQ,OAAO;4BACL,GAAIhB,mBAAmBgB,KAAK,IAAI,CAAC,CAAC;4BAClCC,aAAa;mCACPjB,mBAAmBgB,KAAK,EAAEC,eAAe,EAAE;gCAC/C5B,mBAAmB;oCAAEc;oCAASC,YAAYJ;gCAAmB;6BAC9D;4BACDkB,cAAc;mCACRlB,mBAAmBgB,KAAK,EAAEE,gBAAgB,EAAE;gCAChD5B,oBAAoB;oCAAEa;oCAASC,YAAYJ;gCAAmB;6BAC/D;wBACH;wBACAY,QAAQ;4BACN,GAAI,OAAOZ,mBAAmBY,MAAM,KAAK,WAAWZ,mBAAmBY,MAAM,GAAG,CAAC,CAAC;4BAClFT,SAASA,QAAQgB,IAAI;4BACrBC,qBACE,OAAOnB,QAAQmB,mBAAmB,KAAK,YACnCnB,QAAQmB,mBAAmB,GAC3B;4BACNT;wBACF;oBACF;gBACF;gBAEA,OAAOX;YACT;YACAM,QAAQ,OAAOe;gBACbvB,cAAcwB,OAAO,CAAC,CAACC,KAAOA;gBAC9B,IAAI1B,OAAOS,MAAM,EAAE,MAAMT,OAAOS,MAAM,CAACe;YACzC;QACF;IACF,EAAC"}