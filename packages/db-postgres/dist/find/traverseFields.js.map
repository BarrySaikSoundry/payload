{"version":3,"sources":["../../src/find/traverseFields.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Field } from 'payload'\n\nimport { fieldAffectsData, tabHasName } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { PostgresAdapter } from '../types.js'\nimport type { Result } from './buildFindManyArgs.js'\n\ntype TraverseFieldArgs = {\n  _locales: Result\n  adapter: PostgresAdapter\n  currentArgs: Result\n  currentTableName: string\n  depth?: number\n  fields: Field[]\n  path: string\n  topLevelArgs: Record<string, unknown>\n  topLevelTableName: string\n}\n\nexport const traverseFields = ({\n  _locales,\n  adapter,\n  currentArgs,\n  currentTableName,\n  depth,\n  fields,\n  path,\n  topLevelArgs,\n  topLevelTableName,\n}: TraverseFieldArgs) => {\n  fields.forEach((field) => {\n    // handle simple relationship\n    if (\n      depth > 0 &&\n      (field.type === 'upload' ||\n        (field.type === 'relationship' && !field.hasMany && typeof field.relationTo === 'string'))\n    ) {\n      if (field.localized) {\n        _locales.with[`${path}${field.name}`] = true\n      } else {\n        currentArgs.with[`${path}${field.name}`] = true\n      }\n    }\n\n    if (field.type === 'collapsible' || field.type === 'row') {\n      traverseFields({\n        _locales,\n        adapter,\n        currentArgs,\n        currentTableName,\n        depth,\n        fields: field.fields,\n        path,\n        topLevelArgs,\n        topLevelTableName,\n      })\n\n      return\n    }\n\n    if (field.type === 'tabs') {\n      field.tabs.forEach((tab) => {\n        const tabPath = tabHasName(tab) ? `${path}${tab.name}_` : path\n\n        traverseFields({\n          _locales,\n          adapter,\n          currentArgs,\n          currentTableName,\n          depth,\n          fields: tab.fields,\n          path: tabPath,\n          topLevelArgs,\n          topLevelTableName,\n        })\n      })\n\n      return\n    }\n\n    if (fieldAffectsData(field)) {\n      switch (field.type) {\n        case 'array': {\n          const withArray: Result = {\n            columns: {\n              _parentID: false,\n            },\n            orderBy: ({ _order }, { asc }) => [asc(_order)],\n            with: {},\n          }\n\n          const arrayTableName = adapter.tableNameMap.get(\n            `${currentTableName}_${path}${toSnakeCase(field.name)}`,\n          )\n\n          const arrayTableNameWithLocales = `${arrayTableName}${adapter.localesSuffix}`\n\n          if (adapter.tables[arrayTableNameWithLocales]) {\n            withArray.with._locales = {\n              columns: {\n                id: false,\n                _parentID: false,\n              },\n              with: {},\n            }\n          }\n          currentArgs.with[`${path}${field.name}`] = withArray\n\n          traverseFields({\n            _locales: withArray.with._locales,\n            adapter,\n            currentArgs: withArray,\n            currentTableName: arrayTableName,\n            depth,\n            fields: field.fields,\n            path: '',\n            topLevelArgs,\n            topLevelTableName,\n          })\n\n          break\n        }\n\n        case 'select': {\n          if (field.hasMany) {\n            const withSelect: Result = {\n              columns: {\n                id: false,\n                order: false,\n                parent: false,\n              },\n              orderBy: ({ order }, { asc }) => [asc(order)],\n            }\n\n            currentArgs.with[`${path}${field.name}`] = withSelect\n          }\n\n          break\n        }\n\n        case 'blocks':\n          field.blocks.forEach((block) => {\n            const blockKey = `_blocks_${block.slug}`\n\n            if (!topLevelArgs[blockKey]) {\n              const withBlock: Result = {\n                columns: {\n                  _parentID: false,\n                },\n                orderBy: ({ _order }, { asc }) => [asc(_order)],\n                with: {},\n              }\n\n              const tableName = adapter.tableNameMap.get(\n                `${topLevelTableName}_blocks_${toSnakeCase(block.slug)}`,\n              )\n\n              if (adapter.tables[`${tableName}${adapter.localesSuffix}`]) {\n                withBlock.with._locales = {\n                  with: {},\n                }\n              }\n              topLevelArgs.with[blockKey] = withBlock\n\n              traverseFields({\n                _locales: withBlock.with._locales,\n                adapter,\n                currentArgs: withBlock,\n                currentTableName: tableName,\n                depth,\n                fields: block.fields,\n                path: '',\n                topLevelArgs,\n                topLevelTableName,\n              })\n            }\n          })\n\n          break\n\n        case 'group':\n          traverseFields({\n            _locales,\n            adapter,\n            currentArgs,\n            currentTableName,\n            depth,\n            fields: field.fields,\n            path: `${path}${field.name}_`,\n            topLevelArgs,\n            topLevelTableName,\n          })\n\n          break\n\n        default: {\n          break\n        }\n      }\n    }\n  })\n\n  return topLevelArgs\n}\n"],"names":["fieldAffectsData","tabHasName","toSnakeCase","traverseFields","_locales","adapter","currentArgs","currentTableName","depth","fields","path","topLevelArgs","topLevelTableName","forEach","field","type","hasMany","relationTo","localized","with","name","tabs","tab","tabPath","withArray","columns","_parentID","orderBy","_order","asc","arrayTableName","tableNameMap","get","arrayTableNameWithLocales","localesSuffix","tables","id","withSelect","order","parent","blocks","block","blockKey","slug","withBlock","tableName"],"mappings":"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"}