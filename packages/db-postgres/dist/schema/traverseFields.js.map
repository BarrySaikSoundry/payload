{"version":3,"sources":["../../src/schema/traverseFields.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Relation } from 'drizzle-orm'\nimport type { IndexBuilder, PgColumnBuilder } from 'drizzle-orm/pg-core'\nimport type { Field, TabAsField } from 'payload'\n\nimport { relations } from 'drizzle-orm'\nimport {\n  PgNumericBuilder,\n  PgUUIDBuilder,\n  PgVarcharBuilder,\n  boolean,\n  foreignKey,\n  index,\n  integer,\n  jsonb,\n  numeric,\n  pgEnum,\n  text,\n  timestamp,\n  varchar,\n} from 'drizzle-orm/pg-core'\nimport { InvalidConfiguration } from 'payload'\nimport { fieldAffectsData, optionIsObject } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { GenericColumns, IDType, PostgresAdapter } from '../types.js'\nimport type { BaseExtraConfig, RelationMap } from './build.js'\n\nimport { hasLocalesTable } from '../utilities/hasLocalesTable.js'\nimport { buildTable } from './build.js'\nimport { createIndex } from './createIndex.js'\nimport { createTableName } from './createTableName.js'\nimport { idToUUID } from './idToUUID.js'\nimport { parentIDColumnMap } from './parentIDColumnMap.js'\nimport { validateExistingBlockIsIdentical } from './validateExistingBlockIsIdentical.js'\n\ntype Args = {\n  adapter: PostgresAdapter\n  columnPrefix?: string\n  columns: Record<string, PgColumnBuilder>\n  disableNotNull: boolean\n  disableUnique?: boolean\n  fieldPrefix?: string\n  fields: (Field | TabAsField)[]\n  forceLocalized?: boolean\n  indexes: Record<string, (cols: GenericColumns) => IndexBuilder>\n  localesColumns: Record<string, PgColumnBuilder>\n  localesIndexes: Record<string, (cols: GenericColumns) => IndexBuilder>\n  newTableName: string\n  parentTableName: string\n  relationsToBuild: RelationMap\n  relationships: Set<string>\n  rootRelationsToBuild?: RelationMap\n  rootTableIDColType: string\n  rootTableName: string\n  versions: boolean\n}\n\ntype Result = {\n  hasLocalizedField: boolean\n  hasLocalizedManyNumberField: boolean\n  hasLocalizedManyTextField: boolean\n  hasLocalizedRelationshipField: boolean\n  hasManyNumberField: 'index' | boolean\n  hasManyTextField: 'index' | boolean\n}\n\nexport const traverseFields = ({\n  adapter,\n  columnPrefix,\n  columns,\n  disableNotNull,\n  disableUnique = false,\n  fieldPrefix,\n  fields,\n  forceLocalized,\n  indexes,\n  localesColumns,\n  localesIndexes,\n  newTableName,\n  parentTableName,\n  relationsToBuild,\n  relationships,\n  rootRelationsToBuild,\n  rootTableIDColType,\n  rootTableName,\n  versions,\n}: Args): Result => {\n  const throwValidationError = true\n  let hasLocalizedField = false\n  let hasLocalizedRelationshipField = false\n  let hasManyTextField: 'index' | boolean = false\n  let hasLocalizedManyTextField = false\n  let hasManyNumberField: 'index' | boolean = false\n  let hasLocalizedManyNumberField = false\n\n  let parentIDColType: IDType = 'integer'\n  if (columns.id instanceof PgUUIDBuilder) parentIDColType = 'uuid'\n  if (columns.id instanceof PgNumericBuilder) parentIDColType = 'numeric'\n  if (columns.id instanceof PgVarcharBuilder) parentIDColType = 'varchar'\n\n  fields.forEach((field) => {\n    if ('name' in field && field.name === 'id') return\n    let columnName: string\n    let fieldName: string\n\n    let targetTable = columns\n    let targetIndexes = indexes\n\n    if (fieldAffectsData(field)) {\n      columnName = `${columnPrefix || ''}${field.name[0] === '_' ? '_' : ''}${toSnakeCase(\n        field.name,\n      )}`\n      fieldName = `${fieldPrefix?.replace('.', '_') || ''}${field.name}`\n\n      // If field is localized,\n      // add the column to the locale table instead of main table\n      if (\n        adapter.payload.config.localization &&\n        (field.localized || forceLocalized) &&\n        field.type !== 'array' &&\n        field.type !== 'blocks' &&\n        (('hasMany' in field && field.hasMany !== true) || !('hasMany' in field))\n      ) {\n        hasLocalizedField = true\n        targetTable = localesColumns\n        targetIndexes = localesIndexes\n      }\n\n      if (\n        (field.unique || field.index) &&\n        !['array', 'blocks', 'group', 'point', 'relationship', 'upload'].includes(field.type) &&\n        !('hasMany' in field && field.hasMany === true)\n      ) {\n        const unique = disableUnique !== true && field.unique\n        if (unique) {\n          const constraintValue = `${fieldPrefix || ''}${field.name}`\n          if (!adapter.fieldConstraints?.[rootTableName]) {\n            adapter.fieldConstraints[rootTableName] = {}\n          }\n          adapter.fieldConstraints[rootTableName][`${columnName}_idx`] = constraintValue\n        }\n        targetIndexes[`${newTableName}_${field.name}Idx`] = createIndex({\n          name: fieldName,\n          columnName,\n          tableName: newTableName,\n          unique,\n        })\n      }\n    }\n\n    switch (field.type) {\n      case 'text': {\n        if (field.hasMany) {\n          if (field.localized) {\n            hasLocalizedManyTextField = true\n          }\n\n          if (field.index) {\n            hasManyTextField = 'index'\n          } else if (!hasManyTextField) {\n            hasManyTextField = true\n          }\n\n          if (field.unique) {\n            throw new InvalidConfiguration(\n              'Unique is not supported in Postgres for hasMany text fields.',\n            )\n          }\n        } else {\n          targetTable[fieldName] = varchar(columnName)\n        }\n        break\n      }\n      case 'email':\n      case 'code':\n      case 'textarea': {\n        targetTable[fieldName] = varchar(columnName)\n        break\n      }\n\n      case 'number': {\n        if (field.hasMany) {\n          if (field.localized) {\n            hasLocalizedManyNumberField = true\n          }\n\n          if (field.index) {\n            hasManyNumberField = 'index'\n          } else if (!hasManyNumberField) {\n            hasManyNumberField = true\n          }\n\n          if (field.unique) {\n            throw new InvalidConfiguration(\n              'Unique is not supported in Postgres for hasMany number fields.',\n            )\n          }\n        } else {\n          targetTable[fieldName] = numeric(columnName)\n        }\n        break\n      }\n\n      case 'richText':\n      case 'json': {\n        targetTable[fieldName] = jsonb(columnName)\n        break\n      }\n\n      case 'date': {\n        targetTable[fieldName] = timestamp(columnName, {\n          mode: 'string',\n          precision: 3,\n          withTimezone: true,\n        })\n        break\n      }\n\n      case 'point': {\n        break\n      }\n\n      case 'radio':\n      case 'select': {\n        const enumName = createTableName({\n          adapter,\n          config: field,\n          parentTableName: newTableName,\n          prefix: `enum_${newTableName}_`,\n          target: 'enumName',\n          throwValidationError,\n        })\n\n        adapter.enums[enumName] = pgEnum(\n          enumName,\n          field.options.map((option) => {\n            if (optionIsObject(option)) {\n              return option.value\n            }\n\n            return option\n          }) as [string, ...string[]],\n        )\n\n        if (field.type === 'select' && field.hasMany) {\n          const selectTableName = createTableName({\n            adapter,\n            config: field,\n            parentTableName: newTableName,\n            prefix: `${newTableName}_`,\n            throwValidationError,\n            versionsCustomName: versions,\n          })\n          const baseColumns: Record<string, PgColumnBuilder> = {\n            order: integer('order').notNull(),\n            parent: parentIDColumnMap[parentIDColType]('parent_id').notNull(),\n            value: adapter.enums[enumName]('value'),\n          }\n\n          const baseExtraConfig: BaseExtraConfig = {\n            orderIdx: (cols) => index(`${selectTableName}_order_idx`).on(cols.order),\n            parentFk: (cols) =>\n              foreignKey({\n                name: `${selectTableName}_parent_fk`,\n                columns: [cols.parent],\n                foreignColumns: [adapter.tables[parentTableName].id],\n              }).onDelete('cascade'),\n            parentIdx: (cols) => index(`${selectTableName}_parent_idx`).on(cols.parent),\n          }\n\n          if (field.localized) {\n            baseColumns.locale = adapter.enums.enum__locales('locale').notNull()\n            baseExtraConfig.localeIdx = (cols) =>\n              index(`${selectTableName}_locale_idx`).on(cols.locale)\n          }\n\n          if (field.index) {\n            baseExtraConfig.value = (cols) => index(`${selectTableName}_value_idx`).on(cols.value)\n          }\n\n          buildTable({\n            adapter,\n            baseColumns,\n            baseExtraConfig,\n            disableNotNull,\n            disableUnique,\n            fields: [],\n            rootTableName,\n            tableName: selectTableName,\n            versions,\n          })\n\n          relationsToBuild.set(fieldName, {\n            type: 'many',\n            // selects have their own localized table, independent of the base table.\n            localized: false,\n            target: selectTableName,\n          })\n\n          adapter.relations[`relations_${selectTableName}`] = relations(\n            adapter.tables[selectTableName],\n            ({ one }) => ({\n              parent: one(adapter.tables[parentTableName], {\n                fields: [adapter.tables[selectTableName].parent],\n                references: [adapter.tables[parentTableName].id],\n                relationName: fieldName,\n              }),\n            }),\n          )\n        } else {\n          targetTable[fieldName] = adapter.enums[enumName](fieldName)\n        }\n        break\n      }\n\n      case 'checkbox': {\n        targetTable[fieldName] = boolean(columnName)\n        break\n      }\n\n      case 'array': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        const arrayTableName = createTableName({\n          adapter,\n          config: field,\n          parentTableName: newTableName,\n          prefix: `${newTableName}_`,\n          throwValidationError,\n          versionsCustomName: versions,\n        })\n\n        const baseColumns: Record<string, PgColumnBuilder> = {\n          _order: integer('_order').notNull(),\n          _parentID: parentIDColumnMap[parentIDColType]('_parent_id').notNull(),\n        }\n\n        const baseExtraConfig: BaseExtraConfig = {\n          _orderIdx: (cols) => index(`${arrayTableName}_order_idx`).on(cols._order),\n          _parentIDFk: (cols) =>\n            foreignKey({\n              name: `${arrayTableName}_parent_id_fk`,\n              columns: [cols['_parentID']],\n              foreignColumns: [adapter.tables[parentTableName].id],\n            }).onDelete('cascade'),\n          _parentIDIdx: (cols) => index(`${arrayTableName}_parent_id_idx`).on(cols._parentID),\n        }\n\n        if (field.localized && adapter.payload.config.localization) {\n          baseColumns._locale = adapter.enums.enum__locales('_locale').notNull()\n          baseExtraConfig._localeIdx = (cols) =>\n            index(`${arrayTableName}_locale_idx`).on(cols._locale)\n        }\n\n        const {\n          hasManyNumberField: subHasManyNumberField,\n          hasManyTextField: subHasManyTextField,\n          relationsToBuild: subRelationsToBuild,\n        } = buildTable({\n          adapter,\n          baseColumns,\n          baseExtraConfig,\n          disableNotNull: disableNotNullFromHere,\n          disableUnique,\n          fields: disableUnique ? idToUUID(field.fields) : field.fields,\n          rootRelationsToBuild,\n          rootRelationships: relationships,\n          rootTableIDColType,\n          rootTableName,\n          tableName: arrayTableName,\n          versions,\n        })\n\n        if (subHasManyTextField) {\n          if (!hasManyTextField || subHasManyTextField === 'index')\n            hasManyTextField = subHasManyTextField\n        }\n        if (subHasManyNumberField) {\n          if (!hasManyNumberField || subHasManyNumberField === 'index')\n            hasManyNumberField = subHasManyNumberField\n        }\n\n        relationsToBuild.set(fieldName, {\n          type: 'many',\n          // arrays have their own localized table, independent of the base table.\n          localized: false,\n          target: arrayTableName,\n        })\n\n        adapter.relations[`relations_${arrayTableName}`] = relations(\n          adapter.tables[arrayTableName],\n          ({ many, one }) => {\n            const result: Record<string, Relation<string>> = {\n              _parentID: one(adapter.tables[parentTableName], {\n                fields: [adapter.tables[arrayTableName]._parentID],\n                references: [adapter.tables[parentTableName].id],\n                relationName: fieldName,\n              }),\n            }\n\n            if (hasLocalesTable(field.fields)) {\n              result._locales = many(adapter.tables[`${arrayTableName}${adapter.localesSuffix}`], {\n                relationName: '_locales',\n              })\n            }\n\n            subRelationsToBuild.forEach(({ type, localized, target }, key) => {\n              if (type === 'one') {\n                const arrayWithLocalized = localized\n                  ? `${arrayTableName}${adapter.localesSuffix}`\n                  : arrayTableName\n                result[key] = one(adapter.tables[target], {\n                  fields: [adapter.tables[arrayWithLocalized][key]],\n                  references: [adapter.tables[target].id],\n                  relationName: key,\n                })\n              }\n              if (type === 'many') {\n                result[key] = many(adapter.tables[target], { relationName: key })\n              }\n            })\n\n            return result\n          },\n        )\n\n        break\n      }\n\n      case 'blocks': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        field.blocks.forEach((block) => {\n          const blockTableName = createTableName({\n            adapter,\n            config: block,\n            parentTableName: rootTableName,\n            prefix: `${rootTableName}_blocks_`,\n            throwValidationError,\n            versionsCustomName: versions,\n          })\n          if (!adapter.tables[blockTableName]) {\n            const baseColumns: Record<string, PgColumnBuilder> = {\n              _order: integer('_order').notNull(),\n              _parentID: parentIDColumnMap[rootTableIDColType]('_parent_id').notNull(),\n              _path: text('_path').notNull(),\n            }\n\n            const baseExtraConfig: BaseExtraConfig = {\n              _orderIdx: (cols) => index(`${blockTableName}_order_idx`).on(cols._order),\n              _parentIDIdx: (cols) => index(`${blockTableName}_parent_id_idx`).on(cols._parentID),\n              _parentIdFk: (cols) =>\n                foreignKey({\n                  name: `${blockTableName}_parent_id_fk`,\n                  columns: [cols._parentID],\n                  foreignColumns: [adapter.tables[rootTableName].id],\n                }).onDelete('cascade'),\n              _pathIdx: (cols) => index(`${blockTableName}_path_idx`).on(cols._path),\n            }\n\n            if (field.localized && adapter.payload.config.localization) {\n              baseColumns._locale = adapter.enums.enum__locales('_locale').notNull()\n              baseExtraConfig._localeIdx = (cols) =>\n                index(`${blockTableName}_locale_idx`).on(cols._locale)\n            }\n\n            const {\n              hasManyNumberField: subHasManyNumberField,\n              hasManyTextField: subHasManyTextField,\n              relationsToBuild: subRelationsToBuild,\n            } = buildTable({\n              adapter,\n              baseColumns,\n              baseExtraConfig,\n              disableNotNull: disableNotNullFromHere,\n              disableUnique,\n              fields: disableUnique ? idToUUID(block.fields) : block.fields,\n              rootRelationsToBuild,\n              rootRelationships: relationships,\n              rootTableIDColType,\n              rootTableName,\n              tableName: blockTableName,\n              versions,\n            })\n\n            if (subHasManyTextField) {\n              if (!hasManyTextField || subHasManyTextField === 'index')\n                hasManyTextField = subHasManyTextField\n            }\n\n            if (subHasManyNumberField) {\n              if (!hasManyNumberField || subHasManyNumberField === 'index')\n                hasManyNumberField = subHasManyNumberField\n            }\n\n            adapter.relations[`relations_${blockTableName}`] = relations(\n              adapter.tables[blockTableName],\n              ({ many, one }) => {\n                const result: Record<string, Relation<string>> = {\n                  _parentID: one(adapter.tables[rootTableName], {\n                    fields: [adapter.tables[blockTableName]._parentID],\n                    references: [adapter.tables[rootTableName].id],\n                    relationName: `_blocks_${block.slug}`,\n                  }),\n                }\n\n                if (hasLocalesTable(block.fields)) {\n                  result._locales = many(\n                    adapter.tables[`${blockTableName}${adapter.localesSuffix}`],\n                    { relationName: '_locales' },\n                  )\n                }\n\n                subRelationsToBuild.forEach(({ type, localized, target }, key) => {\n                  if (type === 'one') {\n                    const blockWithLocalized = localized\n                      ? `${blockTableName}${adapter.localesSuffix}`\n                      : blockTableName\n                    result[key] = one(adapter.tables[target], {\n                      fields: [adapter.tables[blockWithLocalized][key]],\n                      references: [adapter.tables[target].id],\n                      relationName: key,\n                    })\n                  }\n                  if (type === 'many') {\n                    result[key] = many(adapter.tables[target], { relationName: key })\n                  }\n                })\n\n                return result\n              },\n            )\n          } else if (process.env.NODE_ENV !== 'production' && !versions) {\n            validateExistingBlockIsIdentical({\n              block,\n              localized: field.localized,\n              rootTableName,\n              table: adapter.tables[blockTableName],\n              tableLocales: adapter.tables[`${blockTableName}${adapter.localesSuffix}`],\n            })\n          }\n          // blocks relationships are defined from the collection or globals table down to the block, bypassing any subBlocks\n          rootRelationsToBuild.set(`_blocks_${block.slug}`, {\n            type: 'many',\n            // blocks are not localized on the parent table\n            localized: false,\n            target: blockTableName,\n          })\n        })\n\n        break\n      }\n\n      case 'tab':\n      case 'group': {\n        if (!('name' in field)) {\n          const {\n            hasLocalizedField: groupHasLocalizedField,\n            hasLocalizedManyNumberField: groupHasLocalizedManyNumberField,\n            hasLocalizedManyTextField: groupHasLocalizedManyTextField,\n            hasLocalizedRelationshipField: groupHasLocalizedRelationshipField,\n            hasManyNumberField: groupHasManyNumberField,\n            hasManyTextField: groupHasManyTextField,\n          } = traverseFields({\n            adapter,\n            columnPrefix,\n            columns,\n            disableNotNull,\n            disableUnique,\n            fieldPrefix,\n            fields: field.fields,\n            forceLocalized,\n            indexes,\n            localesColumns,\n            localesIndexes,\n            newTableName,\n            parentTableName,\n            relationsToBuild,\n            relationships,\n            rootRelationsToBuild,\n            rootTableIDColType,\n            rootTableName,\n            versions,\n          })\n\n          if (groupHasLocalizedField) hasLocalizedField = true\n          if (groupHasLocalizedRelationshipField) hasLocalizedRelationshipField = true\n          if (groupHasManyTextField) hasManyTextField = true\n          if (groupHasLocalizedManyTextField) hasLocalizedManyTextField = true\n          if (groupHasManyNumberField) hasManyNumberField = true\n          if (groupHasLocalizedManyNumberField) hasLocalizedManyNumberField = true\n          break\n        }\n\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        const {\n          hasLocalizedField: groupHasLocalizedField,\n          hasLocalizedManyNumberField: groupHasLocalizedManyNumberField,\n          hasLocalizedManyTextField: groupHasLocalizedManyTextField,\n          hasLocalizedRelationshipField: groupHasLocalizedRelationshipField,\n          hasManyNumberField: groupHasManyNumberField,\n          hasManyTextField: groupHasManyTextField,\n        } = traverseFields({\n          adapter,\n          columnPrefix: `${columnName}_`,\n          columns,\n          disableNotNull: disableNotNullFromHere,\n          disableUnique,\n          fieldPrefix: `${fieldName}.`,\n          fields: field.fields,\n          forceLocalized: field.localized,\n          indexes,\n          localesColumns,\n          localesIndexes,\n          newTableName: `${parentTableName}_${columnName}`,\n          parentTableName,\n          relationsToBuild,\n          relationships,\n          rootRelationsToBuild,\n          rootTableIDColType,\n          rootTableName,\n          versions,\n        })\n\n        if (groupHasLocalizedField) hasLocalizedField = true\n        if (groupHasLocalizedRelationshipField) hasLocalizedRelationshipField = true\n        if (groupHasManyTextField) hasManyTextField = true\n        if (groupHasLocalizedManyTextField) hasLocalizedManyTextField = true\n        if (groupHasManyNumberField) hasManyNumberField = true\n        if (groupHasLocalizedManyNumberField) hasLocalizedManyNumberField = true\n        break\n      }\n\n      case 'tabs': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n\n        const {\n          hasLocalizedField: tabHasLocalizedField,\n          hasLocalizedManyNumberField: tabHasLocalizedManyNumberField,\n          hasLocalizedManyTextField: tabHasLocalizedManyTextField,\n          hasLocalizedRelationshipField: tabHasLocalizedRelationshipField,\n          hasManyNumberField: tabHasManyNumberField,\n          hasManyTextField: tabHasManyTextField,\n        } = traverseFields({\n          adapter,\n          columnPrefix,\n          columns,\n          disableNotNull: disableNotNullFromHere,\n          disableUnique,\n          fieldPrefix,\n          fields: field.tabs.map((tab) => ({ ...tab, type: 'tab' })),\n          forceLocalized,\n          indexes,\n          localesColumns,\n          localesIndexes,\n          newTableName,\n          parentTableName,\n          relationsToBuild,\n          relationships,\n          rootRelationsToBuild,\n          rootTableIDColType,\n          rootTableName,\n          versions,\n        })\n\n        if (tabHasLocalizedField) hasLocalizedField = true\n        if (tabHasLocalizedRelationshipField) hasLocalizedRelationshipField = true\n        if (tabHasManyTextField) hasManyTextField = true\n        if (tabHasLocalizedManyTextField) hasLocalizedManyTextField = true\n        if (tabHasManyNumberField) hasManyNumberField = true\n        if (tabHasLocalizedManyNumberField) hasLocalizedManyNumberField = true\n        break\n      }\n\n      case 'row':\n      case 'collapsible': {\n        const disableNotNullFromHere = Boolean(field.admin?.condition) || disableNotNull\n        const {\n          hasLocalizedField: rowHasLocalizedField,\n          hasLocalizedManyNumberField: rowHasLocalizedManyNumberField,\n          hasLocalizedManyTextField: rowHasLocalizedManyTextField,\n          hasLocalizedRelationshipField: rowHasLocalizedRelationshipField,\n          hasManyNumberField: rowHasManyNumberField,\n          hasManyTextField: rowHasManyTextField,\n        } = traverseFields({\n          adapter,\n          columnPrefix,\n          columns,\n          disableNotNull: disableNotNullFromHere,\n          disableUnique,\n          fieldPrefix,\n          fields: field.fields,\n          forceLocalized,\n          indexes,\n          localesColumns,\n          localesIndexes,\n          newTableName,\n          parentTableName,\n          relationsToBuild,\n          relationships,\n          rootRelationsToBuild,\n          rootTableIDColType,\n          rootTableName,\n          versions,\n        })\n\n        if (rowHasLocalizedField) hasLocalizedField = true\n        if (rowHasLocalizedRelationshipField) hasLocalizedRelationshipField = true\n        if (rowHasManyTextField) hasManyTextField = true\n        if (rowHasLocalizedManyTextField) hasLocalizedManyTextField = true\n        if (rowHasManyNumberField) hasManyNumberField = true\n        if (rowHasLocalizedManyNumberField) hasLocalizedManyNumberField = true\n        break\n      }\n\n      case 'relationship':\n      case 'upload':\n        if (Array.isArray(field.relationTo)) {\n          field.relationTo.forEach((relation) => relationships.add(relation))\n        } else if (field.type === 'relationship' && field.hasMany) {\n          relationships.add(field.relationTo)\n        } else {\n          // simple relationships get a column on the targetTable with a foreign key to the relationTo table\n          const relationshipConfig = adapter.payload.collections[field.relationTo].config\n\n          const tableName = adapter.tableNameMap.get(toSnakeCase(field.relationTo))\n\n          // get the id type of the related collection\n          let colType = adapter.idType === 'uuid' ? 'uuid' : 'integer'\n          const relatedCollectionCustomID = relationshipConfig.fields.find(\n            (field) => fieldAffectsData(field) && field.name === 'id',\n          )\n          if (relatedCollectionCustomID?.type === 'number') colType = 'numeric'\n          if (relatedCollectionCustomID?.type === 'text') colType = 'varchar'\n\n          // make the foreign key column for relationship using the correct id column type\n          targetTable[fieldName] = parentIDColumnMap[colType](`${columnName}_id`).references(\n            () => adapter.tables[tableName].id,\n            { onDelete: 'set null' },\n          )\n\n          // add relationship to table\n          relationsToBuild.set(fieldName, {\n            type: 'one',\n            localized: adapter.payload.config.localization && field.localized,\n            target: tableName,\n          })\n\n          // add notNull when not required\n          if (!disableNotNull && field.required && !field.admin?.condition) {\n            targetTable[fieldName].notNull()\n          }\n          break\n        }\n        if (adapter.payload.config.localization && field.localized) {\n          hasLocalizedRelationshipField = true\n        }\n\n        break\n\n      default:\n        break\n    }\n\n    const condition = field.admin && field.admin.condition\n\n    if (\n      !disableNotNull &&\n      targetTable[fieldName] &&\n      'required' in field &&\n      field.required &&\n      !condition\n    ) {\n      targetTable[fieldName].notNull()\n    }\n  })\n\n  return {\n    hasLocalizedField,\n    hasLocalizedManyNumberField,\n    hasLocalizedManyTextField,\n    hasLocalizedRelationshipField,\n    hasManyNumberField,\n    hasManyTextField,\n  }\n}\n"],"names":["relations","PgNumericBuilder","PgUUIDBuilder","PgVarcharBuilder","boolean","foreignKey","index","integer","jsonb","numeric","pgEnum","text","timestamp","varchar","InvalidConfiguration","fieldAffectsData","optionIsObject","toSnakeCase","hasLocalesTable","buildTable","createIndex","createTableName","idToUUID","parentIDColumnMap","validateExistingBlockIsIdentical","traverseFields","adapter","columnPrefix","columns","disableNotNull","disableUnique","fieldPrefix","fields","forceLocalized","indexes","localesColumns","localesIndexes","newTableName","parentTableName","relationsToBuild","relationships","rootRelationsToBuild","rootTableIDColType","rootTableName","versions","throwValidationError","hasLocalizedField","hasLocalizedRelationshipField","hasManyTextField","hasLocalizedManyTextField","hasManyNumberField","hasLocalizedManyNumberField","parentIDColType","id","forEach","field","name","columnName","fieldName","targetTable","targetIndexes","replace","payload","config","localization","localized","type","hasMany","unique","includes","constraintValue","fieldConstraints","tableName","mode","precision","withTimezone","enumName","prefix","target","enums","options","map","option","value","selectTableName","versionsCustomName","baseColumns","order","notNull","parent","baseExtraConfig","orderIdx","cols","on","parentFk","foreignColumns","tables","onDelete","parentIdx","locale","enum__locales","localeIdx","set","one","references","relationName","disableNotNullFromHere","Boolean","admin","condition","arrayTableName","_order","_parentID","_orderIdx","_parentIDFk","_parentIDIdx","_locale","_localeIdx","subHasManyNumberField","subHasManyTextField","subRelationsToBuild","rootRelationships","many","result","_locales","localesSuffix","key","arrayWithLocalized","blocks","block","blockTableName","_path","_parentIdFk","_pathIdx","slug","blockWithLocalized","process","env","NODE_ENV","table","tableLocales","groupHasLocalizedField","groupHasLocalizedManyNumberField","groupHasLocalizedManyTextField","groupHasLocalizedRelationshipField","groupHasManyNumberField","groupHasManyTextField","tabHasLocalizedField","tabHasLocalizedManyNumberField","tabHasLocalizedManyTextField","tabHasLocalizedRelationshipField","tabHasManyNumberField","tabHasManyTextField","tabs","tab","rowHasLocalizedField","rowHasLocalizedManyNumberField","rowHasLocalizedManyTextField","rowHasLocalizedRelationshipField","rowHasManyNumberField","rowHasManyTextField","Array","isArray","relationTo","relation","add","relationshipConfig","collections","tableNameMap","get","colType","idType","relatedCollectionCustomID","find","required"],"mappings":"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"}