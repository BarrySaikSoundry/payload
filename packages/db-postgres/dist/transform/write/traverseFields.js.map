{"version":3,"sources":["../../../src/transform/write/traverseFields.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport type { Field } from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\nimport toSnakeCase from 'to-snake-case'\n\nimport type { PostgresAdapter } from '../../types.js'\nimport type { ArrayRowToInsert, BlockRowToInsert, RelationshipToDelete } from './types.js'\n\nimport { isArrayOfRows } from '../../utilities/isArrayOfRows.js'\nimport { transformArray } from './array.js'\nimport { transformBlocks } from './blocks.js'\nimport { transformNumbers } from './numbers.js'\nimport { transformRelationship } from './relationships.js'\nimport { transformSelects } from './selects.js'\nimport { transformTexts } from './texts.js'\n\ntype Args = {\n  adapter: PostgresAdapter\n  arrays: {\n    [tableName: string]: ArrayRowToInsert[]\n  }\n  /**\n   * This is the name of the base table\n   */\n  baseTableName: string\n  blocks: {\n    [blockType: string]: BlockRowToInsert[]\n  }\n  blocksToDelete: Set<string>\n  /**\n   * A snake-case field prefix, representing prior fields\n   * Ex: my_group_my_named_tab_\n   */\n  columnPrefix: string\n  data: Record<string, unknown>\n  existingLocales?: Record<string, unknown>[]\n  /**\n   * A prefix that will retain camel-case formatting, representing prior fields\n   * Ex: myGroup_myNamedTab_\n   */\n  fieldPrefix: string\n  fields: Field[]\n  forcedLocale?: string\n  locales: {\n    [locale: string]: Record<string, unknown>\n  }\n  numbers: Record<string, unknown>[]\n  /**\n   * This is the name of the parent table\n   */\n  parentTableName: string\n  path: string\n  relationships: Record<string, unknown>[]\n  relationshipsToDelete: RelationshipToDelete[]\n  row: Record<string, unknown>\n  selects: {\n    [tableName: string]: Record<string, unknown>[]\n  }\n  texts: Record<string, unknown>[]\n}\n\nexport const traverseFields = ({\n  adapter,\n  arrays,\n  baseTableName,\n  blocks,\n  blocksToDelete,\n  columnPrefix,\n  data,\n  existingLocales,\n  fieldPrefix,\n  fields,\n  forcedLocale,\n  locales,\n  numbers,\n  parentTableName,\n  path,\n  relationships,\n  relationshipsToDelete,\n  row,\n  selects,\n  texts,\n}: Args) => {\n  fields.forEach((field) => {\n    let columnName = ''\n    let fieldName = ''\n    let fieldData: unknown\n\n    if (fieldAffectsData(field)) {\n      columnName = `${columnPrefix || ''}${toSnakeCase(field.name)}`\n      fieldName = `${fieldPrefix || ''}${field.name}`\n      fieldData = data[field.name]\n    }\n\n    if (field.type === 'array') {\n      const arrayTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n\n      if (!arrays[arrayTableName]) arrays[arrayTableName] = []\n\n      if (field.localized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              const newRows = transformArray({\n                adapter,\n                arrayTableName,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                data: localeData,\n                field,\n                locale: localeKey,\n                numbers,\n                path,\n                relationships,\n                relationshipsToDelete,\n                selects,\n                texts,\n              })\n\n              arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n            }\n          })\n        }\n      } else {\n        const newRows = transformArray({\n          adapter,\n          arrayTableName,\n          baseTableName,\n          blocks,\n          blocksToDelete,\n          data: data[field.name],\n          field,\n          numbers,\n          path,\n          relationships,\n          relationshipsToDelete,\n          selects,\n          texts,\n        })\n\n        arrays[arrayTableName] = arrays[arrayTableName].concat(newRows)\n      }\n\n      return\n    }\n\n    if (field.type === 'blocks') {\n      field.blocks.forEach(({ slug }) => {\n        blocksToDelete.add(toSnakeCase(slug))\n      })\n\n      if (field.localized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformBlocks({\n                adapter,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                data: localeData,\n                field,\n                locale: localeKey,\n                numbers,\n                path,\n                relationships,\n                relationshipsToDelete,\n                selects,\n                texts,\n              })\n            }\n          })\n        }\n      } else if (isArrayOfRows(fieldData)) {\n        transformBlocks({\n          adapter,\n          baseTableName,\n          blocks,\n          blocksToDelete,\n          data: fieldData,\n          field,\n          numbers,\n          path,\n          relationships,\n          relationshipsToDelete,\n          selects,\n          texts,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'group') {\n      if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n        if (field.localized) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            traverseFields({\n              adapter,\n              arrays,\n              baseTableName,\n              blocks,\n              blocksToDelete,\n              columnPrefix: `${columnName}_`,\n              data: localeData as Record<string, unknown>,\n              existingLocales,\n              fieldPrefix: `${fieldName}_`,\n              fields: field.fields,\n              forcedLocale: localeKey,\n              locales,\n              numbers,\n              parentTableName,\n              path: `${path || ''}${field.name}.`,\n              relationships,\n              relationshipsToDelete,\n              row,\n              selects,\n              texts,\n            })\n          })\n        } else {\n          traverseFields({\n            adapter,\n            arrays,\n            baseTableName,\n            blocks,\n            blocksToDelete,\n            columnPrefix: `${columnName}_`,\n            data: data[field.name] as Record<string, unknown>,\n            existingLocales,\n            fieldPrefix: `${fieldName}_`,\n            fields: field.fields,\n            locales,\n            numbers,\n            parentTableName,\n            path: `${path || ''}${field.name}.`,\n            relationships,\n            relationshipsToDelete,\n            row,\n            selects,\n            texts,\n          })\n        }\n      }\n\n      return\n    }\n\n    if (field.type === 'tabs') {\n      field.tabs.forEach((tab) => {\n        if ('name' in tab) {\n          if (typeof data[tab.name] === 'object' && data[tab.name] !== null) {\n            if (tab.localized) {\n              Object.entries(data[tab.name]).forEach(([localeKey, localeData]) => {\n                traverseFields({\n                  adapter,\n                  arrays,\n                  baseTableName,\n                  blocks,\n                  blocksToDelete,\n                  columnPrefix: `${columnPrefix || ''}${toSnakeCase(tab.name)}_`,\n                  data: localeData as Record<string, unknown>,\n                  existingLocales,\n                  fieldPrefix: `${fieldPrefix || ''}${tab.name}_`,\n                  fields: tab.fields,\n                  forcedLocale: localeKey,\n                  locales,\n                  numbers,\n                  parentTableName,\n                  path: `${path || ''}${tab.name}.`,\n                  relationships,\n                  relationshipsToDelete,\n                  row,\n                  selects,\n                  texts,\n                })\n              })\n            } else {\n              traverseFields({\n                adapter,\n                arrays,\n                baseTableName,\n                blocks,\n                blocksToDelete,\n                columnPrefix: `${columnPrefix || ''}${toSnakeCase(tab.name)}_`,\n                data: data[tab.name] as Record<string, unknown>,\n                existingLocales,\n                fieldPrefix: `${fieldPrefix || ''}${tab.name}_`,\n                fields: tab.fields,\n                locales,\n                numbers,\n                parentTableName,\n                path: `${path || ''}${tab.name}.`,\n                relationships,\n                relationshipsToDelete,\n                row,\n                selects,\n                texts,\n              })\n            }\n          }\n        } else {\n          traverseFields({\n            adapter,\n            arrays,\n            baseTableName,\n            blocks,\n            blocksToDelete,\n            columnPrefix,\n            data,\n            existingLocales,\n            fieldPrefix,\n            fields: tab.fields,\n            locales,\n            numbers,\n            parentTableName,\n            path,\n            relationships,\n            relationshipsToDelete,\n            row,\n            selects,\n            texts,\n          })\n        }\n      })\n    }\n\n    if (field.type === 'row' || field.type === 'collapsible') {\n      traverseFields({\n        adapter,\n        arrays,\n        baseTableName,\n        blocks,\n        blocksToDelete,\n        columnPrefix,\n        data,\n        existingLocales,\n        fieldPrefix,\n        fields: field.fields,\n        locales,\n        numbers,\n        parentTableName,\n        path,\n        relationships,\n        relationshipsToDelete,\n        row,\n        selects,\n        texts,\n      })\n    }\n\n    if (field.type === 'relationship' || field.type === 'upload') {\n      const relationshipPath = `${path || ''}${field.name}`\n\n      if (\n        field.localized &&\n        (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany))\n      ) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (localeData === null) {\n              relationshipsToDelete.push({\n                locale: localeKey,\n                path: relationshipPath,\n              })\n              return\n            }\n\n            transformRelationship({\n              baseRow: {\n                locale: localeKey,\n                path: relationshipPath,\n              },\n              data: localeData,\n              field,\n              relationships,\n            })\n          })\n        }\n        return\n      } else if (Array.isArray(field.relationTo) || ('hasMany' in field && field.hasMany)) {\n        if (fieldData === null || (Array.isArray(fieldData) && fieldData.length === 0)) {\n          relationshipsToDelete.push({ path: relationshipPath })\n          return\n        }\n\n        transformRelationship({\n          baseRow: {\n            path: relationshipPath,\n          },\n          data: fieldData,\n          field,\n          relationships,\n        })\n        return\n      } else {\n        if (\n          !field.localized &&\n          fieldData &&\n          typeof fieldData === 'object' &&\n          'id' in fieldData &&\n          fieldData?.id\n        ) {\n          fieldData = fieldData.id\n        } else if (field.localized) {\n          if (typeof fieldData === 'object') {\n            Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n              if (typeof localeData === 'object') {\n                if (localeData && 'id' in localeData && localeData?.id) {\n                  fieldData[localeKey] = localeData.id\n                }\n              } else {\n                fieldData[localeKey] = localeData\n              }\n            })\n          }\n        }\n      }\n    }\n\n    if (field.type === 'text' && field.hasMany) {\n      const textPath = `${path || ''}${field.name}`\n\n      if (field.localized) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformTexts({\n                baseRow: {\n                  locale: localeKey,\n                  path: textPath,\n                },\n                data: localeData,\n                texts,\n              })\n            }\n          })\n        }\n      } else if (Array.isArray(fieldData)) {\n        transformTexts({\n          baseRow: {\n            path: textPath,\n          },\n          data: fieldData,\n          texts,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'number' && field.hasMany) {\n      const numberPath = `${path || ''}${field.name}`\n\n      if (field.localized) {\n        if (typeof fieldData === 'object') {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              transformNumbers({\n                baseRow: {\n                  locale: localeKey,\n                  path: numberPath,\n                },\n                data: localeData,\n                numbers,\n              })\n            }\n          })\n        }\n      } else if (Array.isArray(fieldData)) {\n        transformNumbers({\n          baseRow: {\n            path: numberPath,\n          },\n          data: fieldData,\n          numbers,\n        })\n      }\n\n      return\n    }\n\n    if (field.type === 'select' && field.hasMany) {\n      const selectTableName = adapter.tableNameMap.get(`${parentTableName}_${columnName}`)\n      if (!selects[selectTableName]) selects[selectTableName] = []\n\n      if (field.localized) {\n        if (typeof data[field.name] === 'object' && data[field.name] !== null) {\n          Object.entries(data[field.name]).forEach(([localeKey, localeData]) => {\n            if (Array.isArray(localeData)) {\n              const newRows = transformSelects({\n                id: data._uuid || data.id,\n                data: localeData,\n                locale: localeKey,\n              })\n\n              selects[selectTableName] = selects[selectTableName].concat(newRows)\n            }\n          })\n        }\n      } else if (Array.isArray(data[field.name])) {\n        const newRows = transformSelects({\n          id: data._uuid || data.id,\n          data: data[field.name],\n        })\n\n        selects[selectTableName] = selects[selectTableName].concat(newRows)\n      }\n\n      return\n    }\n\n    if (fieldAffectsData(field)) {\n      const valuesToTransform: { localeKey?: string; ref: unknown; value: unknown }[] = []\n\n      if (field.localized) {\n        if (typeof fieldData === 'object' && fieldData !== null) {\n          Object.entries(fieldData).forEach(([localeKey, localeData]) => {\n            if (!locales[localeKey]) locales[localeKey] = {}\n\n            valuesToTransform.push({\n              localeKey,\n              ref: locales,\n              value: localeData,\n            })\n          })\n        }\n      } else {\n        let ref = row\n\n        if (forcedLocale) {\n          if (!locales[forcedLocale]) locales[forcedLocale] = {}\n          ref = locales[forcedLocale]\n        }\n\n        valuesToTransform.push({ ref, value: fieldData })\n      }\n\n      valuesToTransform.forEach(({ localeKey, ref, value }) => {\n        if (typeof value !== 'undefined') {\n          let formattedValue = value\n\n          if (field.type === 'date' && field.name === 'updatedAt') {\n            formattedValue = new Date().toISOString()\n          }\n\n          if (localeKey) {\n            ref[localeKey][fieldName] = formattedValue\n          } else {\n            ref[fieldName] = formattedValue\n          }\n        }\n      })\n    }\n  })\n}\n"],"names":["fieldAffectsData","toSnakeCase","isArrayOfRows","transformArray","transformBlocks","transformNumbers","transformRelationship","transformSelects","transformTexts","traverseFields","adapter","arrays","baseTableName","blocks","blocksToDelete","columnPrefix","data","existingLocales","fieldPrefix","fields","forcedLocale","locales","numbers","parentTableName","path","relationships","relationshipsToDelete","row","selects","texts","forEach","field","columnName","fieldName","fieldData","name","type","arrayTableName","tableNameMap","get","localized","Object","entries","localeKey","localeData","Array","isArray","newRows","locale","concat","slug","add","tabs","tab","relationshipPath","relationTo","hasMany","push","baseRow","length","id","textPath","numberPath","selectTableName","_uuid","valuesToTransform","ref","value","formattedValue","Date","toISOString"],"mappings":"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"}