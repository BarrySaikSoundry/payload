{"version":3,"sources":["../src/handleUpload.ts"],"sourcesContent":["import type { HandleUpload } from '@payloadcms/plugin-cloud-storage/types'\nimport type { UTApi } from 'uploadthing/server'\n\nimport { APIError } from 'payload'\nimport { UTFile } from 'uploadthing/server'\n\nimport type { ACL } from './index.js'\n\ntype HandleUploadArgs = {\n  acl: ACL\n  utApi: UTApi\n}\n\nexport const getHandleUpload = ({ acl, utApi }: HandleUploadArgs): HandleUpload => {\n  return async ({ data, file }) => {\n    try {\n      const { buffer, filename, mimeType } = file\n\n      const blob = new Blob([buffer], { type: mimeType })\n      const res = await utApi.uploadFiles(new UTFile([blob], filename), { acl })\n\n      if (res.error) {\n        throw new APIError(`Error uploading file: ${res.error.code} - ${res.error.message}`)\n      }\n\n      // Find matching data.sizes entry\n      const foundSize = Object.keys(data.sizes || {}).find(\n        (key) => data.sizes?.[key]?.filename === filename,\n      )\n\n      if (foundSize) {\n        data.sizes[foundSize]._key = res.data?.key\n      } else {\n        data._key = res.data?.key\n        data.filename = res.data?.name\n      }\n\n      return data\n    } catch (error: unknown) {\n      if (error instanceof Error) {\n        // Interrogate uploadthing error which returns FiberFailure\n        if ('toJSON' in error && typeof error.toJSON === 'function') {\n          const json = error.toJSON() as {\n            cause?: { defect?: { _id?: string; data?: { error?: string }; error?: string } }\n          }\n          if (json.cause?.defect?.error && json.cause.defect.data?.error) {\n            throw new APIError(\n              `Error uploading file with uploadthing: ${json.cause.defect.error} - ${json.cause.defect.data.error}`,\n            )\n          }\n        } else {\n          throw new APIError(`Error uploading file with uploadthing: ${error.message}`)\n        }\n      }\n    }\n  }\n}\n"],"names":["APIError","UTFile","getHandleUpload","acl","utApi","data","file","buffer","filename","mimeType","blob","Blob","type","res","uploadFiles","error","code","message","foundSize","Object","keys","sizes","find","key","_key","name","Error","toJSON","json","cause","defect"],"mappings":"AAGA,SAASA,QAAQ,QAAQ,UAAS;AAClC,SAASC,MAAM,QAAQ,qBAAoB;AAS3C,OAAO,MAAMC,kBAAkB,CAAC,EAAEC,GAAG,EAAEC,KAAK,EAAoB;IAC9D,OAAO,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE;QAC1B,IAAI;YACF,MAAM,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAE,GAAGH;YAEvC,MAAMI,OAAO,IAAIC,KAAK;gBAACJ;aAAO,EAAE;gBAAEK,MAAMH;YAAS;YACjD,MAAMI,MAAM,MAAMT,MAAMU,WAAW,CAAC,IAAIb,OAAO;gBAACS;aAAK,EAAEF,WAAW;gBAAEL;YAAI;YAExE,IAAIU,IAAIE,KAAK,EAAE;gBACb,MAAM,IAAIf,SAAS,CAAC,sBAAsB,EAAEa,IAAIE,KAAK,CAACC,IAAI,CAAC,GAAG,EAAEH,IAAIE,KAAK,CAACE,OAAO,CAAC,CAAC;YACrF;YAEA,iCAAiC;YACjC,MAAMC,YAAYC,OAAOC,IAAI,CAACf,KAAKgB,KAAK,IAAI,CAAC,GAAGC,IAAI,CAClD,CAACC,MAAQlB,KAAKgB,KAAK,EAAE,CAACE,IAAI,EAAEf,aAAaA;YAG3C,IAAIU,WAAW;gBACbb,KAAKgB,KAAK,CAACH,UAAU,CAACM,IAAI,GAAGX,IAAIR,IAAI,EAAEkB;YACzC,OAAO;gBACLlB,KAAKmB,IAAI,GAAGX,IAAIR,IAAI,EAAEkB;gBACtBlB,KAAKG,QAAQ,GAAGK,IAAIR,IAAI,EAAEoB;YAC5B;YAEA,OAAOpB;QACT,EAAE,OAAOU,OAAgB;YACvB,IAAIA,iBAAiBW,OAAO;gBAC1B,2DAA2D;gBAC3D,IAAI,YAAYX,SAAS,OAAOA,MAAMY,MAAM,KAAK,YAAY;oBAC3D,MAAMC,OAAOb,MAAMY,MAAM;oBAGzB,IAAIC,KAAKC,KAAK,EAAEC,QAAQf,SAASa,KAAKC,KAAK,CAACC,MAAM,CAACzB,IAAI,EAAEU,OAAO;wBAC9D,MAAM,IAAIf,SACR,CAAC,uCAAuC,EAAE4B,KAAKC,KAAK,CAACC,MAAM,CAACf,KAAK,CAAC,GAAG,EAAEa,KAAKC,KAAK,CAACC,MAAM,CAACzB,IAAI,CAACU,KAAK,CAAC,CAAC;oBAEzG;gBACF,OAAO;oBACL,MAAM,IAAIf,SAAS,CAAC,uCAAuC,EAAEe,MAAME,OAAO,CAAC,CAAC;gBAC9E;YACF;QACF;IACF;AACF,EAAC"}