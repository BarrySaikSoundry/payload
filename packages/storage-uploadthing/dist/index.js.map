{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Field, Plugin } from 'payload'\nimport type { UTApiOptions } from 'uploadthing/types'\n\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\nimport { UTApi } from 'uploadthing/server'\n\nimport { generateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\n\nexport type UploadthingStorageOptions = {\n  /**\n   * Collection options to apply the adapter to.\n   */\n  collections: Record<string, Omit<CollectionOptions, 'adapter'> | true>\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n\n  /**\n   * Uploadthing Options\n   */\n  options: {\n    /**\n     * @default 'public-read'\n     */\n    acl?: ACL\n  } & UTApiOptions\n}\n\ntype UploadthingPlugin = (uploadthingStorageOptions: UploadthingStorageOptions) => Plugin\n\n/** NOTE: not synced with uploadthing's internal types. Need to modify if more options added */\nexport type ACL = 'private' | 'public-read'\n\nexport const uploadthingStorage: UploadthingPlugin =\n  (uploadthingStorageOptions: UploadthingStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    if (uploadthingStorageOptions.enabled === false) {\n      return incomingConfig\n    }\n\n    // Default ACL to public-read\n    if (!uploadthingStorageOptions.options.acl) {\n      uploadthingStorageOptions.options.acl = 'public-read'\n    }\n\n    const adapter = uploadthingInternal(uploadthingStorageOptions, incomingConfig)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      uploadthingStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n\n          // Disable payload access control if the ACL is public-read or not set\n          // ...(uploadthingStorageOptions.options.acl === 'public-read'\n          //   ? { disablePayloadAccessControl: true }\n          //   : {}),\n\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction uploadthingInternal(options: UploadthingStorageOptions, incomingConfig: Config): Adapter {\n  const fields: Field[] = [\n    {\n      name: '_key',\n      type: 'text',\n      admin: {\n        hidden: true,\n      },\n    },\n  ]\n\n  return (): GeneratedAdapter => {\n    const {\n      options: { acl = 'public-read', ...utOptions },\n    } = options\n\n    const utApi = new UTApi(utOptions)\n\n    return {\n      name: 'uploadthing',\n      fields,\n      generateURL,\n      handleDelete: getHandleDelete({ utApi }),\n      handleUpload: getHandleUpload({ acl, utApi }),\n      staticHandler: getHandler({ utApi }),\n    }\n  }\n}\n"],"names":["cloudStoragePlugin","UTApi","generateURL","getHandleDelete","getHandleUpload","getHandler","uploadthingStorage","uploadthingStorageOptions","incomingConfig","enabled","options","acl","adapter","uploadthingInternal","collectionsWithAdapter","Object","entries","collections","reduce","acc","slug","collOptions","config","map","collection","upload","disableLocalStorage","fields","name","type","admin","hidden","utOptions","utApi","handleDelete","handleUpload","staticHandler"],"mappings":"AASA,SAASA,kBAAkB,QAAQ,mCAAkC;AACrE,SAASC,KAAK,QAAQ,qBAAoB;AAE1C,SAASC,WAAW,QAAQ,mBAAkB;AAC9C,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,UAAU,QAAQ,qBAAoB;AA+B/C,OAAO,MAAMC,qBACX,CAACC,4BACD,CAACC;QACC,IAAID,0BAA0BE,OAAO,KAAK,OAAO;YAC/C,OAAOD;QACT;QAEA,6BAA6B;QAC7B,IAAI,CAACD,0BAA0BG,OAAO,CAACC,GAAG,EAAE;YAC1CJ,0BAA0BG,OAAO,CAACC,GAAG,GAAG;QAC1C;QAEA,MAAMC,UAAUC,oBAAoBN,2BAA2BC;QAE/D,+CAA+C;QAC/C,MAAMM,yBAAmEC,OAAOC,OAAO,CACrFT,0BAA0BU,WAAW,EACrCC,MAAM,CACN,CAACC,KAAK,CAACC,MAAMC,YAAY,GAAM,CAAA;gBAC7B,GAAGF,GAAG;gBACN,CAACC,KAAK,EAAE;oBACN,GAAIC,gBAAgB,OAAO,CAAC,IAAIA,WAAW;oBAE3C,sEAAsE;oBACtE,8DAA8D;oBAC9D,4CAA4C;oBAC5C,WAAW;oBAEXT;gBACF;YACF,CAAA,GACA,CAAC;QAGH,gFAAgF;QAChF,MAAMU,SAAS;YACb,GAAGd,cAAc;YACjBS,aAAa,AAACT,CAAAA,eAAeS,WAAW,IAAI,EAAE,AAAD,EAAGM,GAAG,CAAC,CAACC;gBACnD,IAAI,CAACV,sBAAsB,CAACU,WAAWJ,IAAI,CAAC,EAAE;oBAC5C,OAAOI;gBACT;gBAEA,OAAO;oBACL,GAAGA,UAAU;oBACbC,QAAQ;wBACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;wBAClEC,qBAAqB;oBACvB;gBACF;YACF;QACF;QAEA,OAAO1B,mBAAmB;YACxBiB,aAAaH;QACf,GAAGQ;IACL,EAAC;AAEH,SAAST,oBAAoBH,OAAkC,EAAEF,cAAsB;IACrF,MAAMmB,SAAkB;QACtB;YACEC,MAAM;YACNC,MAAM;YACNC,OAAO;gBACLC,QAAQ;YACV;QACF;KACD;IAED,OAAO;QACL,MAAM,EACJrB,SAAS,EAAEC,MAAM,aAAa,EAAE,GAAGqB,WAAW,EAC/C,GAAGtB;QAEJ,MAAMuB,QAAQ,IAAIhC,MAAM+B;QAExB,OAAO;YACLJ,MAAM;YACND;YACAzB;YACAgC,cAAc/B,gBAAgB;gBAAE8B;YAAM;YACtCE,cAAc/B,gBAAgB;gBAAEO;gBAAKsB;YAAM;YAC3CG,eAAe/B,WAAW;gBAAE4B;YAAM;QACpC;IACF;AACF"}