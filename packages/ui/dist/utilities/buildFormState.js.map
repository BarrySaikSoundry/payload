{"version":3,"sources":["../../src/utilities/buildFormState.ts"],"sourcesContent":["import type { DocumentPreferences, Field, FormState, PayloadRequest, TypeWithID } from 'payload'\n\nimport { reduceFieldsToValues } from 'payload/shared'\n\nimport type { BuildFormStateArgs } from '../forms/buildStateFromSchema/index.js'\nimport type { FieldSchemaMap } from './buildFieldSchemaMap/types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport {} from '../exports/client/index.js'\nimport { buildStateFromSchema } from '../forms/buildStateFromSchema/index.js'\nimport { buildFieldSchemaMap } from './buildFieldSchemaMap/index.js'\n\nlet cached = global._payload_fieldSchemaMap\n\nif (!cached) {\n  cached = global._payload_fieldSchemaMap = null\n}\n\nexport const getFieldSchemaMap = (req: PayloadRequest): FieldSchemaMap => {\n  if (cached && process.env.NODE_ENV !== 'development') {\n    return cached\n  }\n\n  cached = buildFieldSchemaMap({\n    config: req.payload.config,\n    i18n: req.i18n,\n  })\n\n  return cached\n}\n\nexport const buildFormState = async ({ req }: { req: PayloadRequest }): Promise<FormState> => {\n  const reqData: BuildFormStateArgs = req.data as BuildFormStateArgs\n  const { collectionSlug, formState, globalSlug, locale, operation, schemaPath } = reqData\n\n  const incomingUserSlug = req.user?.collection\n  const adminUserSlug = req.payload.config.admin.user\n\n  // If we have a user slug, test it against the functions\n  if (incomingUserSlug) {\n    const adminAccessFunction = req.payload.collections[incomingUserSlug].config.access?.admin\n\n    // Run the admin access function from the config if it exists\n    if (adminAccessFunction) {\n      const canAccessAdmin = await adminAccessFunction({ req })\n\n      if (!canAccessAdmin) {\n        throw new Error('Unauthorized')\n      }\n      // Match the user collection to the global admin config\n    } else if (adminUserSlug !== incomingUserSlug) {\n      throw new Error('Unauthorized')\n    }\n  } else {\n    const hasUsers = await req.payload.find({\n      collection: adminUserSlug,\n      depth: 0,\n      limit: 1,\n      pagination: false,\n    })\n    // If there are users, we should not allow access because of /create-first-user\n    if (hasUsers.docs.length) {\n      throw new Error('Unauthorized')\n    }\n  }\n\n  const fieldSchemaMap = getFieldSchemaMap(req)\n\n  const id = collectionSlug ? reqData.id : undefined\n  const schemaPathSegments = schemaPath.split('.')\n\n  let fieldSchema: Field[]\n\n  if (schemaPathSegments.length === 1) {\n    if (req.payload.collections[schemaPath]) {\n      fieldSchema = req.payload.collections[schemaPath].config.fields\n    } else {\n      fieldSchema = req.payload.config.globals.find((global) => global.slug === schemaPath)?.fields\n    }\n  } else if (fieldSchemaMap.has(schemaPath)) {\n    fieldSchema = fieldSchemaMap.get(schemaPath)\n  }\n\n  if (!fieldSchema) {\n    throw new Error('Could not find field schema for given path')\n  }\n\n  let docPreferences = reqData.docPreferences\n  let data = reqData.data\n\n  const promises: {\n    data?: Promise<void>\n    preferences?: Promise<void>\n  } = {}\n\n  // If the request does not include doc preferences,\n  // we should fetch them. This is useful for DocumentInfoProvider\n  // as it reduces the amount of client-side fetches necessary\n  // when we fetch data for the Edit view\n  if (!docPreferences) {\n    let preferencesKey\n\n    if (collectionSlug && id) {\n      preferencesKey = `collection-${collectionSlug}-${id}`\n    }\n\n    if (globalSlug) {\n      preferencesKey = `global-${globalSlug}`\n    }\n\n    if (preferencesKey) {\n      const fetchPreferences = async () => {\n        const preferencesResult = (await req.payload.find({\n          collection: 'payload-preferences',\n          depth: 0,\n          limit: 1,\n          where: {\n            key: {\n              equals: preferencesKey,\n            },\n          },\n        })) as unknown as { docs: { value: DocumentPreferences }[] }\n\n        if (preferencesResult?.docs?.[0]?.value) docPreferences = preferencesResult.docs[0].value\n      }\n\n      promises.preferences = fetchPreferences()\n    }\n  }\n\n  // If there is a form state,\n  // then we can deduce data from that form state\n  if (formState) data = reduceFieldsToValues(formState, true)\n\n  // If we do not have data at this point,\n  // we can fetch it. This is useful for DocumentInfoProvider\n  // to reduce the amount of fetches required\n  if (!data) {\n    const fetchData = async () => {\n      let resolvedData: Record<string, unknown> | TypeWithID\n\n      if (collectionSlug && id) {\n        resolvedData = await req.payload.findByID({\n          id,\n          collection: collectionSlug,\n          depth: 0,\n          draft: true,\n          fallbackLocale: null,\n          locale,\n          overrideAccess: false,\n          user: req.user,\n        })\n      }\n\n      if (globalSlug && schemaPath === globalSlug) {\n        resolvedData = await req.payload.findGlobal({\n          slug: globalSlug,\n          depth: 0,\n          draft: true,\n          fallbackLocale: null,\n          locale,\n          overrideAccess: false,\n          user: req.user,\n        })\n      }\n\n      data = resolvedData\n    }\n\n    promises.data = fetchData()\n  }\n\n  if (Object.keys(promises).length > 0) {\n    await Promise.all(Object.values(promises))\n  }\n\n  const result = await buildStateFromSchema({\n    id,\n    data,\n    fieldSchema,\n    operation,\n    preferences: docPreferences || { fields: {} },\n    req,\n  })\n\n  // Maintain form state of auth / upload fields\n  if (collectionSlug && formState) {\n    if (req.payload.collections[collectionSlug]?.config?.upload && formState.file) {\n      result.file = formState.file\n    }\n\n    if (\n      req.payload.collections[collectionSlug]?.config?.auth &&\n      !req.payload.collections[collectionSlug].config.auth.disableLocalStrategy\n    ) {\n      if (formState.password) result.password = formState.password\n      if (formState['confirm-password']) result['confirm-password'] = formState['confirm-password']\n      if (formState.email) result.email = formState.email\n    }\n  }\n\n  return result\n}\n"],"names":["reduceFieldsToValues","buildStateFromSchema","buildFieldSchemaMap","cached","global","_payload_fieldSchemaMap","getFieldSchemaMap","req","process","env","NODE_ENV","config","payload","i18n","buildFormState","reqData","data","collectionSlug","formState","globalSlug","locale","operation","schemaPath","incomingUserSlug","user","collection","adminUserSlug","admin","adminAccessFunction","collections","access","canAccessAdmin","Error","hasUsers","find","depth","limit","pagination","docs","length","fieldSchemaMap","id","undefined","schemaPathSegments","split","fieldSchema","fields","globals","slug","has","get","docPreferences","promises","preferencesKey","fetchPreferences","preferencesResult","where","key","equals","value","preferences","fetchData","resolvedData","findByID","draft","fallbackLocale","overrideAccess","findGlobal","Object","keys","Promise","all","values","result","upload","file","auth","disableLocalStrategy","password","email"],"mappings":"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"}