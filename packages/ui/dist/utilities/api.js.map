{"version":3,"sources":["../../src/utilities/api.ts"],"sourcesContent":["import * as qs from 'qs-esm'\n\ntype GetOptions = {\n  params?: Record<string, unknown>\n} & RequestInit\n\nexport const requests = {\n  delete: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'delete',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n\n  get: (url: string, options: GetOptions = { headers: {} }): Promise<Response> => {\n    let query = ''\n    if (options.params) {\n      query = qs.stringify(options.params, { addQueryPrefix: true })\n    }\n    return fetch(`${url}${query}`, {\n      credentials: 'include',\n      ...options,\n    })\n  },\n\n  patch: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'PATCH',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n\n  post: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'post',\n    }\n\n    return fetch(`${url}`, formattedOptions)\n  },\n\n  put: (url: string, options: RequestInit = { headers: {} }): Promise<Response> => {\n    const headers = options && options.headers ? { ...options.headers } : {}\n\n    const formattedOptions: RequestInit = {\n      ...options,\n      credentials: 'include',\n      headers: {\n        ...headers,\n      },\n      method: 'put',\n    }\n\n    return fetch(url, formattedOptions)\n  },\n}\n"],"names":["qs","requests","delete","url","options","headers","formattedOptions","credentials","method","fetch","get","query","params","stringify","addQueryPrefix","patch","post","put"],"mappings":"AAAA,YAAYA,QAAQ,SAAQ;AAM5B,OAAO,MAAMC,WAAW;IACtBC,QAAQ,CAACC,KAAaC,UAAuB;QAAEC,SAAS,CAAC;IAAE,CAAC;QAC1D,MAAMA,UAAUD,WAAWA,QAAQC,OAAO,GAAG;YAAE,GAAGD,QAAQC,OAAO;QAAC,IAAI,CAAC;QAEvE,MAAMC,mBAAgC;YACpC,GAAGF,OAAO;YACVG,aAAa;YACbF,SAAS;gBACP,GAAGA,OAAO;YACZ;YACAG,QAAQ;QACV;QAEA,OAAOC,MAAMN,KAAKG;IACpB;IAEAI,KAAK,CAACP,KAAaC,UAAsB;QAAEC,SAAS,CAAC;IAAE,CAAC;QACtD,IAAIM,QAAQ;QACZ,IAAIP,QAAQQ,MAAM,EAAE;YAClBD,QAAQX,GAAGa,SAAS,CAACT,QAAQQ,MAAM,EAAE;gBAAEE,gBAAgB;YAAK;QAC9D;QACA,OAAOL,MAAM,CAAC,EAAEN,IAAI,EAAEQ,MAAM,CAAC,EAAE;YAC7BJ,aAAa;YACb,GAAGH,OAAO;QACZ;IACF;IAEAW,OAAO,CAACZ,KAAaC,UAAuB;QAAEC,SAAS,CAAC;IAAE,CAAC;QACzD,MAAMA,UAAUD,WAAWA,QAAQC,OAAO,GAAG;YAAE,GAAGD,QAAQC,OAAO;QAAC,IAAI,CAAC;QAEvE,MAAMC,mBAAgC;YACpC,GAAGF,OAAO;YACVG,aAAa;YACbF,SAAS;gBACP,GAAGA,OAAO;YACZ;YACAG,QAAQ;QACV;QAEA,OAAOC,MAAMN,KAAKG;IACpB;IAEAU,MAAM,CAACb,KAAaC,UAAuB;QAAEC,SAAS,CAAC;IAAE,CAAC;QACxD,MAAMA,UAAUD,WAAWA,QAAQC,OAAO,GAAG;YAAE,GAAGD,QAAQC,OAAO;QAAC,IAAI,CAAC;QAEvE,MAAMC,mBAAgC;YACpC,GAAGF,OAAO;YACVG,aAAa;YACbF,SAAS;gBACP,GAAGA,OAAO;YACZ;YACAG,QAAQ;QACV;QAEA,OAAOC,MAAM,CAAC,EAAEN,IAAI,CAAC,EAAEG;IACzB;IAEAW,KAAK,CAACd,KAAaC,UAAuB;QAAEC,SAAS,CAAC;IAAE,CAAC;QACvD,MAAMA,UAAUD,WAAWA,QAAQC,OAAO,GAAG;YAAE,GAAGD,QAAQC,OAAO;QAAC,IAAI,CAAC;QAEvE,MAAMC,mBAAgC;YACpC,GAAGF,OAAO;YACVG,aAAa;YACbF,SAAS;gBACP,GAAGA,OAAO;YACZ;YACAG,QAAQ;QACV;QAEA,OAAOC,MAAMN,KAAKG;IACpB;AACF,EAAC"}