{"version":3,"sources":["../../src/utilities/groupNavItems.ts"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type { ClientCollectionConfig, ClientGlobalConfig, Permissions } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\n\nexport enum EntityType {\n  collection = 'collections',\n  global = 'globals',\n}\n\nexport type EntityToGroup =\n  | {\n      entity: ClientCollectionConfig\n      type: EntityType.collection\n    }\n  | {\n      entity: ClientGlobalConfig\n      type: EntityType.global\n    }\n\nexport type Group = {\n  entities: EntityToGroup[]\n  label: string\n}\n\nexport function groupNavItems(\n  entities: EntityToGroup[],\n  permissions: Permissions,\n  i18n: I18nClient,\n): Group[] {\n  const result = entities.reduce(\n    (groups, entityToGroup) => {\n      if (\n        permissions?.[entityToGroup.type.toLowerCase()]?.[entityToGroup.entity.slug]?.read\n          .permission\n      ) {\n        const translatedGroup = getTranslation(entityToGroup.entity.admin.group, i18n)\n        if (entityToGroup.entity.admin.group) {\n          const existingGroup = groups.find(\n            (group) => getTranslation(group.label, i18n) === translatedGroup,\n          ) as Group\n          let matchedGroup: Group = existingGroup\n          if (!existingGroup) {\n            matchedGroup = { entities: [], label: translatedGroup }\n            groups.push(matchedGroup)\n          }\n\n          matchedGroup.entities.push(entityToGroup)\n        } else {\n          const defaultGroup = groups.find((group) => {\n            return getTranslation(group.label, i18n) === i18n.t(`general:${entityToGroup.type}`)\n          }) as Group\n          defaultGroup.entities.push(entityToGroup)\n        }\n      }\n\n      return groups\n    },\n    [\n      {\n        entities: [],\n        label: i18n.t('general:collections'),\n      },\n      {\n        entities: [],\n        label: i18n.t('general:globals'),\n      },\n    ],\n  )\n\n  return result.filter((group) => group.entities.length > 0)\n}\n"],"names":["getTranslation","EntityType","groupNavItems","entities","permissions","i18n","result","reduce","groups","entityToGroup","type","toLowerCase","entity","slug","read","permission","translatedGroup","admin","group","existingGroup","find","label","matchedGroup","push","defaultGroup","t","filter","length"],"mappings":"AAGA,SAASA,cAAc,QAAQ,2BAA0B;;UAE7CC;;;GAAAA,eAAAA;AAoBZ,OAAO,SAASC,cACdC,QAAyB,EACzBC,WAAwB,EACxBC,IAAgB;IAEhB,MAAMC,SAASH,SAASI,MAAM,CAC5B,CAACC,QAAQC;QACP,IACEL,aAAa,CAACK,cAAcC,IAAI,CAACC,WAAW,GAAG,EAAE,CAACF,cAAcG,MAAM,CAACC,IAAI,CAAC,EAAEC,KAC3EC,YACH;YACA,MAAMC,kBAAkBhB,eAAeS,cAAcG,MAAM,CAACK,KAAK,CAACC,KAAK,EAAEb;YACzE,IAAII,cAAcG,MAAM,CAACK,KAAK,CAACC,KAAK,EAAE;gBACpC,MAAMC,gBAAgBX,OAAOY,IAAI,CAC/B,CAACF,QAAUlB,eAAekB,MAAMG,KAAK,EAAEhB,UAAUW;gBAEnD,IAAIM,eAAsBH;gBAC1B,IAAI,CAACA,eAAe;oBAClBG,eAAe;wBAAEnB,UAAU,EAAE;wBAAEkB,OAAOL;oBAAgB;oBACtDR,OAAOe,IAAI,CAACD;gBACd;gBAEAA,aAAanB,QAAQ,CAACoB,IAAI,CAACd;YAC7B,OAAO;gBACL,MAAMe,eAAehB,OAAOY,IAAI,CAAC,CAACF;oBAChC,OAAOlB,eAAekB,MAAMG,KAAK,EAAEhB,UAAUA,KAAKoB,CAAC,CAAC,CAAC,QAAQ,EAAEhB,cAAcC,IAAI,CAAC,CAAC;gBACrF;gBACAc,aAAarB,QAAQ,CAACoB,IAAI,CAACd;YAC7B;QACF;QAEA,OAAOD;IACT,GACA;QACE;YACEL,UAAU,EAAE;YACZkB,OAAOhB,KAAKoB,CAAC,CAAC;QAChB;QACA;YACEtB,UAAU,EAAE;YACZkB,OAAOhB,KAAKoB,CAAC,CAAC;QAChB;KACD;IAGH,OAAOnB,OAAOoB,MAAM,CAAC,CAACR,QAAUA,MAAMf,QAAQ,CAACwB,MAAM,GAAG;AAC1D"}