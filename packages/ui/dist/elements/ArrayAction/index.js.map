{"version":3,"sources":["../../../src/elements/ArrayAction/index.tsx"],"sourcesContent":["'use client'\nimport React from 'react'\n\nimport { ChevronIcon } from '../../icons/Chevron/index.js'\nimport { CopyIcon } from '../../icons/Copy/index.js'\nimport { MoreIcon } from '../../icons/More/index.js'\nimport { PlusIcon } from '../../icons/Plus/index.js'\nimport { XIcon } from '../../icons/X/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { Popup, PopupList } from '../Popup/index.js'\nimport './index.scss'\n\nconst baseClass = 'array-actions'\n\nexport type Props = {\n  addRow: (current: number, blockType?: string) => void\n  duplicateRow: (current: number) => void\n  hasMaxRows: boolean\n  index: number\n  isSortable?: boolean\n  moveRow: (from: number, to: number) => void\n  removeRow: (index: number) => void\n  rowCount: number\n}\n\nexport const ArrayAction: React.FC<Props> = ({\n  addRow,\n  duplicateRow,\n  hasMaxRows,\n  index,\n  isSortable,\n  moveRow,\n  removeRow,\n  rowCount,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Popup\n      button={<MoreIcon />}\n      buttonClassName={`${baseClass}__button`}\n      className={baseClass}\n      horizontalAlign=\"center\"\n      render={({ close }) => {\n        return (\n          <PopupList.ButtonGroup buttonSize=\"small\">\n            {isSortable && index !== 0 && (\n              <PopupList.Button\n                className={`${baseClass}__action ${baseClass}__move-up`}\n                onClick={() => {\n                  moveRow(index, index - 1)\n                  close()\n                }}\n              >\n                <div className={`${baseClass}__action-chevron`}>\n                  <ChevronIcon direction=\"up\" />\n                </div>\n                {t('general:moveUp')}\n              </PopupList.Button>\n            )}\n            {isSortable && index < rowCount - 1 && (\n              <PopupList.Button\n                className={`${baseClass}__action`}\n                onClick={() => {\n                  moveRow(index, index + 1)\n                  close()\n                }}\n              >\n                <div className={`${baseClass}__action-chevron`}>\n                  <ChevronIcon />\n                </div>\n                {t('general:moveDown')}\n              </PopupList.Button>\n            )}\n            {!hasMaxRows && (\n              <React.Fragment>\n                <PopupList.Button\n                  className={`${baseClass}__action ${baseClass}__add`}\n                  onClick={() => {\n                    addRow(index + 1)\n                    close()\n                  }}\n                >\n                  <PlusIcon />\n                  {t('general:addBelow')}\n                </PopupList.Button>\n                <PopupList.Button\n                  className={`${baseClass}__action ${baseClass}__duplicate`}\n                  onClick={() => {\n                    duplicateRow(index)\n                    close()\n                  }}\n                >\n                  <CopyIcon />\n                  {t('general:duplicate')}\n                </PopupList.Button>\n              </React.Fragment>\n            )}\n            <PopupList.Button\n              className={`${baseClass}__action ${baseClass}__remove`}\n              onClick={() => {\n                removeRow(index)\n                close()\n              }}\n            >\n              <XIcon />\n              {t('general:remove')}\n            </PopupList.Button>\n          </PopupList.ButtonGroup>\n        )\n      }}\n      size=\"medium\"\n    />\n  )\n}\n"],"names":["React","ChevronIcon","CopyIcon","MoreIcon","PlusIcon","XIcon","useTranslation","Popup","PopupList","baseClass","ArrayAction","addRow","duplicateRow","hasMaxRows","index","isSortable","moveRow","removeRow","rowCount","t","button","buttonClassName","className","horizontalAlign","render","close","ButtonGroup","buttonSize","Button","onClick","div","direction","Fragment","size"],"mappings":"AAAA;;AACA,OAAOA,WAAW,QAAO;AAEzB,SAASC,WAAW,QAAQ,+BAA8B;AAC1D,SAASC,QAAQ,QAAQ,4BAA2B;AACpD,SAASC,QAAQ,QAAQ,4BAA2B;AACpD,SAASC,QAAQ,QAAQ,4BAA2B;AACpD,SAASC,KAAK,QAAQ,yBAAwB;AAC9C,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,KAAK,EAAEC,SAAS,QAAQ,oBAAmB;AACpD,OAAO,eAAc;AAErB,MAAMC,YAAY;AAalB,OAAO,MAAMC,cAA+B,CAAC,EAC3CC,MAAM,EACNC,YAAY,EACZC,UAAU,EACVC,KAAK,EACLC,UAAU,EACVC,OAAO,EACPC,SAAS,EACTC,QAAQ,EACT;IACC,MAAM,EAAEC,CAAC,EAAE,GAAGb;IAEd,qBACE,KAACC;QACCa,sBAAQ,KAACjB;QACTkB,iBAAiB,CAAC,EAAEZ,UAAU,QAAQ,CAAC;QACvCa,WAAWb;QACXc,iBAAgB;QAChBC,QAAQ,CAAC,EAAEC,KAAK,EAAE;YAChB,qBACE,MAACjB,UAAUkB,WAAW;gBAACC,YAAW;;oBAC/BZ,cAAcD,UAAU,mBACvB,MAACN,UAAUoB,MAAM;wBACfN,WAAW,CAAC,EAAEb,UAAU,SAAS,EAAEA,UAAU,SAAS,CAAC;wBACvDoB,SAAS;4BACPb,QAAQF,OAAOA,QAAQ;4BACvBW;wBACF;;0CAEA,KAACK;gCAAIR,WAAW,CAAC,EAAEb,UAAU,gBAAgB,CAAC;0CAC5C,cAAA,KAACR;oCAAY8B,WAAU;;;4BAExBZ,EAAE;;;oBAGNJ,cAAcD,QAAQI,WAAW,mBAChC,MAACV,UAAUoB,MAAM;wBACfN,WAAW,CAAC,EAAEb,UAAU,QAAQ,CAAC;wBACjCoB,SAAS;4BACPb,QAAQF,OAAOA,QAAQ;4BACvBW;wBACF;;0CAEA,KAACK;gCAAIR,WAAW,CAAC,EAAEb,UAAU,gBAAgB,CAAC;0CAC5C,cAAA,KAACR;;4BAEFkB,EAAE;;;oBAGN,CAACN,4BACA,MAACb,MAAMgC,QAAQ;;0CACb,MAACxB,UAAUoB,MAAM;gCACfN,WAAW,CAAC,EAAEb,UAAU,SAAS,EAAEA,UAAU,KAAK,CAAC;gCACnDoB,SAAS;oCACPlB,OAAOG,QAAQ;oCACfW;gCACF;;kDAEA,KAACrB;oCACAe,EAAE;;;0CAEL,MAACX,UAAUoB,MAAM;gCACfN,WAAW,CAAC,EAAEb,UAAU,SAAS,EAAEA,UAAU,WAAW,CAAC;gCACzDoB,SAAS;oCACPjB,aAAaE;oCACbW;gCACF;;kDAEA,KAACvB;oCACAiB,EAAE;;;;;kCAIT,MAACX,UAAUoB,MAAM;wBACfN,WAAW,CAAC,EAAEb,UAAU,SAAS,EAAEA,UAAU,QAAQ,CAAC;wBACtDoB,SAAS;4BACPZ,UAAUH;4BACVW;wBACF;;0CAEA,KAACpB;4BACAc,EAAE;;;;;QAIX;QACAc,MAAK;;AAGX,EAAC"}