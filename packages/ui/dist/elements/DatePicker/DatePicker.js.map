{"version":3,"sources":["../../../src/elements/DatePicker/DatePicker.tsx"],"sourcesContent":["'use client'\nimport type { ReactDatePickerProps } from 'react-datepicker'\n\nimport React from 'react'\nimport ReactDatePickerDefaultImport, { registerLocale } from 'react-datepicker'\nconst ReactDatePicker = (ReactDatePickerDefaultImport.default ||\n  ReactDatePickerDefaultImport) as unknown as typeof ReactDatePickerDefaultImport.default\nimport 'react-datepicker/dist/react-datepicker.css'\n\nimport type { Props } from './types.js'\n\nimport { CalendarIcon } from '../../icons/Calendar/index.js'\nimport { XIcon } from '../../icons/X/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { getFormattedLocale } from './getFormattedLocale.js'\nimport './index.scss'\n\nconst baseClass = 'date-time-picker'\n\nconst DatePicker: React.FC<Props> = (props) => {\n  const {\n    displayFormat: customDisplayFormat,\n    maxDate,\n    maxTime,\n    minDate,\n    minTime,\n    monthsToShow = 1,\n    onChange: onChangeFromProps,\n    overrides,\n    pickerAppearance = 'default',\n    placeholder: placeholderText,\n    readOnly,\n    timeFormat = 'h:mm aa',\n    timeIntervals = 30,\n    value,\n  } = props\n\n  // Use the user's AdminUI language preference for the locale\n  const { i18n } = useTranslation()\n\n  const datepickerLocale = getFormattedLocale(i18n.language)\n\n  try {\n    registerLocale(datepickerLocale, i18n.dateFNS)\n  } catch (e) {\n    console.warn(`Could not find DatePicker locale for ${i18n.language}`)\n  }\n\n  let dateFormat = customDisplayFormat\n\n  if (!customDisplayFormat) {\n    // when no displayFormat is provided, determine format based on the picker appearance\n    if (pickerAppearance === 'default') dateFormat = 'MM/dd/yyyy'\n    else if (pickerAppearance === 'dayAndTime') dateFormat = 'MMM d, yyy h:mm a'\n    else if (pickerAppearance === 'timeOnly') dateFormat = 'h:mm a'\n    else if (pickerAppearance === 'dayOnly') dateFormat = 'MMM dd'\n    else if (pickerAppearance === 'monthOnly') dateFormat = 'MMMM'\n  }\n\n  const onChange = (incomingDate: Date) => {\n    const newDate = incomingDate\n    if (newDate instanceof Date && ['dayOnly', 'default', 'monthOnly'].includes(pickerAppearance)) {\n      const tzOffset = incomingDate.getTimezoneOffset() / 60\n      newDate.setHours(12 - tzOffset, 0)\n    }\n    if (typeof onChangeFromProps === 'function') onChangeFromProps(newDate)\n  }\n\n  const dateTimePickerProps: ReactDatePickerProps = {\n    customInputRef: 'ref',\n    dateFormat,\n    disabled: readOnly,\n    maxDate,\n    maxTime,\n    minDate,\n    minTime,\n    monthsShown: Math.min(2, monthsToShow),\n    onChange,\n    placeholderText,\n    popperPlacement: 'bottom-start',\n    selected: value && new Date(value),\n    showMonthYearPicker: pickerAppearance === 'monthOnly',\n    showPopperArrow: false,\n    showTimeSelect: pickerAppearance === 'dayAndTime' || pickerAppearance === 'timeOnly',\n    timeFormat,\n    timeIntervals,\n    ...overrides,\n  }\n\n  const classes = [baseClass, `${baseClass}__appearance--${pickerAppearance}`]\n    .filter(Boolean)\n    .join(' ')\n\n  return (\n    <div className={classes}>\n      <div className={`${baseClass}__icon-wrap`}>\n        {dateTimePickerProps.selected && (\n          <button\n            className={`${baseClass}__clear-button`}\n            onClick={() => onChange(null)}\n            type=\"button\"\n          >\n            <XIcon />\n          </button>\n        )}\n        <CalendarIcon />\n      </div>\n      <div className={`${baseClass}__input-wrapper`}>\n        <ReactDatePicker\n          {...dateTimePickerProps}\n          dropdownMode=\"select\"\n          locale={datepickerLocale}\n          showMonthDropdown\n          showYearDropdown\n        />\n      </div>\n    </div>\n  )\n}\n\n// eslint-disable-next-line no-restricted-exports\nexport default DatePicker\n"],"names":["React","ReactDatePickerDefaultImport","registerLocale","ReactDatePicker","default","CalendarIcon","XIcon","useTranslation","getFormattedLocale","baseClass","DatePicker","props","displayFormat","customDisplayFormat","maxDate","maxTime","minDate","minTime","monthsToShow","onChange","onChangeFromProps","overrides","pickerAppearance","placeholder","placeholderText","readOnly","timeFormat","timeIntervals","value","i18n","datepickerLocale","language","dateFNS","e","console","warn","dateFormat","incomingDate","newDate","Date","includes","tzOffset","getTimezoneOffset","setHours","dateTimePickerProps","customInputRef","disabled","monthsShown","Math","min","popperPlacement","selected","showMonthYearPicker","showPopperArrow","showTimeSelect","classes","filter","Boolean","join","div","className","button","onClick","type","dropdownMode","locale","showMonthDropdown","showYearDropdown"],"mappings":"AAAA;;AAGA,OAAOA,WAAW,QAAO;AACzB,OAAOC,gCAAgCC,cAAc,QAAQ,mBAAkB;AAC/E,MAAMC,kBAAmBF,6BAA6BG,OAAO,IAC3DH;AACF,OAAO,6CAA4C;AAInD,SAASI,YAAY,QAAQ,gCAA+B;AAC5D,SAASC,KAAK,QAAQ,yBAAwB;AAC9C,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,kBAAkB,QAAQ,0BAAyB;AAC5D,OAAO,eAAc;AAErB,MAAMC,YAAY;AAElB,MAAMC,aAA8B,CAACC;IACnC,MAAM,EACJC,eAAeC,mBAAmB,EAClCC,OAAO,EACPC,OAAO,EACPC,OAAO,EACPC,OAAO,EACPC,eAAe,CAAC,EAChBC,UAAUC,iBAAiB,EAC3BC,SAAS,EACTC,mBAAmB,SAAS,EAC5BC,aAAaC,eAAe,EAC5BC,QAAQ,EACRC,aAAa,SAAS,EACtBC,gBAAgB,EAAE,EAClBC,KAAK,EACN,GAAGjB;IAEJ,4DAA4D;IAC5D,MAAM,EAAEkB,IAAI,EAAE,GAAGtB;IAEjB,MAAMuB,mBAAmBtB,mBAAmBqB,KAAKE,QAAQ;IAEzD,IAAI;QACF7B,eAAe4B,kBAAkBD,KAAKG,OAAO;IAC/C,EAAE,OAAOC,GAAG;QACVC,QAAQC,IAAI,CAAC,CAAC,qCAAqC,EAAEN,KAAKE,QAAQ,CAAC,CAAC;IACtE;IAEA,IAAIK,aAAavB;IAEjB,IAAI,CAACA,qBAAqB;QACxB,qFAAqF;QACrF,IAAIS,qBAAqB,WAAWc,aAAa;aAC5C,IAAId,qBAAqB,cAAcc,aAAa;aACpD,IAAId,qBAAqB,YAAYc,aAAa;aAClD,IAAId,qBAAqB,WAAWc,aAAa;aACjD,IAAId,qBAAqB,aAAac,aAAa;IAC1D;IAEA,MAAMjB,WAAW,CAACkB;QAChB,MAAMC,UAAUD;QAChB,IAAIC,mBAAmBC,QAAQ;YAAC;YAAW;YAAW;SAAY,CAACC,QAAQ,CAAClB,mBAAmB;YAC7F,MAAMmB,WAAWJ,aAAaK,iBAAiB,KAAK;YACpDJ,QAAQK,QAAQ,CAAC,KAAKF,UAAU;QAClC;QACA,IAAI,OAAOrB,sBAAsB,YAAYA,kBAAkBkB;IACjE;IAEA,MAAMM,sBAA4C;QAChDC,gBAAgB;QAChBT;QACAU,UAAUrB;QACVX;QACAC;QACAC;QACAC;QACA8B,aAAaC,KAAKC,GAAG,CAAC,GAAG/B;QACzBC;QACAK;QACA0B,iBAAiB;QACjBC,UAAUvB,SAAS,IAAIW,KAAKX;QAC5BwB,qBAAqB9B,qBAAqB;QAC1C+B,iBAAiB;QACjBC,gBAAgBhC,qBAAqB,gBAAgBA,qBAAqB;QAC1EI;QACAC;QACA,GAAGN,SAAS;IACd;IAEA,MAAMkC,UAAU;QAAC9C;QAAW,CAAC,EAAEA,UAAU,cAAc,EAAEa,iBAAiB,CAAC;KAAC,CACzEkC,MAAM,CAACC,SACPC,IAAI,CAAC;IAER,qBACE,MAACC;QAAIC,WAAWL;;0BACd,MAACI;gBAAIC,WAAW,CAAC,EAAEnD,UAAU,WAAW,CAAC;;oBACtCmC,oBAAoBO,QAAQ,kBAC3B,KAACU;wBACCD,WAAW,CAAC,EAAEnD,UAAU,cAAc,CAAC;wBACvCqD,SAAS,IAAM3C,SAAS;wBACxB4C,MAAK;kCAEL,cAAA,KAACzD;;kCAGL,KAACD;;;0BAEH,KAACsD;gBAAIC,WAAW,CAAC,EAAEnD,UAAU,eAAe,CAAC;0BAC3C,cAAA,KAACN;oBACE,GAAGyC,mBAAmB;oBACvBoB,cAAa;oBACbC,QAAQnC;oBACRoC,iBAAiB;oBACjBC,gBAAgB;;;;;AAK1B;AAEA,iDAAiD;AACjD,eAAezD,WAAU"}