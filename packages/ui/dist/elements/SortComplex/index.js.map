{"version":3,"sources":["../../../src/elements/SortComplex/index.tsx"],"sourcesContent":["'use client'\nimport type { OptionObject, SanitizedCollectionConfig } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\n// TODO: abstract the `next/navigation` dependency out from this component\nimport { usePathname, useRouter } from 'next/navigation.js'\nimport { sortableFieldTypes } from 'payload'\nimport { fieldAffectsData } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useEffect, useState } from 'react'\n\nexport type SortComplexProps = {\n  collection: SanitizedCollectionConfig\n  handleChange?: (sort: string) => void\n  modifySearchQuery?: boolean\n  sort?: string\n}\n\nimport type { Option } from '../ReactSelect/index.js'\n\nimport { useSearchParams } from '../../providers/SearchParams/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { ReactSelect } from '../ReactSelect/index.js'\nimport './index.scss'\n\nconst baseClass = 'sort-complex'\n\nexport const SortComplex: React.FC<SortComplexProps> = (props) => {\n  const { collection, handleChange, modifySearchQuery = true } = props\n\n  const router = useRouter()\n  const pathname = usePathname()\n  const { searchParams } = useSearchParams()\n  const { i18n, t } = useTranslation()\n  const [sortOptions, setSortOptions] = useState<OptionObject[]>()\n\n  const [sortFields] = useState(() =>\n    collection.fields.reduce((fields, field) => {\n      if (fieldAffectsData(field) && sortableFieldTypes.indexOf(field.type) > -1) {\n        return [\n          ...fields,\n          { label: getTranslation(field.label || field.name, i18n), value: field.name },\n        ]\n      }\n      return fields\n    }, []),\n  )\n\n  const [sortField, setSortField] = useState(sortFields[0])\n  const [initialSort] = useState<Option>(() => ({ label: t('general:descending'), value: '-' }))\n  const [sortOrder, setSortOrder] = useState(initialSort)\n\n  useEffect(() => {\n    if (sortField?.value) {\n      const newSortValue = `${sortOrder.value}${sortField.value}`\n\n      if (handleChange) handleChange(newSortValue)\n\n      if (searchParams.sort !== newSortValue && modifySearchQuery) {\n        const search = qs.stringify(\n          {\n            ...searchParams,\n            sort: newSortValue,\n          },\n          { addQueryPrefix: true },\n        )\n\n        router.replace(`${pathname}${search}`)\n      }\n    }\n  }, [pathname, router, searchParams, sortField, sortOrder, modifySearchQuery, handleChange])\n\n  useEffect(() => {\n    setSortOptions([\n      { label: t('general:ascending'), value: '' },\n      { label: t('general:descending'), value: '-' },\n    ])\n  }, [i18n, t])\n\n  return (\n    <div className={baseClass}>\n      <React.Fragment>\n        <div className={`${baseClass}__wrap`}>\n          <div className={`${baseClass}__select`}>\n            <div className={`${baseClass}__label`}>{t('general:columnToSort')}</div>\n            <ReactSelect onChange={setSortField} options={sortFields} value={sortField} />\n          </div>\n          <div className={`${baseClass}__select`}>\n            <div className={`${baseClass}__label`}>{t('general:order')}</div>\n            <ReactSelect\n              onChange={(incomingSort: Option) => {\n                setSortOrder(incomingSort || initialSort)\n              }}\n              options={sortOptions}\n              value={sortOrder}\n            />\n          </div>\n        </div>\n      </React.Fragment>\n    </div>\n  )\n}\n"],"names":["getTranslation","usePathname","useRouter","sortableFieldTypes","fieldAffectsData","qs","React","useEffect","useState","useSearchParams","useTranslation","ReactSelect","baseClass","SortComplex","props","collection","handleChange","modifySearchQuery","router","pathname","searchParams","i18n","t","sortOptions","setSortOptions","sortFields","fields","reduce","field","indexOf","type","label","name","value","sortField","setSortField","initialSort","sortOrder","setSortOrder","newSortValue","sort","search","stringify","addQueryPrefix","replace","div","className","Fragment","onChange","options","incomingSort"],"mappings":"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"}