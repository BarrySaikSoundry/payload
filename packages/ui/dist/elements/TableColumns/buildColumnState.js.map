{"version":3,"sources":["../../../src/elements/TableColumns/buildColumnState.tsx"],"sourcesContent":["'use client'\nimport { type CellComponentProps, type SanitizedCollectionConfig } from 'payload'\nimport React from 'react'\n\nimport type { FieldMap, MappedField } from '../../providers/ComponentMap/buildComponentMap/types.js'\nimport type { ColumnPreferences } from '../../providers/ListInfo/index.js'\nimport type { Column } from '../Table/index.js'\n\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { flattenFieldMap } from '../../utilities/flattenFieldMap.js'\nimport { SelectAll } from '../SelectAll/index.js'\nimport { SelectRow } from '../SelectRow/index.js'\nimport { SortColumn } from '../SortColumn/index.js'\nimport { DefaultCell } from '../Table/DefaultCell/index.js'\n\nconst fieldIsPresentationalOnly = (field: MappedField): boolean => field.type === 'ui'\n\ntype Args = {\n  cellProps: Partial<CellComponentProps>[]\n  columnPreferences: ColumnPreferences\n  columns?: ColumnPreferences\n  enableRowSelections: boolean\n  fieldMap: FieldMap\n  useAsTitle: SanitizedCollectionConfig['admin']['useAsTitle']\n}\nexport const buildColumnState = (args: Args): Column[] => {\n  const { cellProps, columnPreferences, columns, enableRowSelections, fieldMap, useAsTitle } = args\n\n  let sortedFieldMap = flattenFieldMap(fieldMap)\n\n  // place the `ID` field first, if it exists\n  // do the same for the `useAsTitle` field with precedence over the `ID` field\n  // then sort the rest of the fields based on the `defaultColumns` or `columnPreferences`\n  const idFieldIndex = sortedFieldMap.findIndex((field) => field.name === 'id')\n\n  if (idFieldIndex > -1) {\n    const idField = sortedFieldMap.splice(idFieldIndex, 1)[0]\n    sortedFieldMap.unshift(idField)\n  }\n\n  const useAsTitleFieldIndex = useAsTitle\n    ? sortedFieldMap.findIndex((field) => field.name === useAsTitle)\n    : -1\n\n  if (useAsTitleFieldIndex > -1) {\n    const useAsTitleField = sortedFieldMap.splice(useAsTitleFieldIndex, 1)[0]\n    sortedFieldMap.unshift(useAsTitleField)\n  }\n\n  const sortTo = columnPreferences || columns\n\n  if (sortTo) {\n    // sort the fields to the order of `defaultColumns` or `columnPreferences`\n    sortedFieldMap = sortedFieldMap.sort((a, b) => {\n      const aIndex = sortTo.findIndex((column) => 'name' in a && column.accessor === a.name)\n      const bIndex = sortTo.findIndex((column) => 'name' in b && column.accessor === b.name)\n      if (aIndex === -1 && bIndex === -1) return 0\n      if (aIndex === -1) return 1\n      if (bIndex === -1) return -1\n      return aIndex - bIndex\n    })\n  }\n\n  const activeColumnsIndices = []\n\n  const sorted = sortedFieldMap.reduce((acc, field, index) => {\n    const columnPreference = columnPreferences?.find(\n      (preference) => 'name' in field && preference.accessor === field.name,\n    )\n\n    let active = false\n\n    if (columnPreference) {\n      active = columnPreference.active\n    } else if (columns && Array.isArray(columns) && columns.length > 0) {\n      active = columns.find((column) => column.accessor === field.name)?.active\n    } else if (activeColumnsIndices.length < 4) {\n      active = true\n    }\n\n    if (active && !activeColumnsIndices.includes(index)) {\n      activeColumnsIndices.push(index)\n    }\n\n    const isFirstActiveColumn = activeColumnsIndices[0] === index\n\n    const name = 'name' in field ? field.name : undefined\n\n    const Cell =\n      field.CustomCell !== undefined ? (\n        field.CustomCell\n      ) : (\n        <DefaultCell {...field.cellComponentProps} />\n      )\n\n    const CustomLabelToRender =\n      field &&\n      'fieldComponentProps' in field &&\n      'CustomLabel' in field.fieldComponentProps &&\n      field.fieldComponentProps.CustomLabel !== undefined\n        ? field.fieldComponentProps.CustomLabel\n        : undefined\n\n    const Label = (\n      <FieldLabel\n        CustomLabel={CustomLabelToRender}\n        label={field.fieldComponentProps?.label}\n        {...(field.fieldComponentProps?.labelProps || {})}\n        unstyled\n      />\n    )\n\n    const fieldAffectsDataSubFields =\n      field &&\n      field.type &&\n      (field.type === 'array' || field.type === 'group' || field.type === 'blocks')\n\n    const Heading = (\n      <SortColumn\n        Label={Label}\n        disable={fieldAffectsDataSubFields || fieldIsPresentationalOnly(field) || undefined}\n        label={\n          'fieldComponentProps' in field && 'label' in field.fieldComponentProps\n            ? field.fieldComponentProps.label\n            : undefined\n        }\n        name={'name' in field ? field.name : undefined}\n      />\n    )\n\n    if (field) {\n      const column: Column = {\n        name,\n        type: field.type,\n        Label,\n        accessor: name,\n        active,\n        admin: {\n          disableListColumn: field.disableListColumn,\n          disableListFilter: field.disableListFilter,\n        },\n        cellProps: {\n          ...field.cellComponentProps,\n          ...cellProps?.[index],\n          link: isFirstActiveColumn,\n          relationTo:\n            field.type === 'relationship' && 'relationTo' in field.fieldComponentProps\n              ? field.fieldComponentProps.relationTo\n              : undefined,\n        },\n        components: {\n          Cell,\n          Heading,\n        },\n      }\n\n      acc.push(column)\n    }\n\n    return acc\n  }, [])\n\n  if (enableRowSelections) {\n    sorted.unshift({\n      name: '',\n      accessor: '_select',\n      active: true,\n      components: {\n        Cell: <SelectRow />,\n        Heading: <SelectAll />,\n      },\n      label: null,\n    })\n  }\n\n  return sorted\n}\n"],"names":["React","FieldLabel","flattenFieldMap","SelectAll","SelectRow","SortColumn","DefaultCell","fieldIsPresentationalOnly","field","type","buildColumnState","args","cellProps","columnPreferences","columns","enableRowSelections","fieldMap","useAsTitle","sortedFieldMap","idFieldIndex","findIndex","name","idField","splice","unshift","useAsTitleFieldIndex","useAsTitleField","sortTo","sort","a","b","aIndex","column","accessor","bIndex","activeColumnsIndices","sorted","reduce","acc","index","columnPreference","find","preference","active","Array","isArray","length","includes","push","isFirstActiveColumn","undefined","Cell","CustomCell","cellComponentProps","CustomLabelToRender","fieldComponentProps","CustomLabel","Label","label","labelProps","unstyled","fieldAffectsDataSubFields","Heading","disable","admin","disableListColumn","disableListFilter","link","relationTo","components"],"mappings":"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"}