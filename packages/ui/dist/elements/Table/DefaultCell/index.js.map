{"version":3,"sources":["../../../../src/elements/Table/DefaultCell/index.tsx"],"sourcesContent":["'use client'\nimport LinkImport from 'next/link.js'\nimport React from 'react' // TODO: abstract this out to support all routers\n\nimport type { CellComponentProps, DefaultCellComponentProps } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\n\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { useTableCell } from '../TableCellProvider/index.js'\nimport { CodeCell } from './fields/Code/index.js'\nimport { cellComponents } from './fields/index.js'\n\nconst Link = (LinkImport.default || LinkImport) as unknown as typeof LinkImport.default\n\nexport const DefaultCell: React.FC<CellComponentProps> = (props) => {\n  const {\n    name,\n    className: classNameFromProps,\n    fieldType,\n    isFieldAffectingData,\n    label,\n    onClick: onClickFromProps,\n  } = props\n\n  const { i18n } = useTranslation()\n\n  const {\n    routes: { admin: adminRoute },\n  } = useConfig()\n\n  const cellContext = useTableCell()\n\n  const { cellData, cellProps, columnIndex, customCellContext, rowData } = cellContext || {}\n\n  const { className: classNameFromContext, link, onClick: onClickFromContext } = cellProps || {}\n\n  const className = classNameFromProps || classNameFromContext\n\n  const onClick = onClickFromProps || onClickFromContext\n\n  let WrapElement: React.ComponentType<any> | string = 'span'\n\n  const wrapElementProps: {\n    className?: string\n    href?: string\n    onClick?: () => void\n    type?: 'button'\n  } = {\n    className,\n  }\n\n  const isLink = link !== undefined ? link : columnIndex === 0\n\n  if (isLink) {\n    WrapElement = Link\n    wrapElementProps.href = customCellContext?.collectionSlug\n      ? `${adminRoute}/collections/${customCellContext?.collectionSlug}/${rowData.id}`\n      : ''\n  }\n\n  if (typeof onClick === 'function') {\n    WrapElement = 'button'\n    wrapElementProps.type = 'button'\n    wrapElementProps.onClick = () => {\n      onClick({\n        cellData,\n        collectionSlug: customCellContext?.collectionSlug,\n        rowData,\n      })\n    }\n  }\n\n  if (name === 'id') {\n    return (\n      <WrapElement {...wrapElementProps}>\n        <CodeCell\n          cellData={`ID: ${cellData}`}\n          name={name}\n          nowrap\n          rowData={rowData}\n          schemaPath={cellContext?.cellProps?.schemaPath}\n        />\n      </WrapElement>\n    )\n  }\n\n  const DefaultCellComponent: React.FC<DefaultCellComponentProps> =\n    typeof cellData !== 'undefined' && cellComponents[fieldType]\n\n  let CellComponent: React.ReactNode = null\n\n  if (DefaultCellComponent) {\n    CellComponent = (\n      <DefaultCellComponent\n        cellData={cellData}\n        customCellContext={customCellContext}\n        rowData={rowData}\n        {...props}\n      />\n    )\n  } else if (!DefaultCellComponent) {\n    // DefaultCellComponent does not exist for certain field types like `text`\n    if (customCellContext.uploadConfig && isFieldAffectingData && name === 'filename') {\n      const FileCellComponent = cellComponents.File\n      CellComponent = (\n        <FileCellComponent\n          cellData={cellData}\n          customCellContext={customCellContext}\n          rowData={rowData}\n          {...props}\n        />\n      )\n    } else {\n      return (\n        <WrapElement {...wrapElementProps}>\n          {(cellData === '' || typeof cellData === 'undefined') &&\n            'label' in props &&\n            i18n.t('general:noLabel', {\n              label: getTranslation(label || 'data', i18n),\n            })}\n          {typeof cellData === 'string' && cellData}\n          {typeof cellData === 'number' && cellData}\n          {typeof cellData === 'object' && JSON.stringify(cellData)}\n        </WrapElement>\n      )\n    }\n  }\n\n  return <WrapElement {...wrapElementProps}>{CellComponent}</WrapElement>\n}\n"],"names":["LinkImport","React","getTranslation","useConfig","useTranslation","useTableCell","CodeCell","cellComponents","Link","default","DefaultCell","props","name","className","classNameFromProps","fieldType","isFieldAffectingData","label","onClick","onClickFromProps","i18n","routes","admin","adminRoute","cellContext","cellData","cellProps","columnIndex","customCellContext","rowData","classNameFromContext","link","onClickFromContext","WrapElement","wrapElementProps","isLink","undefined","href","collectionSlug","id","type","nowrap","schemaPath","DefaultCellComponent","CellComponent","uploadConfig","FileCellComponent","File","t","JSON","stringify"],"mappings":"AAAA;;AACA,OAAOA,gBAAgB,eAAc;AACrC,OAAOC,WAAW,QAAO,CAAC,iDAAiD;AAI3E,SAASC,cAAc,QAAQ,2BAA0B;AAEzD,SAASC,SAAS,QAAQ,qCAAoC;AAC9D,SAASC,cAAc,QAAQ,0CAAyC;AACxE,SAASC,YAAY,QAAQ,gCAA+B;AAC5D,SAASC,QAAQ,QAAQ,yBAAwB;AACjD,SAASC,cAAc,QAAQ,oBAAmB;AAElD,MAAMC,OAAQR,WAAWS,OAAO,IAAIT;AAEpC,OAAO,MAAMU,cAA4C,CAACC;IACxD,MAAM,EACJC,IAAI,EACJC,WAAWC,kBAAkB,EAC7BC,SAAS,EACTC,oBAAoB,EACpBC,KAAK,EACLC,SAASC,gBAAgB,EAC1B,GAAGR;IAEJ,MAAM,EAAES,IAAI,EAAE,GAAGhB;IAEjB,MAAM,EACJiB,QAAQ,EAAEC,OAAOC,UAAU,EAAE,EAC9B,GAAGpB;IAEJ,MAAMqB,cAAcnB;IAEpB,MAAM,EAAEoB,QAAQ,EAAEC,SAAS,EAAEC,WAAW,EAAEC,iBAAiB,EAAEC,OAAO,EAAE,GAAGL,eAAe,CAAC;IAEzF,MAAM,EAAEX,WAAWiB,oBAAoB,EAAEC,IAAI,EAAEb,SAASc,kBAAkB,EAAE,GAAGN,aAAa,CAAC;IAE7F,MAAMb,YAAYC,sBAAsBgB;IAExC,MAAMZ,UAAUC,oBAAoBa;IAEpC,IAAIC,cAAiD;IAErD,MAAMC,mBAKF;QACFrB;IACF;IAEA,MAAMsB,SAASJ,SAASK,YAAYL,OAAOJ,gBAAgB;IAE3D,IAAIQ,QAAQ;QACVF,cAAczB;QACd0B,iBAAiBG,IAAI,GAAGT,mBAAmBU,iBACvC,CAAC,EAAEf,WAAW,aAAa,EAAEK,mBAAmBU,eAAe,CAAC,EAAET,QAAQU,EAAE,CAAC,CAAC,GAC9E;IACN;IAEA,IAAI,OAAOrB,YAAY,YAAY;QACjCe,cAAc;QACdC,iBAAiBM,IAAI,GAAG;QACxBN,iBAAiBhB,OAAO,GAAG;YACzBA,QAAQ;gBACNO;gBACAa,gBAAgBV,mBAAmBU;gBACnCT;YACF;QACF;IACF;IAEA,IAAIjB,SAAS,MAAM;QACjB,qBACE,KAACqB;YAAa,GAAGC,gBAAgB;sBAC/B,cAAA,KAAC5B;gBACCmB,UAAU,CAAC,IAAI,EAAEA,SAAS,CAAC;gBAC3Bb,MAAMA;gBACN6B,MAAM;gBACNZ,SAASA;gBACTa,YAAYlB,aAAaE,WAAWgB;;;IAI5C;IAEA,MAAMC,uBACJ,OAAOlB,aAAa,eAAelB,cAAc,CAACQ,UAAU;IAE9D,IAAI6B,gBAAiC;IAErC,IAAID,sBAAsB;QACxBC,8BACE,KAACD;YACClB,UAAUA;YACVG,mBAAmBA;YACnBC,SAASA;YACR,GAAGlB,KAAK;;IAGf,OAAO,IAAI,CAACgC,sBAAsB;QAChC,0EAA0E;QAC1E,IAAIf,kBAAkBiB,YAAY,IAAI7B,wBAAwBJ,SAAS,YAAY;YACjF,MAAMkC,oBAAoBvC,eAAewC,IAAI;YAC7CH,8BACE,KAACE;gBACCrB,UAAUA;gBACVG,mBAAmBA;gBACnBC,SAASA;gBACR,GAAGlB,KAAK;;QAGf,OAAO;YACL,qBACE,MAACsB;gBAAa,GAAGC,gBAAgB;;oBAC7BT,CAAAA,aAAa,MAAM,OAAOA,aAAa,WAAU,KACjD,WAAWd,SACXS,KAAK4B,CAAC,CAAC,mBAAmB;wBACxB/B,OAAOf,eAAee,SAAS,QAAQG;oBACzC;oBACD,OAAOK,aAAa,YAAYA;oBAChC,OAAOA,aAAa,YAAYA;oBAChC,OAAOA,aAAa,YAAYwB,KAAKC,SAAS,CAACzB;;;QAGtD;IACF;IAEA,qBAAO,KAACQ;QAAa,GAAGC,gBAAgB;kBAAGU;;AAC7C,EAAC"}