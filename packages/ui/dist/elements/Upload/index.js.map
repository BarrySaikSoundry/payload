{"version":3,"sources":["../../../src/elements/Upload/index.tsx"],"sourcesContent":["'use client'\nimport type { FormState, SanitizedCollectionConfig } from 'payload'\n\nimport { isImage, reduceFieldsToValues } from 'payload/shared'\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { fieldBaseClass } from '../../fields/shared/index.js'\nimport { useForm } from '../../forms/Form/context.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useFormQueryParams } from '../../providers/FormQueryParams/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { Button } from '../Button/index.js'\nimport { Drawer, DrawerToggler } from '../Drawer/index.js'\nimport { Dropzone } from '../Dropzone/index.js'\nimport { EditUpload } from '../EditUpload/index.js'\nimport { FileDetails } from '../FileDetails/index.js'\nimport { PreviewSizes } from '../PreviewSizes/index.js'\nimport { Thumbnail } from '../Thumbnail/index.js'\nimport './index.scss'\n\nconst baseClass = 'file-field'\nexport const editDrawerSlug = 'edit-upload'\nexport const sizePreviewSlug = 'preview-sizes'\n\nconst validate = (value) => {\n  if (!value && value !== undefined) {\n    return 'A file is required.'\n  }\n\n  return true\n}\n\ntype UploadActionsArgs = {\n  customActions?: React.ReactNode[]\n  enableAdjustments: boolean\n  enablePreviewSizes: boolean\n  mimeType: string\n}\n\nexport const UploadActions = ({\n  customActions,\n  enableAdjustments,\n  enablePreviewSizes,\n  mimeType,\n}: UploadActionsArgs) => {\n  const { t } = useTranslation()\n\n  const fileTypeIsAdjustable = isImage(mimeType) && mimeType !== 'image/svg+xml'\n\n  if (!fileTypeIsAdjustable && (!customActions || customActions.length === 0)) return null\n\n  return (\n    <div className={`${baseClass}__upload-actions`}>\n      {fileTypeIsAdjustable && (\n        <React.Fragment>\n          {enablePreviewSizes && (\n            <DrawerToggler className={`${baseClass}__previewSizes`} slug={sizePreviewSlug}>\n              {t('upload:previewSizes')}\n            </DrawerToggler>\n          )}\n          {enableAdjustments && (\n            <DrawerToggler className={`${baseClass}__edit`} slug={editDrawerSlug}>\n              {t('upload:editImage')}\n            </DrawerToggler>\n          )}\n        </React.Fragment>\n      )}\n\n      {customActions &&\n        customActions.map((CustomAction, i) => {\n          return <React.Fragment key={i}>{CustomAction}</React.Fragment>\n        })}\n    </div>\n  )\n}\n\nexport type UploadProps = {\n  collectionSlug: string\n  customActions?: React.ReactNode[]\n  initialState?: FormState\n  onChange?: (file?: File) => void\n  uploadConfig: SanitizedCollectionConfig['upload']\n}\n\nexport const Upload: React.FC<UploadProps> = (props) => {\n  const { collectionSlug, customActions, initialState, onChange, uploadConfig } = props\n\n  const [replacingFile, setReplacingFile] = useState(false)\n  const [fileSrc, setFileSrc] = useState<null | string>(null)\n  const { t } = useTranslation()\n  const { setModified } = useForm()\n  const { dispatchFormQueryParams, formQueryParams } = useFormQueryParams()\n  const [doc, setDoc] = useState(reduceFieldsToValues(initialState || {}, true))\n  const { docPermissions } = useDocumentInfo()\n  const { errorMessage, setValue, showError, value } = useField<File>({\n    path: 'file',\n    validate,\n  })\n  const [_crop, setCrop] = useState({ x: 0, y: 0 })\n\n  const [showUrlInput, setShowUrlInput] = useState(false)\n  const [fileUrl, setFileUrl] = useState<string>('')\n\n  const cursorPositionRef = useRef(null)\n  const urlInputRef = useRef<HTMLInputElement>(null)\n\n  const handleFileChange = useCallback(\n    (newFile: File) => {\n      if (newFile instanceof File) {\n        const fileReader = new FileReader()\n        fileReader.onload = (e) => {\n          const imgSrc = e.target?.result\n\n          if (typeof imgSrc === 'string') {\n            setFileSrc(imgSrc)\n          }\n        }\n        fileReader.readAsDataURL(newFile)\n      }\n\n      setValue(newFile)\n      setShowUrlInput(false)\n\n      if (typeof onChange === 'function') {\n        onChange(newFile)\n      }\n    },\n    [onChange, setValue],\n  )\n\n  const handleFileNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const updatedFileName = e.target.value\n    const cursorPosition = e.target.selectionStart\n\n    cursorPositionRef.current = cursorPosition\n\n    if (value) {\n      const fileValue = value\n      // Creating a new File object with updated properties\n      const newFile = new File([fileValue], updatedFileName, { type: fileValue.type })\n      handleFileChange(newFile)\n    }\n  }\n\n  useEffect(() => {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    const inputElement = document.querySelector(`.${baseClass}__filename`) as HTMLInputElement\n    if (inputElement && cursorPositionRef.current !== null) {\n      inputElement.setSelectionRange(cursorPositionRef.current, cursorPositionRef.current)\n    }\n  }, [value])\n\n  const handleFileSelection = useCallback(\n    (files: FileList) => {\n      const fileToUpload = files?.[0]\n      handleFileChange(fileToUpload)\n    },\n    [handleFileChange],\n  )\n\n  const handleFileRemoval = useCallback(() => {\n    setReplacingFile(true)\n    handleFileChange(null)\n    setFileSrc('')\n    setFileUrl('')\n    setDoc({})\n    setShowUrlInput(false)\n  }, [handleFileChange])\n\n  const onEditsSave = useCallback(\n    ({ crop, focalPosition }) => {\n      setCrop({\n        x: crop.x || 0,\n        y: crop.y || 0,\n      })\n\n      setModified(true)\n      dispatchFormQueryParams({\n        type: 'SET',\n        params: {\n          uploadEdits:\n            crop || focalPosition\n              ? {\n                  crop: crop || null,\n                  focalPoint: focalPosition ? focalPosition : null,\n                }\n              : null,\n        },\n      })\n    },\n    [dispatchFormQueryParams, setModified],\n  )\n\n  const handlePasteUrlClick = () => {\n    setShowUrlInput((prev) => !prev)\n  }\n\n  const handleUrlSubmit = async () => {\n    if (fileUrl) {\n      try {\n        const response = await fetch(fileUrl)\n        const data = await response.blob()\n\n        // Extract the file name from the URL\n        const fileName = fileUrl.split('/').pop()\n\n        // Create a new File object from the Blob data\n        const file = new File([data], fileName, { type: data.type })\n        handleFileChange(file)\n      } catch (e) {\n        toast.error(e.message)\n      }\n    }\n  }\n\n  useEffect(() => {\n    setDoc(reduceFieldsToValues(initialState || {}, true))\n    setReplacingFile(false)\n  }, [initialState])\n\n  useEffect(() => {\n    if (showUrlInput && urlInputRef.current) {\n      urlInputRef.current.focus() // Focus on the remote-url input field when showUrlInput is true\n    }\n  }, [showUrlInput])\n\n  const canRemoveUpload =\n    docPermissions?.update?.permission &&\n    'delete' in docPermissions &&\n    docPermissions?.delete?.permission\n\n  const hasImageSizes = uploadConfig?.imageSizes?.length > 0\n  const hasResizeOptions = Boolean(uploadConfig?.resizeOptions)\n  // Explicity check if set to true, default is undefined\n  const focalPointEnabled = uploadConfig?.focalPoint === true\n\n  const { crop: showCrop = true, focalPoint = true } = uploadConfig\n\n  const showFocalPoint = focalPoint && (hasImageSizes || hasResizeOptions || focalPointEnabled)\n\n  return (\n    <div className={[fieldBaseClass, baseClass].filter(Boolean).join(' ')}>\n      <FieldError message={errorMessage} showError={showError} />\n      {doc.filename && !replacingFile && (\n        <FileDetails\n          collectionSlug={collectionSlug}\n          customUploadActions={customActions}\n          doc={doc}\n          enableAdjustments={showCrop || showFocalPoint}\n          handleRemove={canRemoveUpload ? handleFileRemoval : undefined}\n          hasImageSizes={hasImageSizes}\n          imageCacheTag={doc.updatedAt}\n          uploadConfig={uploadConfig}\n        />\n      )}\n      {(!doc.filename || replacingFile) && (\n        <div className={`${baseClass}__upload`}>\n          {!value && !showUrlInput && (\n            <Dropzone\n              className={`${baseClass}__dropzone`}\n              mimeTypes={uploadConfig?.mimeTypes}\n              onChange={handleFileSelection}\n              onPasteUrlClick={handlePasteUrlClick}\n            />\n          )}\n          {showUrlInput && (\n            <React.Fragment>\n              <div className={`${baseClass}__remote-file-wrap`}>\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <input\n                  className={`${baseClass}__remote-file`}\n                  onChange={(e) => {\n                    setFileUrl(e.target.value)\n                  }}\n                  ref={urlInputRef}\n                  type=\"text\"\n                  value={fileUrl}\n                />\n                <div className={`${baseClass}__add-file-wrap`}>\n                  <button\n                    className={`${baseClass}__add-file`}\n                    onClick={handleUrlSubmit}\n                    type=\"button\"\n                  >\n                    {t('upload:addImage')}\n                  </button>\n                </div>\n              </div>\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__remove`}\n                icon=\"x\"\n                iconStyle=\"with-border\"\n                onClick={handleFileRemoval}\n                round\n                tooltip={t('general:cancel')}\n              />\n            </React.Fragment>\n          )}\n          {value && fileSrc && (\n            <React.Fragment>\n              <div className={`${baseClass}__thumbnail-wrap`}>\n                <Thumbnail\n                  collectionSlug={collectionSlug}\n                  fileSrc={isImage(value.type) ? fileSrc : null}\n                />\n              </div>\n              <div className={`${baseClass}__file-adjustments`}>\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <input\n                  className={`${baseClass}__filename`}\n                  onChange={handleFileNameChange}\n                  type=\"text\"\n                  value={value.name}\n                />\n                <UploadActions\n                  customActions={customActions}\n                  enableAdjustments={showCrop || showFocalPoint}\n                  enablePreviewSizes={hasImageSizes && doc.filename && !replacingFile}\n                  mimeType={value.type}\n                />\n              </div>\n              <Button\n                buttonStyle=\"icon-label\"\n                className={`${baseClass}__remove`}\n                icon=\"x\"\n                iconStyle=\"with-border\"\n                onClick={handleFileRemoval}\n                round\n                tooltip={t('general:cancel')}\n              />\n            </React.Fragment>\n          )}\n        </div>\n      )}\n      {(value || doc.filename) && (\n        <Drawer Header={null} slug={editDrawerSlug}>\n          <EditUpload\n            fileName={value?.name || doc?.filename}\n            fileSrc={doc?.url || fileSrc}\n            imageCacheTag={doc.updatedAt}\n            initialCrop={formQueryParams?.uploadEdits?.crop ?? {}}\n            initialFocalPoint={{\n              x: formQueryParams?.uploadEdits?.focalPoint.x || doc.focalX || 50,\n              y: formQueryParams?.uploadEdits?.focalPoint.y || doc.focalY || 50,\n            }}\n            onSave={onEditsSave}\n            showCrop={showCrop}\n            showFocalPoint={showFocalPoint}\n          />\n        </Drawer>\n      )}\n      {doc && hasImageSizes && (\n        <Drawer\n          className={`${baseClass}__previewDrawer`}\n          hoverTitle\n          slug={sizePreviewSlug}\n          title={t('upload:sizesFor', { label: doc?.filename })}\n        >\n          <PreviewSizes doc={doc} imageCacheTag={doc.updatedAt} uploadConfig={uploadConfig} />\n        </Drawer>\n      )}\n    </div>\n  )\n}\n"],"names":["isImage","reduceFieldsToValues","React","useCallback","useEffect","useRef","useState","toast","FieldError","fieldBaseClass","useForm","useField","useDocumentInfo","useFormQueryParams","useTranslation","Button","Drawer","DrawerToggler","Dropzone","EditUpload","FileDetails","PreviewSizes","Thumbnail","baseClass","editDrawerSlug","sizePreviewSlug","validate","value","undefined","UploadActions","customActions","enableAdjustments","enablePreviewSizes","mimeType","t","fileTypeIsAdjustable","length","div","className","Fragment","slug","map","CustomAction","i","Upload","props","collectionSlug","initialState","onChange","uploadConfig","replacingFile","setReplacingFile","fileSrc","setFileSrc","setModified","dispatchFormQueryParams","formQueryParams","doc","setDoc","docPermissions","errorMessage","setValue","showError","path","_crop","setCrop","x","y","showUrlInput","setShowUrlInput","fileUrl","setFileUrl","cursorPositionRef","urlInputRef","handleFileChange","newFile","File","fileReader","FileReader","onload","e","imgSrc","target","result","readAsDataURL","handleFileNameChange","updatedFileName","cursorPosition","selectionStart","current","fileValue","type","inputElement","document","querySelector","setSelectionRange","handleFileSelection","files","fileToUpload","handleFileRemoval","onEditsSave","crop","focalPosition","params","uploadEdits","focalPoint","handlePasteUrlClick","prev","handleUrlSubmit","response","fetch","data","blob","fileName","split","pop","file","error","message","focus","canRemoveUpload","update","permission","delete","hasImageSizes","imageSizes","hasResizeOptions","Boolean","resizeOptions","focalPointEnabled","showCrop","showFocalPoint","filter","join","filename","customUploadActions","handleRemove","imageCacheTag","updatedAt","mimeTypes","onPasteUrlClick","input","ref","button","onClick","buttonStyle","icon","iconStyle","round","tooltip","name","Header","url","initialCrop","initialFocalPoint","focalX","focalY","onSave","hoverTitle","title","label"],"mappings":"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"}