{"version":3,"sources":["../../../src/elements/PublishMany/index.tsx"],"sourcesContent":["'use client'\nimport type { ClientCollectionConfig } from 'payload'\n\nimport { Modal, useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport React, { useCallback, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useSearchParams } from '../../providers/SearchParams/index.js'\nimport { SelectAllStatus, useSelection } from '../../providers/Selection/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { Button } from '../Button/index.js'\nimport { Pill } from '../Pill/index.js'\nimport './index.scss'\n\nconst baseClass = 'publish-many'\n\nexport type PublishManyProps = {\n  collection: ClientCollectionConfig\n}\n\nexport const PublishMany: React.FC<PublishManyProps> = (props) => {\n  const { clearRouteCache } = useRouteCache()\n\n  const { collection: { slug, labels: { plural }, versions } = {} } = props\n\n  const {\n    routes: { api },\n    serverURL,\n  } = useConfig()\n  const { permissions } = useAuth()\n  const { toggleModal } = useModal()\n  const { i18n, t } = useTranslation()\n  const { getQueryParams, selectAll } = useSelection()\n  const [submitted, setSubmitted] = useState(false)\n  const router = useRouter()\n  const { stringifyParams } = useSearchParams()\n\n  const collectionPermissions = permissions?.collections?.[slug]\n  const hasPermission = collectionPermissions?.update?.permission\n\n  const modalSlug = `publish-${slug}`\n\n  const addDefaultError = useCallback(() => {\n    toast.error(t('error:unknown'))\n  }, [t])\n\n  const handlePublish = useCallback(async () => {\n    setSubmitted(true)\n    await requests\n      .patch(\n        `${serverURL}${api}/${slug}${getQueryParams({ _status: { not_equals: 'published' } })}&draft=true`,\n        {\n          body: JSON.stringify({\n            _status: 'published',\n          }),\n          headers: {\n            'Accept-Language': i18n.language,\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n      .then(async (res) => {\n        try {\n          const json = await res.json()\n          toggleModal(modalSlug)\n          if (res.status < 400) {\n            toast.success(t('general:updatedSuccessfully'))\n            router.replace(\n              stringifyParams({\n                params: {\n                  page: selectAll ? '1' : undefined,\n                },\n              }),\n            )\n\n            clearRouteCache()\n            return null\n          }\n\n          if (json.errors) {\n            json.errors.forEach((error) => toast.error(error.message))\n          } else {\n            addDefaultError()\n          }\n          return false\n        } catch (e) {\n          return addDefaultError()\n        }\n      })\n  }, [\n    addDefaultError,\n    api,\n    getQueryParams,\n    i18n.language,\n    modalSlug,\n    selectAll,\n    serverURL,\n    slug,\n    t,\n    toggleModal,\n    router,\n    stringifyParams,\n    clearRouteCache,\n  ])\n\n  if (!versions?.drafts || selectAll === SelectAllStatus.None || !hasPermission) {\n    return null\n  }\n\n  return (\n    <React.Fragment>\n      <Pill\n        className={`${baseClass}__toggle`}\n        onClick={() => {\n          setSubmitted(false)\n          toggleModal(modalSlug)\n        }}\n      >\n        {t('version:publish')}\n      </Pill>\n      <Modal className={baseClass} slug={modalSlug}>\n        <div className={`${baseClass}__template`}>\n          <h1>{t('version:confirmPublish')}</h1>\n          <p>{t('version:aboutToPublishSelection', { label: getTranslation(plural, i18n) })}</p>\n          <Button\n            buttonStyle=\"secondary\"\n            id=\"confirm-cancel\"\n            onClick={submitted ? undefined : () => toggleModal(modalSlug)}\n            type=\"button\"\n          >\n            {t('general:cancel')}\n          </Button>\n          <Button id=\"confirm-publish\" onClick={submitted ? undefined : handlePublish}>\n            {submitted ? t('version:publishing') : t('general:confirm')}\n          </Button>\n        </div>\n      </Modal>\n    </React.Fragment>\n  )\n}\n"],"names":["Modal","useModal","getTranslation","useRouter","React","useCallback","useState","toast","useAuth","useConfig","useRouteCache","useSearchParams","SelectAllStatus","useSelection","useTranslation","requests","Button","Pill","baseClass","PublishMany","props","clearRouteCache","collection","slug","labels","plural","versions","routes","api","serverURL","permissions","toggleModal","i18n","t","getQueryParams","selectAll","submitted","setSubmitted","router","stringifyParams","collectionPermissions","collections","hasPermission","update","permission","modalSlug","addDefaultError","error","handlePublish","patch","_status","not_equals","body","JSON","stringify","headers","language","then","res","json","status","success","replace","params","page","undefined","errors","forEach","message","e","drafts","None","Fragment","className","onClick","div","h1","p","label","buttonStyle","id","type"],"mappings":"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"}