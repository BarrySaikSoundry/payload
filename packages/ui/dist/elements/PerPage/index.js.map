{"version":3,"sources":["../../../src/elements/PerPage/index.tsx"],"sourcesContent":["'use client'\n// TODO: abstract the `next/navigation` dependency out from this component\nimport { collectionDefaults, isNumber } from 'payload/shared'\nimport React from 'react'\n\nimport { ChevronIcon } from '../../icons/Chevron/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { Popup, PopupList } from '../Popup/index.js'\nimport './index.scss'\n\nconst baseClass = 'per-page'\n\nconst defaultLimits = collectionDefaults.admin.pagination.limits\n\nexport type PerPageProps = {\n  defaultLimit?: number\n  handleChange?: (limit: number) => void\n  limit: number\n  limits: number[]\n  resetPage?: boolean\n}\n\nexport const PerPage: React.FC<PerPageProps> = ({\n  defaultLimit = 10,\n  handleChange,\n  limit,\n  limits = defaultLimits,\n}) => {\n  const { t } = useTranslation()\n\n  const limitToUse = isNumber(limit) ? limit : defaultLimit\n\n  return (\n    <div className={baseClass}>\n      <Popup\n        button={\n          <div className={`${baseClass}__base-button`}>\n            <span>{t('general:perPage', { limit: limitToUse })}</span>\n            &nbsp;\n            <ChevronIcon className={`${baseClass}__icon`} />\n          </div>\n        }\n        horizontalAlign=\"right\"\n        render={({ close }) => (\n          <PopupList.ButtonGroup>\n            {limits.map((limitNumber, i) => (\n              <PopupList.Button\n                className={[\n                  `${baseClass}__button`,\n                  limitNumber === limitToUse && `${baseClass}__button-active`,\n                ]\n                  .filter(Boolean)\n                  .join(' ')}\n                key={i}\n                onClick={() => {\n                  close()\n                  if (handleChange) handleChange(limitNumber)\n                }}\n              >\n                {limitNumber === limitToUse && (\n                  <div className={`${baseClass}__chevron`}>\n                    <ChevronIcon direction=\"right\" />\n                  </div>\n                )}\n                &nbsp;\n                <span>{limitNumber}</span>\n              </PopupList.Button>\n            ))}\n          </PopupList.ButtonGroup>\n        )}\n        size=\"small\"\n      />\n    </div>\n  )\n}\n"],"names":["collectionDefaults","isNumber","React","ChevronIcon","useTranslation","Popup","PopupList","baseClass","defaultLimits","admin","pagination","limits","PerPage","defaultLimit","handleChange","limit","t","limitToUse","div","className","button","span","horizontalAlign","render","close","ButtonGroup","map","limitNumber","i","Button","filter","Boolean","join","onClick","direction","size"],"mappings":"AAAA;;AACA,0EAA0E;AAC1E,SAASA,kBAAkB,EAAEC,QAAQ,QAAQ,iBAAgB;AAC7D,OAAOC,WAAW,QAAO;AAEzB,SAASC,WAAW,QAAQ,+BAA8B;AAC1D,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,KAAK,EAAEC,SAAS,QAAQ,oBAAmB;AACpD,OAAO,eAAc;AAErB,MAAMC,YAAY;AAElB,MAAMC,gBAAgBR,mBAAmBS,KAAK,CAACC,UAAU,CAACC,MAAM;AAUhE,OAAO,MAAMC,UAAkC,CAAC,EAC9CC,eAAe,EAAE,EACjBC,YAAY,EACZC,KAAK,EACLJ,SAASH,aAAa,EACvB;IACC,MAAM,EAAEQ,CAAC,EAAE,GAAGZ;IAEd,MAAMa,aAAahB,SAASc,SAASA,QAAQF;IAE7C,qBACE,KAACK;QAAIC,WAAWZ;kBACd,cAAA,KAACF;YACCe,sBACE,MAACF;gBAAIC,WAAW,CAAC,EAAEZ,UAAU,aAAa,CAAC;;kCACzC,KAACc;kCAAML,EAAE,mBAAmB;4BAAED,OAAOE;wBAAW;;oBAAU;kCAE1D,KAACd;wBAAYgB,WAAW,CAAC,EAAEZ,UAAU,MAAM,CAAC;;;;YAGhDe,iBAAgB;YAChBC,QAAQ,CAAC,EAAEC,KAAK,EAAE,iBAChB,KAAClB,UAAUmB,WAAW;8BACnBd,OAAOe,GAAG,CAAC,CAACC,aAAaC,kBACxB,MAACtB,UAAUuB,MAAM;4BACfV,WAAW;gCACT,CAAC,EAAEZ,UAAU,QAAQ,CAAC;gCACtBoB,gBAAgBV,cAAc,CAAC,EAAEV,UAAU,eAAe,CAAC;6BAC5D,CACEuB,MAAM,CAACC,SACPC,IAAI,CAAC;4BAERC,SAAS;gCACPT;gCACA,IAAIV,cAAcA,aAAaa;4BACjC;;gCAECA,gBAAgBV,4BACf,KAACC;oCAAIC,WAAW,CAAC,EAAEZ,UAAU,SAAS,CAAC;8CACrC,cAAA,KAACJ;wCAAY+B,WAAU;;;gCAEzB;8CAEF,KAACb;8CAAMM;;;2BAZFC;;YAiBbO,MAAK;;;AAIb,EAAC"}