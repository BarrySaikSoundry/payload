{"version":3,"sources":["../../../../../src/elements/WhereBuilder/Condition/Relationship/index.tsx"],"sourcesContent":["'use client'\nimport type { PaginatedDocs, Where } from 'payload'\n\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useReducer, useState } from 'react'\n\nimport type { Option } from '../../../ReactSelect/types.js'\nimport type { Props, ValueWithRelation } from './types.js'\n\nimport { useDebounce } from '../../../../hooks/useDebounce.js'\nimport { useConfig } from '../../../../providers/Config/index.js'\nimport { useTranslation } from '../../../../providers/Translation/index.js'\nimport { ReactSelect } from '../../../ReactSelect/index.js'\nimport './index.scss'\nimport optionsReducer from './optionsReducer.js'\n\nconst baseClass = 'condition-value-relationship'\n\nconst maxResultsPerRequest = 10\n\nexport const RelationshipField: React.FC<Props> = (props) => {\n  const { admin: { isSortable } = {}, disabled, hasMany, onChange, relationTo, value } = props\n\n  const {\n    collections,\n    routes: { api },\n    serverURL,\n  } = useConfig()\n\n  const hasMultipleRelations = Array.isArray(relationTo)\n  const [options, dispatchOptions] = useReducer(optionsReducer, [])\n  const [search, setSearch] = useState('')\n  const [errorLoading, setErrorLoading] = useState('')\n  const [hasLoadedFirstOptions, setHasLoadedFirstOptions] = useState(false)\n  const debouncedSearch = useDebounce(search, 300)\n  const { i18n, t } = useTranslation()\n  const relationSlugs = hasMultipleRelations ? relationTo : [relationTo]\n  const initialRelationMap = () => {\n    const map: Map<string, number> = new Map()\n    relationSlugs.forEach((relation) => {\n      map.set(relation, 1)\n    })\n    return map\n  }\n  const nextPageByRelationshipRef = React.useRef<Map<string, number>>(initialRelationMap())\n  const partiallyLoadedRelationshipSlugs = React.useRef<string[]>(relationSlugs)\n\n  const addOptions = useCallback(\n    (data, relation) => {\n      const collection = collections.find((coll) => coll.slug === relation)\n      dispatchOptions({ type: 'ADD', collection, data, hasMultipleRelations, i18n, relation })\n    },\n    [collections, hasMultipleRelations, i18n],\n  )\n\n  const loadRelationOptions = React.useCallback(\n    async ({\n      abortController,\n      relationSlug,\n    }: {\n      abortController: AbortController\n      relationSlug: string\n    }) => {\n      const collection = collections.find((coll) => coll.slug === relationSlug)\n      const fieldToSearch = collection?.admin?.useAsTitle || 'id'\n      const pageIndex = nextPageByRelationshipRef.current.get(relationSlug)\n\n      if (partiallyLoadedRelationshipSlugs.current.includes(relationSlug)) {\n        const query: {\n          depth?: number\n          limit?: number\n          page?: number\n          where: Where\n        } = {\n          depth: 0,\n          limit: maxResultsPerRequest,\n          page: pageIndex,\n          where: {\n            and: [],\n          },\n        }\n\n        if (debouncedSearch) {\n          query.where.and.push({\n            [fieldToSearch]: {\n              like: debouncedSearch,\n            },\n          })\n        }\n\n        try {\n          const response = await fetch(\n            `${serverURL}${api}/${relationSlug}${qs.stringify(query, { addQueryPrefix: true })}`,\n            {\n              credentials: 'include',\n              headers: {\n                'Accept-Language': i18n.language,\n              },\n              signal: abortController.signal,\n            },\n          )\n\n          if (response.ok) {\n            const data: PaginatedDocs = await response.json()\n            if (data.docs.length > 0) {\n              addOptions(data, relationSlug)\n\n              if (!debouncedSearch) {\n                if (data.nextPage) {\n                  nextPageByRelationshipRef.current.set(relationSlug, data.nextPage)\n                } else {\n                  partiallyLoadedRelationshipSlugs.current =\n                    partiallyLoadedRelationshipSlugs.current.filter(\n                      (partiallyLoadedRelation) => partiallyLoadedRelation !== relationSlug,\n                    )\n                }\n              }\n            }\n          } else {\n            setErrorLoading(t('error:unspecific'))\n          }\n        } catch (e) {\n          if (!abortController.signal.aborted) {\n            console.error(e)\n          }\n        }\n      }\n\n      setHasLoadedFirstOptions(true)\n    },\n    [addOptions, api, collections, debouncedSearch, i18n.language, serverURL, t],\n  )\n\n  const loadMoreOptions = React.useCallback(() => {\n    if (partiallyLoadedRelationshipSlugs.current.length > 0) {\n      const abortController = new AbortController()\n      void loadRelationOptions({\n        abortController,\n        relationSlug: partiallyLoadedRelationshipSlugs.current[0],\n      })\n    }\n  }, [loadRelationOptions])\n\n  const findOptionsByValue = useCallback((): Option | Option[] => {\n    if (value) {\n      if (hasMany) {\n        if (Array.isArray(value)) {\n          return value.map((val) => {\n            if (hasMultipleRelations) {\n              let matchedOption: Option\n\n              options.forEach((opt) => {\n                if (opt.options) {\n                  opt.options.some((subOpt) => {\n                    if (subOpt?.value === val.value) {\n                      matchedOption = subOpt\n                      return true\n                    }\n\n                    return false\n                  })\n                }\n              })\n\n              return matchedOption\n            }\n\n            return options.find((opt) => opt.value === val)\n          })\n        }\n\n        return undefined\n      }\n\n      if (hasMultipleRelations) {\n        let matchedOption: Option\n\n        const valueWithRelation = value as ValueWithRelation\n\n        options.forEach((opt) => {\n          if (opt?.options) {\n            opt.options.some((subOpt) => {\n              if (subOpt?.value === valueWithRelation.value) {\n                matchedOption = subOpt\n                return true\n              }\n              return false\n            })\n          }\n        })\n\n        return matchedOption\n      }\n\n      return options.find((opt) => opt.value === value)\n    }\n\n    return undefined\n  }, [hasMany, hasMultipleRelations, value, options])\n\n  const handleInputChange = useCallback(\n    (newSearch) => {\n      if (search !== newSearch) {\n        setSearch(newSearch)\n      }\n    },\n    [search],\n  )\n\n  const addOptionByID = useCallback(\n    async (id, relation) => {\n      if (!errorLoading && id !== 'null' && id && relation) {\n        const response = await fetch(`${serverURL}${api}/${relation}/${id}?depth=0`, {\n          credentials: 'include',\n          headers: {\n            'Accept-Language': i18n.language,\n          },\n        })\n\n        if (response.ok) {\n          const data = await response.json()\n          addOptions({ docs: [data] }, relation)\n        } else {\n          // eslint-disable-next-line no-console\n          console.error(t('error:loadingDocument', { id }))\n        }\n      }\n    },\n    [i18n, addOptions, api, errorLoading, serverURL, t],\n  )\n\n  /**\n   * 1. Trigger initial relationship options fetch\n   * 2. When search changes, loadRelationOptions will\n   *    fire off again\n   */\n  useEffect(() => {\n    const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n    const abortControllers: AbortController[] = []\n    relations.forEach((relation) => {\n      const abortController = new AbortController()\n      void loadRelationOptions({\n        abortController,\n        relationSlug: relation,\n      })\n      abortControllers.push(abortController)\n    })\n\n    return () => {\n      abortControllers.forEach((controller) => {\n        if (controller.signal) controller.abort()\n      })\n    }\n  }, [i18n, loadRelationOptions, relationTo])\n\n  /**\n   * Load any options that were not returned\n   * in the first 10 of each relation fetch\n   */\n  useEffect(() => {\n    if (value && hasLoadedFirstOptions) {\n      if (hasMany) {\n        const matchedOptions = findOptionsByValue()\n\n        ;((matchedOptions as Option[]) || []).forEach((option, i) => {\n          if (!option) {\n            if (hasMultipleRelations) {\n              void addOptionByID(value[i].value, value[i].relationTo)\n            } else {\n              void addOptionByID(value[i], relationTo)\n            }\n          }\n        })\n      } else {\n        const matchedOption = findOptionsByValue()\n\n        if (!matchedOption) {\n          if (hasMultipleRelations) {\n            const valueWithRelation = value as ValueWithRelation\n            void addOptionByID(valueWithRelation.value, valueWithRelation.relationTo)\n          } else {\n            void addOptionByID(value, relationTo)\n          }\n        }\n      }\n    }\n  }, [\n    addOptionByID,\n    findOptionsByValue,\n    hasMany,\n    hasMultipleRelations,\n    relationTo,\n    value,\n    hasLoadedFirstOptions,\n  ])\n\n  const classes = ['field-type', baseClass, errorLoading && 'error-loading']\n    .filter(Boolean)\n    .join(' ')\n\n  const valueToRender = (findOptionsByValue() || value) as Option\n\n  return (\n    <div className={classes}>\n      {!errorLoading && (\n        <ReactSelect\n          disabled={disabled}\n          isMulti={hasMany}\n          isSortable={isSortable}\n          onChange={(selected) => {\n            if (!selected) {\n              onChange(null)\n              return\n            }\n            if (hasMany && Array.isArray(selected)) {\n              onChange(\n                selected\n                  ? selected.map((option) => {\n                      if (hasMultipleRelations) {\n                        return {\n                          relationTo: option?.relationTo,\n                          value: option?.value,\n                        }\n                      }\n\n                      return option?.value\n                    })\n                  : null,\n              )\n            } else if (hasMultipleRelations && !Array.isArray(selected)) {\n              onChange({\n                relationTo: selected?.relationTo,\n                value: selected?.value,\n              })\n            } else if (!Array.isArray(selected)) {\n              onChange(selected?.value)\n            }\n          }}\n          onInputChange={handleInputChange}\n          onMenuScrollToBottom={loadMoreOptions}\n          options={options}\n          placeholder={t('general:selectValue')}\n          value={valueToRender}\n        />\n      )}\n      {errorLoading && <div className={`${baseClass}__error-loading`}>{errorLoading}</div>}\n    </div>\n  )\n}\n"],"names":["qs","React","useCallback","useEffect","useReducer","useState","useDebounce","useConfig","useTranslation","ReactSelect","optionsReducer","baseClass","maxResultsPerRequest","RelationshipField","props","admin","isSortable","disabled","hasMany","onChange","relationTo","value","collections","routes","api","serverURL","hasMultipleRelations","Array","isArray","options","dispatchOptions","search","setSearch","errorLoading","setErrorLoading","hasLoadedFirstOptions","setHasLoadedFirstOptions","debouncedSearch","i18n","t","relationSlugs","initialRelationMap","map","Map","forEach","relation","set","nextPageByRelationshipRef","useRef","partiallyLoadedRelationshipSlugs","addOptions","data","collection","find","coll","slug","type","loadRelationOptions","abortController","relationSlug","fieldToSearch","useAsTitle","pageIndex","current","get","includes","query","depth","limit","page","where","and","push","like","response","fetch","stringify","addQueryPrefix","credentials","headers","language","signal","ok","json","docs","length","nextPage","filter","partiallyLoadedRelation","e","aborted","console","error","loadMoreOptions","AbortController","findOptionsByValue","val","matchedOption","opt","some","subOpt","undefined","valueWithRelation","handleInputChange","newSearch","addOptionByID","id","relations","abortControllers","controller","abort","matchedOptions","option","i","classes","Boolean","join","valueToRender","div","className","isMulti","selected","onInputChange","onMenuScrollToBottom","placeholder"],"mappings":"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"}