{"version":3,"sources":["../../src/hooks/useDebouncedCallback.ts"],"sourcesContent":["import { useCallback, useRef } from 'react'\n\n/**\n * Returns a memoized function that will only call the passed function when it hasn't been called for the wait period\n * @param func The function to be called\n * @param wait Wait period after function hasn't been called for\n * @returns A memoized function that is debounced\n */\nexport const useDebouncedCallback = (func, wait) => {\n  // Use a ref to store the timeout between renders\n  // and prevent changes to it from causing re-renders\n  const timeout = useRef<ReturnType<typeof setTimeout>>(undefined)\n\n  return useCallback(\n    (...args) => {\n      const later = () => {\n        clearTimeout(timeout.current)\n        func(...args)\n      }\n\n      clearTimeout(timeout.current)\n      timeout.current = setTimeout(later, wait)\n    },\n    [func, wait],\n  )\n}\n"],"names":["useCallback","useRef","useDebouncedCallback","func","wait","timeout","undefined","args","later","clearTimeout","current","setTimeout"],"mappings":"AAAA,SAASA,WAAW,EAAEC,MAAM,QAAQ,QAAO;AAE3C;;;;;CAKC,GACD,OAAO,MAAMC,uBAAuB,CAACC,MAAMC;IACzC,iDAAiD;IACjD,oDAAoD;IACpD,MAAMC,UAAUJ,OAAsCK;IAEtD,OAAON,YACL,CAAC,GAAGO;QACF,MAAMC,QAAQ;YACZC,aAAaJ,QAAQK,OAAO;YAC5BP,QAAQI;QACV;QAEAE,aAAaJ,QAAQK,OAAO;QAC5BL,QAAQK,OAAO,GAAGC,WAAWH,OAAOJ;IACtC,GACA;QAACD;QAAMC;KAAK;AAEhB,EAAC"}