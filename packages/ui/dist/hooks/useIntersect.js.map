{"version":3,"sources":["../../src/hooks/useIntersect.ts"],"sourcesContent":["'use client'\n\nimport { useEffect, useRef, useState } from 'react'\n\ntype Intersect = [\n  setNode: React.Dispatch<HTMLElement>,\n  entry: IntersectionObserverEntry,\n  node: HTMLElement,\n]\n\nexport const useIntersect = (\n  { root = null, rootMargin = '0px', threshold = 0 } = {},\n  disable?: boolean,\n): Intersect => {\n  const [entry, updateEntry] = useState<IntersectionObserverEntry>()\n  const [node, setNode] = useState(null)\n\n  const observer = useRef(\n    typeof window !== 'undefined' && 'IntersectionObserver' in window && !disable\n      ? new window.IntersectionObserver(([ent]) => updateEntry(ent), {\n          root,\n          rootMargin,\n          threshold,\n        })\n      : null,\n  )\n\n  useEffect(() => {\n    if (disable) {\n      return\n    }\n    const { current: currentObserver } = observer\n    currentObserver.disconnect()\n\n    if (node) currentObserver.observe(node)\n\n    return () => currentObserver.disconnect()\n  }, [node, disable])\n\n  return [setNode, entry, node]\n}\n"],"names":["useEffect","useRef","useState","useIntersect","root","rootMargin","threshold","disable","entry","updateEntry","node","setNode","observer","window","IntersectionObserver","ent","current","currentObserver","disconnect","observe"],"mappings":"AAAA;AAEA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,QAAO;AAQnD,OAAO,MAAMC,eAAe,CAC1B,EAAEC,OAAO,IAAI,EAAEC,aAAa,KAAK,EAAEC,YAAY,CAAC,EAAE,GAAG,CAAC,CAAC,EACvDC;IAEA,MAAM,CAACC,OAAOC,YAAY,GAAGP;IAC7B,MAAM,CAACQ,MAAMC,QAAQ,GAAGT,SAAS;IAEjC,MAAMU,WAAWX,OACf,OAAOY,WAAW,eAAe,0BAA0BA,UAAU,CAACN,UAClE,IAAIM,OAAOC,oBAAoB,CAAC,CAAC,CAACC,IAAI,GAAKN,YAAYM,MAAM;QAC3DX;QACAC;QACAC;IACF,KACA;IAGNN,UAAU;QACR,IAAIO,SAAS;YACX;QACF;QACA,MAAM,EAAES,SAASC,eAAe,EAAE,GAAGL;QACrCK,gBAAgBC,UAAU;QAE1B,IAAIR,MAAMO,gBAAgBE,OAAO,CAACT;QAElC,OAAO,IAAMO,gBAAgBC,UAAU;IACzC,GAAG;QAACR;QAAMH;KAAQ;IAElB,OAAO;QAACI;QAASH;QAAOE;KAAK;AAC/B,EAAC"}