{"version":3,"sources":["../../src/hooks/useDelayedRender.ts"],"sourcesContent":["import * as React from 'react'\n\nimport { useDelay } from './useDelay.js'\n\ntype DelayedRenderProps = {\n  /** Time in ms to wait before \"mounting\" the component. */\n  delayBeforeShow: number\n  /** Time in ms for the \"enter\" phase of the transition, after delay completes. */\n  inTimeout: number\n  /** Min time in ms for the \"entered\" phase of the transition. */\n  minShowTime: number\n  /** Time in ms for the exit phase of the transition. */\n  outTimeout: number\n  /** `true` starts the mount process.\n   * `false` starts the unmount process.\n   * */\n  show: boolean\n}\ntype useDelayedRenderT = (props: DelayedRenderProps) => {\n  /** `true` if the component has mounted after the timeout. */\n  isMounted: boolean\n  /** `true` if the component is unmounting. */\n  isUnmounting: boolean\n  /** Call this function to trigger the timeout delay before rendering. */\n  triggerDelayedRender: () => void\n}\nexport const useDelayedRender: useDelayedRenderT = ({\n  delayBeforeShow,\n  inTimeout,\n  minShowTime,\n  outTimeout,\n  show,\n}) => {\n  const totalMountTime = inTimeout + minShowTime + outTimeout\n  const [hasDelayed, triggerDelay] = useDelay(delayBeforeShow)\n  const [isMounted, setIsMounted] = React.useState(false)\n  const [isUnmounting, setIsUnmounting] = React.useState(false)\n  const onMountTimestampRef = React.useRef(0)\n  const unmountTimeoutRef: React.MutableRefObject<NodeJS.Timeout | undefined> =\n    React.useRef(undefined)\n\n  const unmount = React.useCallback(() => {\n    setIsUnmounting(true)\n    unmountTimeoutRef.current = setTimeout(() => {\n      setIsMounted(false)\n      setIsUnmounting(false)\n    }, outTimeout)\n  }, [setIsUnmounting, outTimeout])\n\n  React.useEffect(() => {\n    const shouldMount = hasDelayed && !isMounted && show\n    const shouldUnmount = isMounted && !show\n\n    if (shouldMount) {\n      onMountTimestampRef.current = Date.now()\n      setIsMounted(true)\n    } else if (shouldUnmount) {\n      const totalTimeMounted = Date.now() - onMountTimestampRef.current\n      const remainingTime = totalMountTime - totalTimeMounted\n      clearTimeout(unmountTimeoutRef.current)\n      unmountTimeoutRef.current = setTimeout(unmount, Math.max(0, remainingTime))\n    }\n  }, [isMounted, show, unmount, totalMountTime, hasDelayed])\n\n  return {\n    isMounted,\n    isUnmounting,\n    triggerDelayedRender: triggerDelay,\n  }\n}\n"],"names":["React","useDelay","useDelayedRender","delayBeforeShow","inTimeout","minShowTime","outTimeout","show","totalMountTime","hasDelayed","triggerDelay","isMounted","setIsMounted","useState","isUnmounting","setIsUnmounting","onMountTimestampRef","useRef","unmountTimeoutRef","undefined","unmount","useCallback","current","setTimeout","useEffect","shouldMount","shouldUnmount","Date","now","totalTimeMounted","remainingTime","clearTimeout","Math","max","triggerDelayedRender"],"mappings":"AAAA,YAAYA,WAAW,QAAO;AAE9B,SAASC,QAAQ,QAAQ,gBAAe;AAwBxC,OAAO,MAAMC,mBAAsC,CAAC,EAClDC,eAAe,EACfC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,IAAI,EACL;IACC,MAAMC,iBAAiBJ,YAAYC,cAAcC;IACjD,MAAM,CAACG,YAAYC,aAAa,GAAGT,SAASE;IAC5C,MAAM,CAACQ,WAAWC,aAAa,GAAGZ,MAAMa,QAAQ,CAAC;IACjD,MAAM,CAACC,cAAcC,gBAAgB,GAAGf,MAAMa,QAAQ,CAAC;IACvD,MAAMG,sBAAsBhB,MAAMiB,MAAM,CAAC;IACzC,MAAMC,oBACJlB,MAAMiB,MAAM,CAACE;IAEf,MAAMC,UAAUpB,MAAMqB,WAAW,CAAC;QAChCN,gBAAgB;QAChBG,kBAAkBI,OAAO,GAAGC,WAAW;YACrCX,aAAa;YACbG,gBAAgB;QAClB,GAAGT;IACL,GAAG;QAACS;QAAiBT;KAAW;IAEhCN,MAAMwB,SAAS,CAAC;QACd,MAAMC,cAAchB,cAAc,CAACE,aAAaJ;QAChD,MAAMmB,gBAAgBf,aAAa,CAACJ;QAEpC,IAAIkB,aAAa;YACfT,oBAAoBM,OAAO,GAAGK,KAAKC,GAAG;YACtChB,aAAa;QACf,OAAO,IAAIc,eAAe;YACxB,MAAMG,mBAAmBF,KAAKC,GAAG,KAAKZ,oBAAoBM,OAAO;YACjE,MAAMQ,gBAAgBtB,iBAAiBqB;YACvCE,aAAab,kBAAkBI,OAAO;YACtCJ,kBAAkBI,OAAO,GAAGC,WAAWH,SAASY,KAAKC,GAAG,CAAC,GAAGH;QAC9D;IACF,GAAG;QAACnB;QAAWJ;QAAMa;QAASZ;QAAgBC;KAAW;IAEzD,OAAO;QACLE;QACAG;QACAoB,sBAAsBxB;IACxB;AACF,EAAC"}