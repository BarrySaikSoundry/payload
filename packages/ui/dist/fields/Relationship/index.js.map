{"version":3,"sources":["../../../src/fields/Relationship/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\n'use client'\nimport type { PaginatedDocs, Where } from 'payload'\n\nimport { wordBoundariesRegex } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'\n\nimport type { DocumentDrawerProps } from '../../elements/DocumentDrawer/types.js'\nimport type { GetResults, Option, RelationshipFieldProps, Value } from './types.js'\n\nimport { ReactSelect } from '../../elements/ReactSelect/index.js'\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useDebouncedCallback } from '../../hooks/useDebouncedCallback.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { AddNewRelation } from './AddNew/index.js'\nimport { createRelationMap } from './createRelationMap.js'\nimport { findOptionsByValue } from './findOptionsByValue.js'\nimport './index.scss'\nimport { optionsReducer } from './optionsReducer.js'\nimport { MultiValueLabel } from './select-components/MultiValueLabel/index.js'\nimport { SingleValue } from './select-components/SingleValue/index.js'\n\nconst maxResultsPerRequest = 10\n\nconst baseClass = 'relationship'\n\nexport { RelationshipFieldProps }\n\nconst _RelationshipField: React.FC<RelationshipFieldProps> = (props) => {\n  const {\n    name,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    allowCreate = true,\n    className,\n    descriptionProps,\n    errorProps,\n    hasMany,\n    isSortable = true,\n    label,\n    labelProps,\n    path: pathFromProps,\n    readOnly: readOnlyFromProps,\n    relationTo,\n    required,\n    sortOptions,\n    style,\n    validate,\n    width,\n  } = props\n\n  const config = useConfig()\n\n  const {\n    collections,\n    routes: { api },\n    serverURL,\n  } = config\n\n  const { i18n, t } = useTranslation()\n  const { permissions } = useAuth()\n  const { code: locale } = useLocale()\n  const hasMultipleRelations = Array.isArray(relationTo)\n  const [options, dispatchOptions] = useReducer(optionsReducer, [])\n  const [lastFullyLoadedRelation, setLastFullyLoadedRelation] = useState(-1)\n  const [lastLoadedPage, setLastLoadedPage] = useState<Record<string, number>>({})\n  const [errorLoading, setErrorLoading] = useState('')\n  const [search, setSearch] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [enableWordBoundarySearch, setEnableWordBoundarySearch] = useState(false)\n  const menuIsOpen = useRef(false)\n  const hasLoadedFirstPageRef = useRef(false)\n\n  const memoizedValidate = useCallback(\n    (value, validationOptions) => {\n      if (typeof validate === 'function') {\n        return validate(value, { ...validationOptions, required })\n      }\n    },\n    [validate, required],\n  )\n  const { path: pathFromContext, readOnly: readOnlyFromContext } = useFieldProps()\n\n  const {\n    filterOptions,\n    formInitializing,\n    formProcessing,\n    initialValue,\n    path,\n    setValue,\n    showError,\n    value,\n  } = useField<Value | Value[]>({\n    path: pathFromContext ?? pathFromProps ?? name,\n    validate: memoizedValidate,\n  })\n\n  const readOnly = readOnlyFromProps || readOnlyFromContext || formInitializing\n\n  const valueRef = useRef(value)\n  valueRef.current = value\n\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false)\n\n  const getResults: GetResults = useCallback(\n    async ({\n      lastFullyLoadedRelation: lastFullyLoadedRelationArg,\n      lastLoadedPage: lastLoadedPageArg,\n      onSuccess,\n      search: searchArg,\n      sort,\n      value: valueArg,\n    }) => {\n      if (!permissions) {\n        return\n      }\n      const lastFullyLoadedRelationToUse =\n        typeof lastFullyLoadedRelationArg !== 'undefined' ? lastFullyLoadedRelationArg : -1\n\n      const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n      const relationsToFetch =\n        lastFullyLoadedRelationToUse === -1\n          ? relations\n          : relations.slice(lastFullyLoadedRelationToUse + 1)\n\n      let resultsFetched = 0\n      const relationMap = createRelationMap({\n        hasMany,\n        relationTo,\n        value: valueArg,\n      })\n\n      if (!errorLoading) {\n        await relationsToFetch.reduce(async (priorRelation, relation) => {\n          const relationFilterOption = filterOptions?.[relation]\n\n          let lastLoadedPageToUse\n          if (search !== searchArg) {\n            lastLoadedPageToUse = 1\n          } else {\n            lastLoadedPageToUse = lastLoadedPageArg[relation] + 1\n          }\n          await priorRelation\n\n          if (relationFilterOption === false) {\n            setLastFullyLoadedRelation(relations.indexOf(relation))\n            return Promise.resolve()\n          }\n\n          if (resultsFetched < 10) {\n            const collection = collections.find((coll) => coll.slug === relation)\n            const fieldToSearch = collection?.admin?.useAsTitle || 'id'\n            let fieldToSort = collection?.defaultSort || 'id'\n            if (typeof sortOptions === 'string') {\n              fieldToSort = sortOptions\n            } else if (sortOptions?.[relation]) {\n              fieldToSort = sortOptions[relation]\n            }\n\n            const query: {\n              [key: string]: unknown\n              where: Where\n            } = {\n              depth: 0,\n              draft: true,\n              limit: maxResultsPerRequest,\n              locale,\n              page: lastLoadedPageToUse,\n              sort: fieldToSort,\n              where: {\n                and: [\n                  {\n                    id: {\n                      not_in: relationMap[relation],\n                    },\n                  },\n                ],\n              },\n            }\n\n            if (searchArg) {\n              query.where.and.push({\n                [fieldToSearch]: {\n                  like: searchArg,\n                },\n              })\n            }\n\n            if (relationFilterOption && typeof relationFilterOption !== 'boolean') {\n              query.where.and.push(relationFilterOption)\n            }\n\n            let response\n            if (Object.keys(relationMap).length > 100) {\n              response = await fetch(`${serverURL}${api}/${relation}`, {\n                body: qs.stringify(query),\n                credentials: 'include',\n                headers: {\n                  'Accept-Language': i18n.language,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'X-HTTP-Method-Override': 'GET',\n                },\n                method: 'POST',\n              })\n            } else {\n              response = await fetch(`${serverURL}${api}/${relation}?${qs.stringify(query)}`, {\n                credentials: 'include',\n                headers: {\n                  'Accept-Language': i18n.language,\n                },\n              })\n            }\n\n            if (response.ok) {\n              const data: PaginatedDocs<unknown> = await response.json()\n              setLastLoadedPage((prevState) => {\n                return {\n                  ...prevState,\n                  [relation]: lastLoadedPageToUse,\n                }\n              })\n\n              if (!data.nextPage) {\n                setLastFullyLoadedRelation(relations.indexOf(relation))\n              }\n\n              if (data.docs.length > 0) {\n                resultsFetched += data.docs.length\n\n                dispatchOptions({\n                  type: 'ADD',\n                  collection,\n                  // TODO: fix this\n                  // @ts-expect-error-next-line\n                  config,\n                  docs: data.docs,\n                  i18n,\n                  sort,\n                })\n              }\n            } else if (response.status === 403) {\n              setLastFullyLoadedRelation(relations.indexOf(relation))\n              dispatchOptions({\n                type: 'ADD',\n                collection,\n                // TODO: fix this\n                // @ts-expect-error-next-line\n                config,\n                docs: [],\n                i18n,\n                ids: relationMap[relation],\n                sort,\n              })\n            } else {\n              setErrorLoading(t('error:unspecific'))\n            }\n          }\n        }, Promise.resolve())\n\n        if (typeof onSuccess === 'function') onSuccess()\n      }\n    },\n    [\n      permissions,\n      relationTo,\n      hasMany,\n      errorLoading,\n      search,\n      collections,\n      locale,\n      filterOptions,\n      serverURL,\n      sortOptions,\n      api,\n      i18n,\n      config,\n      t,\n    ],\n  )\n\n  const updateSearch = useDebouncedCallback((searchArg: string, valueArg: Value | Value[]) => {\n    void getResults({ lastLoadedPage: {}, search: searchArg, sort: true, value: valueArg })\n    setSearch(searchArg)\n  }, 300)\n\n  const handleInputChange = useCallback(\n    (searchArg: string, valueArg: Value | Value[]) => {\n      if (search !== searchArg) {\n        setLastLoadedPage({})\n        updateSearch(searchArg, valueArg, searchArg !== '')\n      }\n    },\n    [search, updateSearch],\n  )\n\n  // ///////////////////////////////////\n  // Ensure we have an option for each value\n  // ///////////////////////////////////\n\n  useEffect(() => {\n    const relationMap = createRelationMap({\n      hasMany,\n      relationTo,\n      value,\n    })\n\n    void Object.entries(relationMap).reduce(async (priorRelation, [relation, ids]) => {\n      await priorRelation\n\n      const idsToLoad = ids.filter((id) => {\n        return !options.find((optionGroup) =>\n          optionGroup?.options?.find(\n            (option) => option.value === id && option.relationTo === relation,\n          ),\n        )\n      })\n\n      if (idsToLoad.length > 0) {\n        const query = {\n          depth: 0,\n          draft: true,\n          limit: idsToLoad.length,\n          locale,\n          where: {\n            id: {\n              in: idsToLoad,\n            },\n          },\n        }\n\n        if (!errorLoading) {\n          let response\n          if (Object.keys(relationMap).length > 100) {\n            response = await fetch(`${serverURL}${api}/${relation}`, {\n              body: qs.stringify(query),\n              credentials: 'include',\n              headers: {\n                'Accept-Language': i18n.language,\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'X-HTTP-Method-Override': 'GET',\n              },\n              method: 'POST',\n            })\n          } else {\n            response = await fetch(`${serverURL}${api}/${relation}?${qs.stringify(query)}`, {\n              credentials: 'include',\n              headers: {\n                'Accept-Language': i18n.language,\n              },\n            })\n          }\n\n          const collection = collections.find((coll) => coll.slug === relation)\n          let docs = []\n\n          if (response.ok) {\n            const data = await response.json()\n            docs = data.docs\n          }\n\n          dispatchOptions({\n            type: 'ADD',\n            collection,\n            // TODO: fix this\n            // @ts-expect-error-next-line\n            config,\n            docs,\n            i18n,\n            ids: idsToLoad,\n            sort: true,\n          })\n        }\n      }\n    }, Promise.resolve())\n  }, [\n    options,\n    value,\n    hasMany,\n    errorLoading,\n    collections,\n    hasMultipleRelations,\n    serverURL,\n    api,\n    i18n,\n    relationTo,\n    locale,\n    config,\n  ])\n\n  // Determine if we should switch to word boundary search\n  useEffect(() => {\n    const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n    const isIdOnly = relations.reduce((idOnly, relation) => {\n      const collection = collections.find((coll) => coll.slug === relation)\n      const fieldToSearch = collection?.admin?.useAsTitle || 'id'\n      return fieldToSearch === 'id' && idOnly\n    }, true)\n    setEnableWordBoundarySearch(!isIdOnly)\n  }, [relationTo, collections])\n\n  // When (`relationTo` || `filterOptions` || `locale`) changes, reset component\n  // Note - effect should not run on first run\n  useEffect(() => {\n    // If the menu is open while filterOptions changes\n    // due to latency of getFormState and fast clicking into this field,\n    // re-fetch options\n\n    if (hasLoadedFirstPageRef.current && menuIsOpen.current) {\n      setIsLoading(true)\n      void getResults({\n        lastLoadedPage: {},\n        onSuccess: () => {\n          hasLoadedFirstPageRef.current = true\n          setIsLoading(false)\n        },\n        value: valueRef.current,\n      })\n    }\n\n    // If the menu is not open, still reset the field state\n    // because we need to get new options next time the menu\n    // opens by the user\n\n    dispatchOptions({ type: 'CLEAR' })\n    setLastFullyLoadedRelation(-1)\n    setLastLoadedPage({})\n    hasLoadedFirstPageRef.current = false\n  }, [\n    relationTo,\n    filterOptions,\n    locale,\n    menuIsOpen,\n    getResults,\n    valueRef,\n    hasLoadedFirstPageRef,\n    path,\n  ])\n\n  const onSave = useCallback<DocumentDrawerProps['onSave']>(\n    (args) => {\n      dispatchOptions({\n        type: 'UPDATE',\n        collection: args.collectionConfig,\n        // TODO: fix this\n        // @ts-expect-error-next-line\n        config,\n        doc: args.doc,\n        i18n,\n      })\n    },\n    [i18n, config],\n  )\n\n  const filterOption = useCallback((item: Option, searchFilter: string) => {\n    if (!searchFilter) {\n      return true\n    }\n    const r = wordBoundariesRegex(searchFilter || '')\n    // breaking the labels to search into smaller parts increases performance\n    const breakApartThreshold = 250\n    let string = item.label\n    // strings less than breakApartThreshold length won't be chunked\n    while (string.length > breakApartThreshold) {\n      // slicing by the next space after the length of the search input prevents slicing the string up by partial words\n      const indexOfSpace = string.indexOf(' ', searchFilter.length)\n      if (r.test(string.slice(0, indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1))) {\n        return true\n      }\n      string = string.slice(indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1)\n    }\n    return r.test(string.slice(-breakApartThreshold))\n  }, [])\n\n  const valueToRender = findOptionsByValue({ options, value })\n\n  if (!Array.isArray(valueToRender) && valueToRender?.value === 'null') valueToRender.value = null\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        showError && 'error',\n        errorLoading && 'error-loading',\n        readOnly && `${baseClass}--read-only`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n      style={{\n        ...style,\n        width,\n      }}\n    >\n      <FieldLabel\n        CustomLabel={CustomLabel}\n        label={label}\n        required={required}\n        {...(labelProps || {})}\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />\n\n        {!errorLoading && (\n          <div className={`${baseClass}__wrap`}>\n            <ReactSelect\n              backspaceRemovesValue={!drawerIsOpen}\n              components={{\n                MultiValueLabel,\n                SingleValue,\n              }}\n              customProps={{\n                disableKeyDown: drawerIsOpen,\n                disableMouseDown: drawerIsOpen,\n                onSave,\n                setDrawerIsOpen,\n              }}\n              disabled={readOnly || formProcessing || drawerIsOpen}\n              filterOption={enableWordBoundarySearch ? filterOption : undefined}\n              getOptionValue={(option) => {\n                if (!option) return undefined\n                return hasMany && Array.isArray(relationTo)\n                  ? `${option.relationTo}_${option.value}`\n                  : option.value\n              }}\n              isLoading={isLoading}\n              isMulti={hasMany}\n              isSortable={isSortable}\n              onChange={\n                !readOnly\n                  ? (selected) => {\n                      if (selected === null) {\n                        setValue(hasMany ? [] : null)\n                      } else if (hasMany && Array.isArray(selected)) {\n                        setValue(\n                          selected\n                            ? selected.map((option) => {\n                                if (hasMultipleRelations) {\n                                  return {\n                                    relationTo: option.relationTo,\n                                    value: option.value,\n                                  }\n                                }\n\n                                return option.value\n                              })\n                            : null,\n                        )\n                      } else if (hasMultipleRelations && !Array.isArray(selected)) {\n                        setValue({\n                          relationTo: selected.relationTo,\n                          value: selected.value,\n                        })\n                      } else if (!Array.isArray(selected)) {\n                        setValue(selected.value)\n                      }\n                    }\n                  : undefined\n              }\n              onInputChange={(newSearch) => handleInputChange(newSearch, value)}\n              onMenuClose={() => {\n                menuIsOpen.current = false\n              }}\n              onMenuOpen={() => {\n                menuIsOpen.current = true\n\n                if (!hasLoadedFirstPageRef.current) {\n                  setIsLoading(true)\n                  void getResults({\n                    lastLoadedPage: {},\n                    onSuccess: () => {\n                      hasLoadedFirstPageRef.current = true\n                      setIsLoading(false)\n                    },\n                    value: initialValue,\n                  })\n                }\n              }}\n              onMenuScrollToBottom={() => {\n                void getResults({\n                  lastFullyLoadedRelation,\n                  lastLoadedPage,\n                  search,\n                  sort: false,\n                  value: initialValue,\n                })\n              }}\n              options={options}\n              showError={showError}\n              value={valueToRender ?? null}\n            />\n            {!readOnly && allowCreate && (\n              <AddNewRelation\n                {...{\n                  dispatchOptions,\n                  hasMany,\n                  options,\n                  path,\n                  relationTo,\n                  setValue,\n                  value,\n                }}\n              />\n            )}\n          </div>\n        )}\n        {errorLoading && <div className={`${baseClass}__error-loading`}>{errorLoading}</div>}\n        {CustomDescription !== undefined ? (\n          CustomDescription\n        ) : (\n          <FieldDescription {...(descriptionProps || {})} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport const RelationshipField = withCondition(_RelationshipField)\n"],"names":["wordBoundariesRegex","qs","React","useCallback","useEffect","useReducer","useRef","useState","ReactSelect","useFieldProps","useField","withCondition","useDebouncedCallback","useAuth","useConfig","useLocale","useTranslation","FieldDescription","FieldError","FieldLabel","fieldBaseClass","AddNewRelation","createRelationMap","findOptionsByValue","optionsReducer","MultiValueLabel","SingleValue","maxResultsPerRequest","baseClass","_RelationshipField","props","name","CustomDescription","CustomError","CustomLabel","allowCreate","className","descriptionProps","errorProps","hasMany","isSortable","label","labelProps","path","pathFromProps","readOnly","readOnlyFromProps","relationTo","required","sortOptions","style","validate","width","config","collections","routes","api","serverURL","i18n","t","permissions","code","locale","hasMultipleRelations","Array","isArray","options","dispatchOptions","lastFullyLoadedRelation","setLastFullyLoadedRelation","lastLoadedPage","setLastLoadedPage","errorLoading","setErrorLoading","search","setSearch","isLoading","setIsLoading","enableWordBoundarySearch","setEnableWordBoundarySearch","menuIsOpen","hasLoadedFirstPageRef","memoizedValidate","value","validationOptions","pathFromContext","readOnlyFromContext","filterOptions","formInitializing","formProcessing","initialValue","setValue","showError","valueRef","current","drawerIsOpen","setDrawerIsOpen","getResults","lastFullyLoadedRelationArg","lastLoadedPageArg","onSuccess","searchArg","sort","valueArg","lastFullyLoadedRelationToUse","relations","relationsToFetch","slice","resultsFetched","relationMap","reduce","priorRelation","relation","relationFilterOption","lastLoadedPageToUse","indexOf","Promise","resolve","collection","find","coll","slug","fieldToSearch","admin","useAsTitle","fieldToSort","defaultSort","query","depth","draft","limit","page","where","and","id","not_in","push","like","response","Object","keys","length","fetch","body","stringify","credentials","headers","language","method","ok","data","json","prevState","nextPage","docs","type","status","ids","updateSearch","handleInputChange","entries","idsToLoad","filter","optionGroup","option","in","isIdOnly","idOnly","onSave","args","collectionConfig","doc","filterOption","item","searchFilter","r","breakApartThreshold","string","indexOfSpace","test","valueToRender","div","Boolean","join","replace","backspaceRemovesValue","components","customProps","disableKeyDown","disableMouseDown","disabled","undefined","getOptionValue","isMulti","onChange","selected","map","onInputChange","newSearch","onMenuClose","onMenuOpen","onMenuScrollToBottom","RelationshipField"],"mappings":"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"}