{"version":3,"sources":["../../../src/fields/Select/index.tsx"],"sourcesContent":["'use client'\nimport type { ClientValidate, Option, OptionObject } from 'payload'\n\nimport React, { useCallback } from 'react'\n\nimport type { ReactSelectAdapterProps } from '../../elements/ReactSelect/types.js'\nimport type { FormFieldBase } from '../shared/index.js'\nimport type { SelectInputProps } from './Input.js'\n\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { SelectInput } from './Input.js'\n\nexport type SelectFieldProps = {\n  hasMany?: boolean\n  isClearable?: boolean\n  isSortable?: boolean\n  name?: string\n  onChange?: (e: string | string[]) => void\n  options?: Option[]\n  path?: string\n  value?: string\n  width?: string\n} & FormFieldBase\n\nconst formatOptions = (options: Option[]): OptionObject[] =>\n  options.map((option) => {\n    if (typeof option === 'object' && (option.value || option.value === '')) {\n      return option\n    }\n\n    return {\n      label: option,\n      value: option,\n    } as OptionObject\n  })\n\nconst _SelectField: React.FC<SelectFieldProps> = (props) => {\n  const {\n    name,\n    AfterInput,\n    BeforeInput,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    className,\n    descriptionProps,\n    errorProps,\n    hasMany = false,\n    isClearable = true,\n    isSortable = true,\n    label,\n    labelProps,\n    onChange: onChangeFromProps,\n    options: optionsFromProps = [],\n    path: pathFromProps,\n    readOnly: readOnlyFromProps,\n    required,\n    style,\n    validate,\n    width,\n  } = props\n\n  const options = React.useMemo(() => formatOptions(optionsFromProps), [optionsFromProps])\n\n  const memoizedValidate: ClientValidate = useCallback(\n    (value, validationOptions) => {\n      if (typeof validate === 'function')\n        return validate(value, { ...validationOptions, hasMany, options, required })\n    },\n    [validate, required, hasMany, options],\n  )\n\n  const { path: pathFromContext, readOnly: readOnlyFromContext } = useFieldProps()\n\n  const { formInitializing, formProcessing, path, setValue, showError, value } = useField({\n    path: pathFromContext ?? pathFromProps ?? name,\n    validate: memoizedValidate,\n  })\n\n  const disabled = readOnlyFromProps || readOnlyFromContext || formProcessing || formInitializing\n\n  const onChange: ReactSelectAdapterProps['onChange'] = useCallback(\n    (selectedOption: OptionObject | OptionObject[]) => {\n      if (!disabled) {\n        let newValue: string | string[] = null\n        if (selectedOption && hasMany) {\n          if (Array.isArray(selectedOption)) {\n            newValue = selectedOption.map((option) => option.value)\n          } else {\n            newValue = []\n          }\n        } else if (selectedOption && !Array.isArray(selectedOption)) {\n          newValue = selectedOption.value\n        }\n\n        if (typeof onChangeFromProps === 'function') {\n          onChangeFromProps(newValue)\n        }\n\n        setValue(newValue)\n      }\n    },\n    [disabled, hasMany, setValue, onChangeFromProps],\n  )\n\n  return (\n    <SelectInput\n      AfterInput={AfterInput}\n      BeforeInput={BeforeInput}\n      CustomDescription={CustomDescription}\n      CustomError={CustomError}\n      CustomLabel={CustomLabel}\n      className={className}\n      descriptionProps={descriptionProps}\n      errorProps={errorProps}\n      hasMany={hasMany}\n      isClearable={isClearable}\n      isSortable={isSortable}\n      label={label}\n      labelProps={labelProps}\n      name={name}\n      onChange={onChange}\n      options={options}\n      path={path}\n      readOnly={disabled}\n      required={required}\n      showError={showError}\n      style={style}\n      value={value as string | string[]}\n      width={width}\n    />\n  )\n}\n\nexport const SelectField = withCondition(_SelectField)\n\nexport { SelectInput, type SelectInputProps }\n"],"names":["React","useCallback","useFieldProps","useField","withCondition","SelectInput","formatOptions","options","map","option","value","label","_SelectField","props","name","AfterInput","BeforeInput","CustomDescription","CustomError","CustomLabel","className","descriptionProps","errorProps","hasMany","isClearable","isSortable","labelProps","onChange","onChangeFromProps","optionsFromProps","path","pathFromProps","readOnly","readOnlyFromProps","required","style","validate","width","useMemo","memoizedValidate","validationOptions","pathFromContext","readOnlyFromContext","formInitializing","formProcessing","setValue","showError","disabled","selectedOption","newValue","Array","isArray","SelectField"],"mappings":"AAAA;;AAGA,OAAOA,SAASC,WAAW,QAAQ,QAAO;AAM1C,SAASC,aAAa,QAAQ,0CAAyC;AACvE,SAASC,QAAQ,QAAQ,gCAA+B;AACxD,SAASC,aAAa,QAAQ,qCAAoC;AAClE,SAASC,WAAW,QAAQ,aAAY;AAcxC,MAAMC,gBAAgB,CAACC,UACrBA,QAAQC,GAAG,CAAC,CAACC;QACX,IAAI,OAAOA,WAAW,YAAaA,CAAAA,OAAOC,KAAK,IAAID,OAAOC,KAAK,KAAK,EAAC,GAAI;YACvE,OAAOD;QACT;QAEA,OAAO;YACLE,OAAOF;YACPC,OAAOD;QACT;IACF;AAEF,MAAMG,eAA2C,CAACC;IAChD,MAAM,EACJC,IAAI,EACJC,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,gBAAgB,EAChBC,UAAU,EACVC,UAAU,KAAK,EACfC,cAAc,IAAI,EAClBC,aAAa,IAAI,EACjBd,KAAK,EACLe,UAAU,EACVC,UAAUC,iBAAiB,EAC3BrB,SAASsB,mBAAmB,EAAE,EAC9BC,MAAMC,aAAa,EACnBC,UAAUC,iBAAiB,EAC3BC,QAAQ,EACRC,KAAK,EACLC,QAAQ,EACRC,KAAK,EACN,GAAGxB;IAEJ,MAAMN,UAAUP,MAAMsC,OAAO,CAAC,IAAMhC,cAAcuB,mBAAmB;QAACA;KAAiB;IAEvF,MAAMU,mBAAmCtC,YACvC,CAACS,OAAO8B;QACN,IAAI,OAAOJ,aAAa,YACtB,OAAOA,SAAS1B,OAAO;YAAE,GAAG8B,iBAAiB;YAAEjB;YAAShB;YAAS2B;QAAS;IAC9E,GACA;QAACE;QAAUF;QAAUX;QAAShB;KAAQ;IAGxC,MAAM,EAAEuB,MAAMW,eAAe,EAAET,UAAUU,mBAAmB,EAAE,GAAGxC;IAEjE,MAAM,EAAEyC,gBAAgB,EAAEC,cAAc,EAAEd,IAAI,EAAEe,QAAQ,EAAEC,SAAS,EAAEpC,KAAK,EAAE,GAAGP,SAAS;QACtF2B,MAAMW,mBAAmBV,iBAAiBjB;QAC1CsB,UAAUG;IACZ;IAEA,MAAMQ,WAAWd,qBAAqBS,uBAAuBE,kBAAkBD;IAE/E,MAAMhB,WAAgD1B,YACpD,CAAC+C;QACC,IAAI,CAACD,UAAU;YACb,IAAIE,WAA8B;YAClC,IAAID,kBAAkBzB,SAAS;gBAC7B,IAAI2B,MAAMC,OAAO,CAACH,iBAAiB;oBACjCC,WAAWD,eAAexC,GAAG,CAAC,CAACC,SAAWA,OAAOC,KAAK;gBACxD,OAAO;oBACLuC,WAAW,EAAE;gBACf;YACF,OAAO,IAAID,kBAAkB,CAACE,MAAMC,OAAO,CAACH,iBAAiB;gBAC3DC,WAAWD,eAAetC,KAAK;YACjC;YAEA,IAAI,OAAOkB,sBAAsB,YAAY;gBAC3CA,kBAAkBqB;YACpB;YAEAJ,SAASI;QACX;IACF,GACA;QAACF;QAAUxB;QAASsB;QAAUjB;KAAkB;IAGlD,qBACE,KAACvB;QACCU,YAAYA;QACZC,aAAaA;QACbC,mBAAmBA;QACnBC,aAAaA;QACbC,aAAaA;QACbC,WAAWA;QACXC,kBAAkBA;QAClBC,YAAYA;QACZC,SAASA;QACTC,aAAaA;QACbC,YAAYA;QACZd,OAAOA;QACPe,YAAYA;QACZZ,MAAMA;QACNa,UAAUA;QACVpB,SAASA;QACTuB,MAAMA;QACNE,UAAUe;QACVb,UAAUA;QACVY,WAAWA;QACXX,OAAOA;QACPzB,OAAOA;QACP2B,OAAOA;;AAGb;AAEA,OAAO,MAAMe,cAAchD,cAAcQ,cAAa;AAEtD,SAASP,WAAW,GAAyB"}