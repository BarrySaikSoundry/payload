{"version":3,"sources":["../../../src/fields/Select/Input.tsx"],"sourcesContent":["'use client'\nimport type { OptionObject } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React from 'react'\n\nimport type { ReactSelectAdapterProps } from '../../elements/ReactSelect/types.js'\nimport type { SelectFieldProps } from './index.js'\n\nimport { ReactSelect } from '../../elements/ReactSelect/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nexport type SelectInputProps = {\n  onChange?: ReactSelectAdapterProps['onChange']\n  options?: OptionObject[]\n  showError?: boolean\n  value?: string | string[]\n} & Omit<\n  SelectFieldProps,\n  | 'custom'\n  | 'disabled'\n  | 'docPreferences'\n  | 'locale'\n  | 'localized'\n  | 'onChange'\n  | 'options'\n  | 'rtl'\n  | 'type'\n  | 'user'\n  | 'validate'\n  | 'value'\n>\n\nexport const SelectInput: React.FC<SelectInputProps> = (props) => {\n  const {\n    AfterInput,\n    BeforeInput,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    className,\n    descriptionProps,\n    errorProps,\n    hasMany = false,\n    isClearable = true,\n    isSortable = true,\n    label,\n    labelProps,\n    onChange,\n    options,\n    path,\n    readOnly,\n    required,\n    showError,\n    style,\n    value,\n    width,\n  } = props\n\n  const { i18n } = useTranslation()\n\n  let valueToRender\n\n  if (hasMany && Array.isArray(value)) {\n    valueToRender = value.map((val) => {\n      const matchingOption = options.find((option) => option.value === val)\n      return {\n        label: matchingOption ? getTranslation(matchingOption.label, i18n) : val,\n        value: matchingOption?.value ?? val,\n      }\n    })\n  } else if (value) {\n    const matchingOption = options.find((option) => option.value === value)\n    valueToRender = {\n      label: matchingOption ? getTranslation(matchingOption.label, i18n) : value,\n      value: matchingOption?.value ?? value,\n    }\n  }\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        'select',\n        className,\n        showError && 'error',\n        readOnly && 'read-only',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n      style={{\n        ...style,\n        width,\n      }}\n    >\n      <FieldLabel\n        CustomLabel={CustomLabel}\n        label={label}\n        required={required}\n        {...(labelProps || {})}\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />\n        {BeforeInput}\n        <ReactSelect\n          disabled={readOnly}\n          isClearable={isClearable}\n          isMulti={hasMany}\n          isSortable={isSortable}\n          onChange={onChange}\n          options={options.map((option) => ({\n            ...option,\n            label: getTranslation(option.label, i18n),\n          }))}\n          showError={showError}\n          value={valueToRender as OptionObject}\n        />\n        {AfterInput}\n      </div>\n      {CustomDescription !== undefined ? (\n        CustomDescription\n      ) : (\n        <FieldDescription {...(descriptionProps || {})} />\n      )}\n    </div>\n  )\n}\n"],"names":["getTranslation","React","ReactSelect","useTranslation","FieldDescription","FieldError","FieldLabel","fieldBaseClass","SelectInput","props","AfterInput","BeforeInput","CustomDescription","CustomError","CustomLabel","className","descriptionProps","errorProps","hasMany","isClearable","isSortable","label","labelProps","onChange","options","path","readOnly","required","showError","style","value","width","i18n","valueToRender","Array","isArray","map","val","matchingOption","find","option","div","filter","Boolean","join","id","replace","disabled","isMulti","undefined"],"mappings":"AAAA;;AAGA,SAASA,cAAc,QAAQ,2BAA0B;AACzD,OAAOC,WAAW,QAAO;AAKzB,SAASC,WAAW,QAAQ,sCAAqC;AACjE,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,gBAAgB,QAAQ,+BAA8B;AAC/D,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,cAAc,QAAQ,qBAAoB;AACnD,OAAO,eAAc;AAuBrB,OAAO,MAAMC,cAA0C,CAACC;IACtD,MAAM,EACJC,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,gBAAgB,EAChBC,UAAU,EACVC,UAAU,KAAK,EACfC,cAAc,IAAI,EAClBC,aAAa,IAAI,EACjBC,KAAK,EACLC,UAAU,EACVC,QAAQ,EACRC,OAAO,EACPC,IAAI,EACJC,QAAQ,EACRC,QAAQ,EACRC,SAAS,EACTC,KAAK,EACLC,KAAK,EACLC,KAAK,EACN,GAAGtB;IAEJ,MAAM,EAAEuB,IAAI,EAAE,GAAG7B;IAEjB,IAAI8B;IAEJ,IAAIf,WAAWgB,MAAMC,OAAO,CAACL,QAAQ;QACnCG,gBAAgBH,MAAMM,GAAG,CAAC,CAACC;YACzB,MAAMC,iBAAiBd,QAAQe,IAAI,CAAC,CAACC,SAAWA,OAAOV,KAAK,KAAKO;YACjE,OAAO;gBACLhB,OAAOiB,iBAAiBtC,eAAesC,eAAejB,KAAK,EAAEW,QAAQK;gBACrEP,OAAOQ,gBAAgBR,SAASO;YAClC;QACF;IACF,OAAO,IAAIP,OAAO;QAChB,MAAMQ,iBAAiBd,QAAQe,IAAI,CAAC,CAACC,SAAWA,OAAOV,KAAK,KAAKA;QACjEG,gBAAgB;YACdZ,OAAOiB,iBAAiBtC,eAAesC,eAAejB,KAAK,EAAEW,QAAQF;YACrEA,OAAOQ,gBAAgBR,SAASA;QAClC;IACF;IAEA,qBACE,MAACW;QACC1B,WAAW;YACTR;YACA;YACAQ;YACAa,aAAa;YACbF,YAAY;SACb,CACEgB,MAAM,CAACC,SACPC,IAAI,CAAC;QACRC,IAAI,CAAC,MAAM,EAAEpB,KAAKqB,OAAO,CAAC,OAAO,MAAM,CAAC;QACxCjB,OAAO;YACL,GAAGA,KAAK;YACRE;QACF;;0BAEA,KAACzB;gBACCQ,aAAaA;gBACbO,OAAOA;gBACPM,UAAUA;gBACT,GAAIL,cAAc,CAAC,CAAC;;0BAEvB,MAACmB;gBAAI1B,WAAW,CAAC,EAAER,eAAe,MAAM,CAAC;;kCACvC,KAACF;wBAAWQ,aAAaA;wBAAaY,MAAMA;wBAAO,GAAIR,cAAc,CAAC,CAAC;;oBACtEN;kCACD,KAACT;wBACC6C,UAAUrB;wBACVP,aAAaA;wBACb6B,SAAS9B;wBACTE,YAAYA;wBACZG,UAAUA;wBACVC,SAASA,QAAQY,GAAG,CAAC,CAACI,SAAY,CAAA;gCAChC,GAAGA,MAAM;gCACTnB,OAAOrB,eAAewC,OAAOnB,KAAK,EAAEW;4BACtC,CAAA;wBACAJ,WAAWA;wBACXE,OAAOG;;oBAERvB;;;YAEFE,sBAAsBqC,YACrBrC,kCAEA,KAACR;gBAAkB,GAAIY,oBAAoB,CAAC,CAAC;;;;AAIrD,EAAC"}