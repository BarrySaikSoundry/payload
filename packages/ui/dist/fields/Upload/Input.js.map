{"version":3,"sources":["../../../src/fields/Upload/Input.tsx"],"sourcesContent":["'use client'\n\nimport type { ClientCollectionConfig, FilterOptionsResult, UploadField } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport type { DocumentDrawerProps } from '../../elements/DocumentDrawer/types.js'\nimport type { ListDrawerProps } from '../../elements/ListDrawer/types.js'\nimport type { UploadFieldProps } from './types.js'\n\nimport { Button } from '../../elements/Button/index.js'\nimport { useDocumentDrawer } from '../../elements/DocumentDrawer/index.js'\nimport { FileDetails } from '../../elements/FileDetails/index.js'\nimport { useListDrawer } from '../../elements/ListDrawer/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nconst baseClass = 'upload'\n\nexport type UploadInputProps = {\n  api?: string\n  collection?: ClientCollectionConfig\n  customUploadActions?: React.ReactNode[]\n  filterOptions?: FilterOptionsResult\n  onChange?: (e) => void\n  relationTo?: UploadField['relationTo']\n  serverURL?: string\n  showError?: boolean\n  value?: string\n} & Omit<UploadFieldProps, 'filterOptions'>\n\nexport const UploadInput: React.FC<UploadInputProps> = (props) => {\n  const {\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    api = '/api',\n    className,\n    collection,\n    customUploadActions,\n    descriptionProps,\n    errorProps,\n    filterOptions,\n    label,\n    labelProps,\n    onChange,\n    readOnly,\n    relationTo,\n    required,\n    serverURL,\n    showError,\n    style,\n    value,\n    width,\n  } = props\n\n  const { i18n, t } = useTranslation()\n\n  const [fileDoc, setFileDoc] = useState(undefined)\n  const [missingFile, setMissingFile] = useState(false)\n  const [collectionSlugs] = useState([collection?.slug])\n\n  const [DocumentDrawer, DocumentDrawerToggler, { closeDrawer }] = useDocumentDrawer({\n    collectionSlug: collectionSlugs[0],\n  })\n\n  const [ListDrawer, ListDrawerToggler, { closeDrawer: closeListDrawer }] = useListDrawer({\n    collectionSlugs,\n    filterOptions,\n  })\n\n  useEffect(() => {\n    if (value !== null && typeof value !== 'undefined' && value !== '') {\n      const fetchFile = async () => {\n        const response = await fetch(`${serverURL}${api}/${relationTo}/${value}`, {\n          credentials: 'include',\n          headers: {\n            'Accept-Language': i18n.language,\n          },\n        })\n        if (response.ok) {\n          const json = await response.json()\n          setFileDoc(json)\n        } else {\n          setMissingFile(true)\n          setFileDoc(undefined)\n        }\n      }\n\n      void fetchFile()\n    } else {\n      setFileDoc(undefined)\n    }\n  }, [value, relationTo, api, serverURL, i18n])\n\n  const onSave = useCallback<DocumentDrawerProps['onSave']>(\n    (args) => {\n      setMissingFile(false)\n      onChange(args.doc)\n      closeDrawer()\n    },\n    [onChange, closeDrawer],\n  )\n\n  const onSelect = useCallback<ListDrawerProps['onSelect']>(\n    (args) => {\n      setMissingFile(false)\n      onChange({\n        id: args.docID,\n      })\n      closeListDrawer()\n    },\n    [onChange, closeListDrawer],\n  )\n\n  if (collection.upload) {\n    return (\n      <div\n        className={[\n          fieldBaseClass,\n          baseClass,\n          className,\n          showError && 'error',\n          readOnly && 'read-only',\n        ]\n          .filter(Boolean)\n          .join(' ')}\n        style={{\n          ...style,\n          width,\n        }}\n      >\n        <FieldLabel\n          CustomLabel={CustomLabel}\n          label={label}\n          required={required}\n          {...(labelProps || {})}\n        />\n        <div className={`${fieldBaseClass}__wrap`}>\n          <FieldError CustomError={CustomError} {...(errorProps || {})} />\n\n          {collection?.upload && (\n            <React.Fragment>\n              {fileDoc && !missingFile && (\n                <FileDetails\n                  collectionSlug={relationTo}\n                  customUploadActions={customUploadActions}\n                  doc={fileDoc}\n                  handleRemove={\n                    readOnly\n                      ? undefined\n                      : () => {\n                          onChange(null)\n                        }\n                  }\n                  uploadConfig={collection.upload}\n                />\n              )}\n              {(!fileDoc || missingFile) && (\n                <div className={`${baseClass}__wrap`}>\n                  <div className={`${baseClass}__buttons`}>\n                    <DocumentDrawerToggler className={`${baseClass}__toggler`} disabled={readOnly}>\n                      <Button buttonStyle=\"secondary\" disabled={readOnly} el=\"div\">\n                        {t('fields:uploadNewLabel', {\n                          label: getTranslation(collection.labels.singular, i18n),\n                        })}\n                      </Button>\n                    </DocumentDrawerToggler>\n                    <ListDrawerToggler className={`${baseClass}__toggler`} disabled={readOnly}>\n                      <Button buttonStyle=\"secondary\" disabled={readOnly} el=\"div\">\n                        {t('fields:chooseFromExisting')}\n                      </Button>\n                    </ListDrawerToggler>\n                  </div>\n                </div>\n              )}\n              {CustomDescription !== undefined ? (\n                CustomDescription\n              ) : (\n                <FieldDescription {...(descriptionProps || {})} />\n              )}\n            </React.Fragment>\n          )}\n          {!readOnly && <DocumentDrawer onSave={onSave} />}\n          {!readOnly && <ListDrawer onSelect={onSelect} />}\n        </div>\n      </div>\n    )\n  }\n\n  return null\n}\n"],"names":["getTranslation","React","useCallback","useEffect","useState","Button","useDocumentDrawer","FileDetails","useListDrawer","useTranslation","FieldDescription","FieldError","FieldLabel","fieldBaseClass","baseClass","UploadInput","props","CustomDescription","CustomError","CustomLabel","api","className","collection","customUploadActions","descriptionProps","errorProps","filterOptions","label","labelProps","onChange","readOnly","relationTo","required","serverURL","showError","style","value","width","i18n","t","fileDoc","setFileDoc","undefined","missingFile","setMissingFile","collectionSlugs","slug","DocumentDrawer","DocumentDrawerToggler","closeDrawer","collectionSlug","ListDrawer","ListDrawerToggler","closeListDrawer","fetchFile","response","fetch","credentials","headers","language","ok","json","onSave","args","doc","onSelect","id","docID","upload","div","filter","Boolean","join","Fragment","handleRemove","uploadConfig","disabled","buttonStyle","el","labels","singular"],"mappings":"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"}