{"version":3,"sources":["../../../src/fields/Array/index.tsx"],"sourcesContent":["'use client'\nimport type { ArrayField as ArrayFieldType } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useCallback } from 'react'\n\nimport type { FieldMap } from '../../providers/ComponentMap/buildComponentMap/types.js'\nimport type { FormFieldBase } from '../shared/index.js'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { ArrayRow } from './ArrayRow.js'\nimport './index.scss'\n\nconst baseClass = 'array-field'\n\nexport type ArrayFieldProps = {\n  CustomRowLabel?: React.ReactNode\n  fieldMap: FieldMap\n  forceRender?: boolean\n  isSortable?: boolean\n  labels?: ArrayFieldType['labels']\n  maxRows?: ArrayFieldType['maxRows']\n  minRows?: ArrayFieldType['minRows']\n  name?: string\n  width?: string\n} & FormFieldBase\n\nexport const _ArrayField: React.FC<ArrayFieldProps> = (props) => {\n  const {\n    name,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    CustomRowLabel,\n    className,\n    descriptionProps,\n    errorProps,\n    fieldMap,\n    forceRender = false,\n    isSortable = true,\n    label,\n    labelProps,\n    localized,\n    maxRows,\n    minRows: minRowsProp,\n    path: pathFromProps,\n    readOnly: readOnlyFromProps,\n    required,\n    validate,\n  } = props\n\n  const {\n    indexPath,\n    path: pathFromContext,\n    permissions,\n    readOnly: readOnlyFromContext,\n  } = useFieldProps()\n  const minRows = minRowsProp ?? required ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, setModified } = useForm()\n  const submitted = useFormSubmitted()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n  const { localization } = useConfig()\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale || 'en'\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  // Handle labeling for Arrays, Global Arrays, and Blocks\n  const getLabels = (p: ArrayFieldProps): ArrayFieldType['labels'] => {\n    if ('labels' in p && p?.labels) return p.labels\n    if ('label' in p && p?.label) return { plural: undefined, singular: p?.label }\n    return { plural: t('general:rows'), singular: t('general:row') }\n  }\n\n  const labels = getLabels(props)\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    errorPaths,\n    formInitializing,\n    formProcessing,\n    path,\n    rows = [],\n    schemaPath,\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    path: pathFromContext ?? pathFromProps ?? name,\n    validate: memoizedValidate,\n  })\n\n  const disabled = readOnlyFromProps || readOnlyFromContext || formProcessing || formInitializing\n\n  const addRow = useCallback(\n    async (rowIndex: number) => {\n      await addFieldRow({ path, rowIndex, schemaPath })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [addFieldRow, path, setModified, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'REMOVE_ROW', path, rowIndex })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      dispatchFields({ type: 'MOVE_ROW', moveFromIndex, moveToIndex, path })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', collapsed, path, setDocFieldPreferences })\n    },\n    [dispatchFields, path, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', collapsed, path, rowID, setDocFieldPreferences })\n    },\n    [dispatchFields, path, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && errorPaths.length > 0\n\n  const showRequired = disabled && rows.length === 0\n  const showMinRows = rows.length < minRows || (required && rows.length === 0)\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n    >\n      {showError && <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__header-content`}>\n            <h3 className={`${baseClass}__title`}>\n              <FieldLabel\n                CustomLabel={CustomLabel}\n                as=\"span\"\n                label={label}\n                required={required}\n                unstyled\n                {...(labelProps || {})}\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rows.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <FieldDescription CustomDescription={CustomDescription} {...(descriptionProps || {})} />\n      </header>\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {(rows.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__draggable-rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((row, i) => {\n            const rowErrorCount = errorPaths?.filter((errorPath) =>\n              errorPath.startsWith(`${path}.${i}.`),\n            ).length\n            return (\n              <DraggableSortableItem disabled={disabled || !isSortable} id={row.id} key={row.id}>\n                {(draggableSortableItemProps) => (\n                  <ArrayRow\n                    {...draggableSortableItemProps}\n                    CustomRowLabel={CustomRowLabel}\n                    addRow={addRow}\n                    duplicateRow={duplicateRow}\n                    errorCount={rowErrorCount}\n                    fieldMap={fieldMap}\n                    forceRender={forceRender}\n                    hasMaxRows={hasMaxRows}\n                    indexPath={indexPath}\n                    isSortable={isSortable}\n                    labels={labels}\n                    moveRow={moveRow}\n                    path={path}\n                    permissions={permissions}\n                    readOnly={disabled}\n                    removeRow={removeRow}\n                    row={row}\n                    rowCount={rows.length}\n                    rowIndex={i}\n                    schemaPath={schemaPath}\n                    setCollapse={setCollapse}\n                  />\n                )}\n              </DraggableSortableItem>\n            )\n          })}\n          {!valid && (\n            <React.Fragment>\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:rows' : 'general:row'),\n                  })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!disabled && !hasMaxRows && (\n        <Button\n          buttonStyle=\"icon-label\"\n          className={`${baseClass}__add-row`}\n          icon=\"plus\"\n          iconPosition=\"left\"\n          iconStyle=\"with-border\"\n          onClick={() => addRow(value || 0)}\n        >\n          {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n        </Button>\n      )}\n    </div>\n  )\n}\n\nexport const ArrayField = withCondition(_ArrayField)\n"],"names":["getTranslation","React","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","ErrorPill","useFieldProps","useForm","useFormSubmitted","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","FieldDescription","FieldError","FieldLabel","fieldBaseClass","ArrayRow","baseClass","_ArrayField","props","name","CustomDescription","CustomError","CustomLabel","CustomRowLabel","className","descriptionProps","errorProps","fieldMap","forceRender","isSortable","label","labelProps","localized","maxRows","minRows","minRowsProp","path","pathFromProps","readOnly","readOnlyFromProps","required","validate","indexPath","pathFromContext","permissions","readOnlyFromContext","setDocFieldPreferences","addFieldRow","dispatchFields","setModified","submitted","code","locale","i18n","t","localization","editingDefaultLocale","fallback","defaultLocale","getLabels","p","labels","plural","undefined","singular","memoizedValidate","value","options","errorPaths","formInitializing","formProcessing","rows","schemaPath","showError","valid","hasRows","disabled","addRow","rowIndex","setTimeout","duplicateRow","type","removeRow","moveRow","moveFromIndex","moveToIndex","toggleCollapseAll","collapsed","setCollapse","rowID","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showRequired","showMinRows","div","filter","Boolean","join","id","replace","header","h3","as","unstyled","count","withMessage","ul","li","button","onClick","fieldValue","ids","map","row","onDragEnd","i","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","errorCount","rowCount","Fragment","buttonStyle","icon","iconPosition","iconStyle","ArrayField"],"mappings":"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"}