{"version":3,"sources":["../../../src/fields/Text/Input.tsx"],"sourcesContent":["'use client'\nimport type { ChangeEvent } from 'react'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React from 'react'\n\nimport type { TextInputProps } from './types.js'\n\nimport { ReactSelect } from '../../elements/ReactSelect/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nexport const TextInput: React.FC<TextInputProps> = (props) => {\n  const {\n    AfterInput,\n    BeforeInput,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    className,\n    descriptionProps,\n    errorProps,\n    hasMany,\n    inputRef,\n    label,\n    labelProps,\n    maxRows,\n    onChange,\n    onKeyDown,\n    path,\n    placeholder,\n    readOnly,\n    required,\n    rtl,\n    showError,\n    style,\n    value,\n    valueToRender,\n    width,\n  } = props\n\n  const { i18n, t } = useTranslation()\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        'text',\n        className,\n        showError && 'error',\n        readOnly && 'read-only',\n        hasMany && 'has-many',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      style={{\n        ...style,\n        width,\n      }}\n    >\n      <FieldLabel\n        CustomLabel={CustomLabel}\n        label={label}\n        required={required}\n        {...(labelProps || {})}\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />\n\n        {hasMany ? (\n          <ReactSelect\n            className={`field-${path.replace(/\\./g, '__')}`}\n            disabled={readOnly}\n            // prevent adding additional options if maxRows is reached\n            filterOption={() =>\n              !maxRows ? true : !(Array.isArray(value) && maxRows && value.length >= maxRows)\n            }\n            isClearable\n            isCreatable\n            isMulti\n            isSortable\n            noOptionsMessage={() => {\n              const isOverHasMany = Array.isArray(value) && value.length >= maxRows\n              if (isOverHasMany) {\n                return t('validation:limitReached', { max: maxRows, value: value.length + 1 })\n              }\n              return null\n            }}\n            onChange={onChange}\n            options={[]}\n            placeholder={t('general:enterAValue')}\n            showError={showError}\n            value={valueToRender}\n          />\n        ) : (\n          <div>\n            {BeforeInput}\n            <input\n              data-rtl={rtl}\n              disabled={readOnly}\n              id={`field-${path?.replace(/\\./g, '__')}`}\n              name={path}\n              onChange={onChange as (e: ChangeEvent<HTMLInputElement>) => void}\n              onKeyDown={onKeyDown}\n              placeholder={getTranslation(placeholder, i18n)}\n              ref={inputRef}\n              type=\"text\"\n              value={value || ''}\n            />\n            {AfterInput}\n          </div>\n        )}\n        {CustomDescription !== undefined ? (\n          CustomDescription\n        ) : (\n          <FieldDescription {...(descriptionProps || {})} />\n        )}\n      </div>\n    </div>\n  )\n}\n"],"names":["getTranslation","React","ReactSelect","useTranslation","FieldDescription","FieldError","FieldLabel","fieldBaseClass","TextInput","props","AfterInput","BeforeInput","CustomDescription","CustomError","CustomLabel","className","descriptionProps","errorProps","hasMany","inputRef","label","labelProps","maxRows","onChange","onKeyDown","path","placeholder","readOnly","required","rtl","showError","style","value","valueToRender","width","i18n","t","div","filter","Boolean","join","replace","disabled","filterOption","Array","isArray","length","isClearable","isCreatable","isMulti","isSortable","noOptionsMessage","isOverHasMany","max","options","input","data-rtl","id","name","ref","type","undefined"],"mappings":"AAAA;;AAGA,SAASA,cAAc,QAAQ,2BAA0B;AACzD,OAAOC,WAAW,QAAO;AAIzB,SAASC,WAAW,QAAQ,sCAAqC;AACjE,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,gBAAgB,QAAQ,+BAA8B;AAC/D,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,cAAc,QAAQ,qBAAoB;AACnD,OAAO,eAAc;AAErB,OAAO,MAAMC,YAAsC,CAACC;IAClD,MAAM,EACJC,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjBC,WAAW,EACXC,WAAW,EACXC,SAAS,EACTC,gBAAgB,EAChBC,UAAU,EACVC,OAAO,EACPC,QAAQ,EACRC,KAAK,EACLC,UAAU,EACVC,OAAO,EACPC,QAAQ,EACRC,SAAS,EACTC,IAAI,EACJC,WAAW,EACXC,QAAQ,EACRC,QAAQ,EACRC,GAAG,EACHC,SAAS,EACTC,KAAK,EACLC,KAAK,EACLC,aAAa,EACbC,KAAK,EACN,GAAGzB;IAEJ,MAAM,EAAE0B,IAAI,EAAEC,CAAC,EAAE,GAAGjC;IAEpB,qBACE,MAACkC;QACCtB,WAAW;YACTR;YACA;YACAQ;YACAe,aAAa;YACbH,YAAY;YACZT,WAAW;SACZ,CACEoB,MAAM,CAACC,SACPC,IAAI,CAAC;QACRT,OAAO;YACL,GAAGA,KAAK;YACRG;QACF;;0BAEA,KAAC5B;gBACCQ,aAAaA;gBACbM,OAAOA;gBACPQ,UAAUA;gBACT,GAAIP,cAAc,CAAC,CAAC;;0BAEvB,MAACgB;gBAAItB,WAAW,CAAC,EAAER,eAAe,MAAM,CAAC;;kCACvC,KAACF;wBAAWQ,aAAaA;wBAAaY,MAAMA;wBAAO,GAAIR,cAAc,CAAC,CAAC;;oBAEtEC,wBACC,KAAChB;wBACCa,WAAW,CAAC,MAAM,EAAEU,KAAKgB,OAAO,CAAC,OAAO,MAAM,CAAC;wBAC/CC,UAAUf;wBACV,0DAA0D;wBAC1DgB,cAAc,IACZ,CAACrB,UAAU,OAAO,CAAEsB,CAAAA,MAAMC,OAAO,CAACb,UAAUV,WAAWU,MAAMc,MAAM,IAAIxB,OAAM;wBAE/EyB,WAAW;wBACXC,WAAW;wBACXC,OAAO;wBACPC,UAAU;wBACVC,kBAAkB;4BAChB,MAAMC,gBAAgBR,MAAMC,OAAO,CAACb,UAAUA,MAAMc,MAAM,IAAIxB;4BAC9D,IAAI8B,eAAe;gCACjB,OAAOhB,EAAE,2BAA2B;oCAAEiB,KAAK/B;oCAASU,OAAOA,MAAMc,MAAM,GAAG;gCAAE;4BAC9E;4BACA,OAAO;wBACT;wBACAvB,UAAUA;wBACV+B,SAAS,EAAE;wBACX5B,aAAaU,EAAE;wBACfN,WAAWA;wBACXE,OAAOC;uCAGT,MAACI;;4BACE1B;0CACD,KAAC4C;gCACCC,YAAU3B;gCACVa,UAAUf;gCACV8B,IAAI,CAAC,MAAM,EAAEhC,MAAMgB,QAAQ,OAAO,MAAM,CAAC;gCACzCiB,MAAMjC;gCACNF,UAAUA;gCACVC,WAAWA;gCACXE,aAAa1B,eAAe0B,aAAaS;gCACzCwB,KAAKxC;gCACLyC,MAAK;gCACL5B,OAAOA,SAAS;;4BAEjBtB;;;oBAGJE,sBAAsBiD,YACrBjD,kCAEA,KAACR;wBAAkB,GAAIY,oBAAoB,CAAC,CAAC;;;;;;AAKvD,EAAC"}