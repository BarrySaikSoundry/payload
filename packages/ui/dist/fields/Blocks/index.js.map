{"version":3,"sources":["../../../src/fields/Blocks/index.tsx"],"sourcesContent":["'use client'\nimport type { BlockField } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { Fragment, useCallback } from 'react'\n\nimport type { ReducedBlock } from '../../providers/ComponentMap/buildComponentMap/types.js'\nimport type { FormFieldBase } from '../shared/index.js'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { DrawerToggler } from '../../elements/Drawer/index.js'\nimport { useDrawerSlug } from '../../elements/Drawer/useDrawerSlug.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { BlockRow } from './BlockRow.js'\nimport { BlocksDrawer } from './BlocksDrawer/index.js'\nimport './index.scss'\n\nconst baseClass = 'blocks-field'\n\nexport type BlocksFieldProps = {\n  blocks?: ReducedBlock[]\n  forceRender?: boolean\n  isSortable?: boolean\n  labels?: BlockField['labels']\n  maxRows?: number\n  minRows?: number\n  name?: string\n  slug?: string\n  width?: string\n} & FormFieldBase\n\nconst _BlocksField: React.FC<BlocksFieldProps> = (props) => {\n  const { i18n, t } = useTranslation()\n\n  const {\n    name,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    blocks,\n    className,\n    descriptionProps,\n    errorProps,\n    forceRender = false,\n    isSortable = true,\n    label,\n    labelProps,\n    labels: labelsFromProps,\n    localized,\n    maxRows,\n    minRows: minRowsProp,\n    path: pathFromProps,\n    readOnly: readOnlyFromProps,\n    required,\n    validate,\n  } = props\n\n  const { indexPath, readOnly: readOnlyFromContext } = useFieldProps()\n  const minRows = minRowsProp ?? required ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, setModified } = useForm()\n  const { code: locale } = useLocale()\n  const { localization } = useConfig()\n  const drawerSlug = useDrawerSlug('blocks-drawer')\n  const submitted = useFormSubmitted()\n\n  const labels = {\n    plural: t('fields:blocks'),\n    singular: t('fields:block'),\n    ...labelsFromProps,\n  }\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale || 'en'\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const { path: pathFromContext } = useFieldProps()\n\n  const {\n    errorPaths,\n    formInitializing,\n    formProcessing,\n    path,\n    permissions,\n    rows = [],\n    schemaPath,\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    path: pathFromContext ?? pathFromProps ?? name,\n    validate: memoizedValidate,\n  })\n\n  const disabled = readOnlyFromProps || readOnlyFromContext || formProcessing || formInitializing\n\n  const addRow = useCallback(\n    async (rowIndex: number, blockType: string) => {\n      await addFieldRow({\n        data: { blockType },\n        path,\n        rowIndex,\n        schemaPath: `${schemaPath}.${blockType}`,\n      })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [addFieldRow, path, setModified, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({\n        type: 'REMOVE_ROW',\n        path,\n        rowIndex,\n      })\n\n      setModified(true)\n    },\n    [path, dispatchFields, setModified],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      dispatchFields({ type: 'MOVE_ROW', moveFromIndex, moveToIndex, path })\n      setModified(true)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', collapsed, path, setDocFieldPreferences })\n    },\n    [dispatchFields, path, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', collapsed, path, rowID, setDocFieldPreferences })\n    },\n    [dispatchFields, path, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && fieldErrorCount + (valid ? 0 : 1) > 0\n\n  const showMinRows = rows.length < minRows || (required && rows.length === 0)\n  const showRequired = disabled && rows.length === 0\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n    >\n      {showError && <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__heading-with-error`}>\n            <h3>\n              <FieldLabel\n                CustomLabel={CustomLabel}\n                as=\"span\"\n                label={label}\n                required={required}\n                unstyled\n                {...(labelProps || {})}\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rows.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <FieldDescription CustomDescription={CustomDescription} {...(descriptionProps || {})} />\n      </header>\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {(rows.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((row, i) => {\n            const { blockType } = row\n            const blockToRender = blocks.find((block) => block.slug === blockType)\n\n            if (blockToRender) {\n              const rowErrorCount = errorPaths.filter((errorPath) =>\n                errorPath.startsWith(`${path}.${i}`),\n              ).length\n              return (\n                <DraggableSortableItem disabled={disabled || !isSortable} id={row.id} key={row.id}>\n                  {(draggableSortableItemProps) => (\n                    <BlockRow\n                      {...draggableSortableItemProps}\n                      addRow={addRow}\n                      block={blockToRender}\n                      blocks={blocks}\n                      duplicateRow={duplicateRow}\n                      errorCount={rowErrorCount}\n                      forceRender={forceRender}\n                      hasMaxRows={hasMaxRows}\n                      indexPath={indexPath}\n                      isSortable={isSortable}\n                      labels={labels}\n                      moveRow={moveRow}\n                      path={path}\n                      permissions={permissions}\n                      readOnly={disabled}\n                      removeRow={removeRow}\n                      row={row}\n                      rowCount={rows.length}\n                      rowIndex={i}\n                      schemaPath={schemaPath}\n                      setCollapse={setCollapse}\n                    />\n                  )}\n                </DraggableSortableItem>\n              )\n            }\n\n            return null\n          })}\n          {!editingDefaultLocale && (\n            <React.Fragment>\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:row' : 'general:rows'),\n                  })}\n                </Banner>\n              )}\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!disabled && !hasMaxRows && (\n        <Fragment>\n          <DrawerToggler className={`${baseClass}__drawer-toggler`} slug={drawerSlug}>\n            <Button\n              buttonStyle=\"icon-label\"\n              el=\"span\"\n              icon=\"plus\"\n              iconPosition=\"left\"\n              iconStyle=\"with-border\"\n            >\n              {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n            </Button>\n          </DrawerToggler>\n          <BlocksDrawer\n            addRow={addRow}\n            addRowIndex={rows?.length || 0}\n            blocks={blocks}\n            drawerSlug={drawerSlug}\n            labels={labels}\n          />\n        </Fragment>\n      )}\n    </div>\n  )\n}\n\nexport const BlocksField = withCondition(_BlocksField)\n"],"names":["getTranslation","React","Fragment","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","DrawerToggler","useDrawerSlug","ErrorPill","useFieldProps","useForm","useFormSubmitted","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","FieldDescription","FieldError","FieldLabel","fieldBaseClass","BlockRow","BlocksDrawer","baseClass","_BlocksField","props","i18n","t","name","CustomDescription","CustomError","CustomLabel","blocks","className","descriptionProps","errorProps","forceRender","isSortable","label","labelProps","labels","labelsFromProps","localized","maxRows","minRows","minRowsProp","path","pathFromProps","readOnly","readOnlyFromProps","required","validate","indexPath","readOnlyFromContext","setDocFieldPreferences","addFieldRow","dispatchFields","setModified","code","locale","localization","drawerSlug","submitted","plural","singular","editingDefaultLocale","fallback","defaultLocale","memoizedValidate","value","options","pathFromContext","errorPaths","formInitializing","formProcessing","permissions","rows","schemaPath","showError","valid","hasRows","disabled","addRow","rowIndex","blockType","data","setTimeout","duplicateRow","type","removeRow","moveRow","moveFromIndex","moveToIndex","toggleCollapseAll","collapsed","setCollapse","rowID","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showMinRows","showRequired","div","filter","Boolean","join","id","replace","header","h3","as","unstyled","count","withMessage","ul","li","button","onClick","fieldValue","ids","map","row","onDragEnd","i","blockToRender","find","block","slug","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","errorCount","rowCount","buttonStyle","el","icon","iconPosition","iconStyle","addRowIndex","BlocksField"],"mappings":"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"}