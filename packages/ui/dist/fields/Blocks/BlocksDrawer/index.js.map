{"version":3,"sources":["../../../../src/fields/Blocks/BlocksDrawer/index.tsx"],"sourcesContent":["'use client'\nimport type { I18nClient } from '@payloadcms/translations'\nimport type { Labels } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useEffect, useState } from 'react'\n\nimport type { ReducedBlock } from '../../../providers/ComponentMap/buildComponentMap/types.js'\n\nimport { Drawer } from '../../../elements/Drawer/index.js'\nimport { ThumbnailCard } from '../../../elements/ThumbnailCard/index.js'\nimport { DefaultBlockImage } from '../../../graphics/DefaultBlockImage/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { BlockSearch } from './BlockSearch/index.js'\nimport './index.scss'\n\nexport type Props = {\n  addRow: (index: number, blockType?: string) => void\n  addRowIndex: number\n  blocks: ReducedBlock[]\n  drawerSlug: string\n  labels: Labels\n}\n\nconst baseClass = 'blocks-drawer'\n\nconst getBlockLabel = (block: ReducedBlock, i18n: I18nClient) => {\n  if (typeof block.labels.singular === 'string') return block.labels.singular.toLowerCase()\n  if (typeof block.labels.singular === 'object') {\n    return getTranslation(block.labels.singular, i18n).toLowerCase()\n  }\n  return ''\n}\n\nexport const BlocksDrawer: React.FC<Props> = (props) => {\n  const { addRow, addRowIndex, blocks, drawerSlug, labels } = props\n\n  const [searchTerm, setSearchTerm] = useState('')\n  const [filteredBlocks, setFilteredBlocks] = useState(blocks)\n  const { closeModal, isModalOpen } = useModal()\n  const { i18n, t } = useTranslation()\n\n  useEffect(() => {\n    if (!isModalOpen) {\n      setSearchTerm('')\n    }\n  }, [isModalOpen])\n\n  useEffect(() => {\n    const searchTermToUse = searchTerm.toLowerCase()\n\n    const matchingBlocks = blocks?.reduce((matchedBlocks, block) => {\n      const blockLabel = getBlockLabel(block, i18n)\n      if (blockLabel.includes(searchTermToUse)) matchedBlocks.push(block)\n      return matchedBlocks\n    }, [])\n\n    setFilteredBlocks(matchingBlocks)\n  }, [searchTerm, blocks, i18n])\n\n  return (\n    <Drawer\n      slug={drawerSlug}\n      title={t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n    >\n      <BlockSearch setSearchTerm={setSearchTerm} />\n      <div className={`${baseClass}__blocks-wrapper`}>\n        <ul className={`${baseClass}__blocks`}>\n          {filteredBlocks?.map((block, index) => {\n            const { slug, imageAltText, imageURL, labels: blockLabels } = block\n\n            return (\n              <li className={`${baseClass}__block`} key={index}>\n                <ThumbnailCard\n                  alignLabel=\"center\"\n                  label={getTranslation(blockLabels?.singular, i18n)}\n                  onClick={() => {\n                    addRow(addRowIndex, slug)\n                    closeModal(drawerSlug)\n                  }}\n                  thumbnail={\n                    imageURL ? (\n                      <img alt={imageAltText} src={imageURL} />\n                    ) : (\n                      <div className={`${baseClass}__default-image`}>\n                        <DefaultBlockImage />\n                      </div>\n                    )\n                  }\n                />\n              </li>\n            )\n          })}\n        </ul>\n      </div>\n    </Drawer>\n  )\n}\n"],"names":["useModal","getTranslation","React","useEffect","useState","Drawer","ThumbnailCard","DefaultBlockImage","useTranslation","BlockSearch","baseClass","getBlockLabel","block","i18n","labels","singular","toLowerCase","BlocksDrawer","props","addRow","addRowIndex","blocks","drawerSlug","searchTerm","setSearchTerm","filteredBlocks","setFilteredBlocks","closeModal","isModalOpen","t","searchTermToUse","matchingBlocks","reduce","matchedBlocks","blockLabel","includes","push","slug","title","label","div","className","ul","map","index","imageAltText","imageURL","blockLabels","li","alignLabel","onClick","thumbnail","img","alt","src"],"mappings":"AAAA;;AAIA,SAASA,QAAQ,QAAQ,qBAAoB;AAC7C,SAASC,cAAc,QAAQ,2BAA0B;AACzD,OAAOC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAIlD,SAASC,MAAM,QAAQ,oCAAmC;AAC1D,SAASC,aAAa,QAAQ,2CAA0C;AACxE,SAASC,iBAAiB,QAAQ,+CAA8C;AAChF,SAASC,cAAc,QAAQ,0CAAyC;AACxE,SAASC,WAAW,QAAQ,yBAAwB;AACpD,OAAO,eAAc;AAUrB,MAAMC,YAAY;AAElB,MAAMC,gBAAgB,CAACC,OAAqBC;IAC1C,IAAI,OAAOD,MAAME,MAAM,CAACC,QAAQ,KAAK,UAAU,OAAOH,MAAME,MAAM,CAACC,QAAQ,CAACC,WAAW;IACvF,IAAI,OAAOJ,MAAME,MAAM,CAACC,QAAQ,KAAK,UAAU;QAC7C,OAAOd,eAAeW,MAAME,MAAM,CAACC,QAAQ,EAAEF,MAAMG,WAAW;IAChE;IACA,OAAO;AACT;AAEA,OAAO,MAAMC,eAAgC,CAACC;IAC5C,MAAM,EAAEC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,UAAU,EAAER,MAAM,EAAE,GAAGI;IAE5D,MAAM,CAACK,YAAYC,cAAc,GAAGpB,SAAS;IAC7C,MAAM,CAACqB,gBAAgBC,kBAAkB,GAAGtB,SAASiB;IACrD,MAAM,EAAEM,UAAU,EAAEC,WAAW,EAAE,GAAG5B;IACpC,MAAM,EAAEa,IAAI,EAAEgB,CAAC,EAAE,GAAGrB;IAEpBL,UAAU;QACR,IAAI,CAACyB,aAAa;YAChBJ,cAAc;QAChB;IACF,GAAG;QAACI;KAAY;IAEhBzB,UAAU;QACR,MAAM2B,kBAAkBP,WAAWP,WAAW;QAE9C,MAAMe,iBAAiBV,QAAQW,OAAO,CAACC,eAAerB;YACpD,MAAMsB,aAAavB,cAAcC,OAAOC;YACxC,IAAIqB,WAAWC,QAAQ,CAACL,kBAAkBG,cAAcG,IAAI,CAACxB;YAC7D,OAAOqB;QACT,GAAG,EAAE;QAELP,kBAAkBK;IACpB,GAAG;QAACR;QAAYF;QAAQR;KAAK;IAE7B,qBACE,MAACR;QACCgC,MAAMf;QACNgB,OAAOT,EAAE,mBAAmB;YAAEU,OAAOtC,eAAea,OAAOC,QAAQ,EAAEF;QAAM;;0BAE3E,KAACJ;gBAAYe,eAAeA;;0BAC5B,KAACgB;gBAAIC,WAAW,CAAC,EAAE/B,UAAU,gBAAgB,CAAC;0BAC5C,cAAA,KAACgC;oBAAGD,WAAW,CAAC,EAAE/B,UAAU,QAAQ,CAAC;8BAClCe,gBAAgBkB,IAAI,CAAC/B,OAAOgC;wBAC3B,MAAM,EAAEP,IAAI,EAAEQ,YAAY,EAAEC,QAAQ,EAAEhC,QAAQiC,WAAW,EAAE,GAAGnC;wBAE9D,qBACE,KAACoC;4BAAGP,WAAW,CAAC,EAAE/B,UAAU,OAAO,CAAC;sCAClC,cAAA,KAACJ;gCACC2C,YAAW;gCACXV,OAAOtC,eAAe8C,aAAahC,UAAUF;gCAC7CqC,SAAS;oCACP/B,OAAOC,aAAaiB;oCACpBV,WAAWL;gCACb;gCACA6B,WACEL,yBACE,KAACM;oCAAIC,KAAKR;oCAAcS,KAAKR;mDAE7B,KAACN;oCAAIC,WAAW,CAAC,EAAE/B,UAAU,eAAe,CAAC;8CAC3C,cAAA,KAACH;;;2BAbgCqC;oBAoB/C;;;;;AAKV,EAAC"}