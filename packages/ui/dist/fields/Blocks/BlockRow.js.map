{"version":3,"sources":["../../../src/fields/Blocks/BlockRow.tsx"],"sourcesContent":["'use client'\nimport type { FieldPermissions, Labels, Row } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React from 'react'\n\nimport type { UseDraggableSortableReturn } from '../../elements/DraggableSortable/useDraggableSortable/types.js'\nimport type { ReducedBlock } from '../../providers/ComponentMap/buildComponentMap/types.js'\n\nimport { Collapsible } from '../../elements/Collapsible/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { Pill } from '../../elements/Pill/index.js'\nimport { useFormSubmitted } from '../../forms/Form/context.js'\nimport { RenderFields } from '../../forms/RenderFields/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { RowActions } from './RowActions.js'\nimport { SectionTitle } from './SectionTitle/index.js'\n\nconst baseClass = 'blocks-field'\n\ntype BlockFieldProps = {\n  addRow: (rowIndex: number, blockType: string) => void\n  block: ReducedBlock\n  blocks: ReducedBlock[]\n  duplicateRow: (rowIndex: number) => void\n  errorCount: number\n  forceRender?: boolean\n  hasMaxRows?: boolean\n  indexPath: string\n  isSortable?: boolean\n  labels: Labels\n  moveRow: (fromIndex: number, toIndex: number) => void\n  path: string\n  permissions: FieldPermissions\n  readOnly: boolean\n  removeRow: (rowIndex: number) => void\n  row: Row\n  rowCount: number\n  rowIndex: number\n  schemaPath: string\n  setCollapse: (id: string, collapsed: boolean) => void\n} & UseDraggableSortableReturn\n\nexport const BlockRow: React.FC<BlockFieldProps> = ({\n  addRow,\n  attributes,\n  block,\n  blocks,\n  duplicateRow,\n  errorCount,\n  forceRender,\n  hasMaxRows,\n  isSortable,\n  labels,\n  listeners,\n  moveRow,\n  path: parentPath,\n  permissions,\n  readOnly,\n  removeRow,\n  row,\n  rowCount,\n  rowIndex,\n  schemaPath,\n  setCollapse,\n  setNodeRef,\n  transform,\n}) => {\n  const path = `${parentPath}.${rowIndex}`\n  const { i18n } = useTranslation()\n  const hasSubmitted = useFormSubmitted()\n\n  const fieldHasErrors = hasSubmitted && errorCount > 0\n\n  const classNames = [\n    `${baseClass}__row`,\n    fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`,\n  ]\n    .filter(Boolean)\n    .join(' ')\n\n  return (\n    <div\n      id={`${parentPath.split('.').join('-')}-row-${rowIndex}`}\n      key={`${parentPath}-row-${rowIndex}`}\n      ref={setNodeRef}\n      style={{\n        transform,\n      }}\n    >\n      <Collapsible\n        actions={\n          !readOnly ? (\n            <RowActions\n              addRow={addRow}\n              blockType={row.blockType}\n              blocks={blocks}\n              duplicateRow={duplicateRow}\n              fieldMap={block.fieldMap}\n              hasMaxRows={hasMaxRows}\n              isSortable={isSortable}\n              labels={labels}\n              moveRow={moveRow}\n              removeRow={removeRow}\n              rowCount={rowCount}\n              rowIndex={rowIndex}\n            />\n          ) : undefined\n        }\n        className={classNames}\n        collapsibleStyle={fieldHasErrors ? 'error' : 'default'}\n        dragHandleProps={\n          isSortable\n            ? {\n                id: row.id,\n                attributes,\n                listeners,\n              }\n            : undefined\n        }\n        header={\n          <div className={`${baseClass}__block-header`}>\n            <span className={`${baseClass}__block-number`}>\n              {String(rowIndex + 1).padStart(2, '0')}\n            </span>\n            <Pill\n              className={`${baseClass}__block-pill ${baseClass}__block-pill-${row.blockType}`}\n              pillStyle=\"white\"\n            >\n              {getTranslation(block.labels.singular, i18n)}\n            </Pill>\n            <SectionTitle path={`${path}.blockName`} readOnly={readOnly} />\n            {fieldHasErrors && <ErrorPill count={errorCount} i18n={i18n} withMessage />}\n          </div>\n        }\n        isCollapsed={row.collapsed}\n        key={row.id}\n        onToggle={(collapsed) => setCollapse(row.id, collapsed)}\n      >\n        <RenderFields\n          className={`${baseClass}__fields`}\n          fieldMap={block.fieldMap}\n          forceRender={forceRender}\n          margins=\"small\"\n          path={path}\n          permissions={permissions?.blocks?.[block.slug]?.fields}\n          readOnly={readOnly}\n          schemaPath={`${schemaPath}.${block.slug}`}\n        />\n      </Collapsible>\n    </div>\n  )\n}\n"],"names":["getTranslation","React","Collapsible","ErrorPill","Pill","useFormSubmitted","RenderFields","useTranslation","RowActions","SectionTitle","baseClass","BlockRow","addRow","attributes","block","blocks","duplicateRow","errorCount","forceRender","hasMaxRows","isSortable","labels","listeners","moveRow","path","parentPath","permissions","readOnly","removeRow","row","rowCount","rowIndex","schemaPath","setCollapse","setNodeRef","transform","i18n","hasSubmitted","fieldHasErrors","classNames","filter","Boolean","join","div","id","split","ref","style","actions","blockType","fieldMap","undefined","className","collapsibleStyle","dragHandleProps","header","span","String","padStart","pillStyle","singular","count","withMessage","isCollapsed","collapsed","onToggle","margins","slug","fields"],"mappings":"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"}