{"version":3,"sources":["../../../src/fields/Blocks/RowActions.tsx"],"sourcesContent":["'use client'\nimport type { Labels } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport React from 'react'\n\nimport type {\n  FieldMap,\n  ReducedBlock,\n} from '../../providers/ComponentMap/buildComponentMap/types.js'\n\nimport { ArrayAction } from '../../elements/ArrayAction/index.js'\nimport { useDrawerSlug } from '../../elements/Drawer/useDrawerSlug.js'\nimport { BlocksDrawer } from './BlocksDrawer/index.js'\n\nexport const RowActions: React.FC<{\n  addRow: (rowIndex: number, blockType: string) => void\n  blockType: string\n  blocks: ReducedBlock[]\n  duplicateRow: (rowIndex: number, blockType: string) => void\n  fieldMap: FieldMap\n  hasMaxRows?: boolean\n  isSortable?: boolean\n  labels: Labels\n  moveRow: (fromIndex: number, toIndex: number) => void\n  removeRow: (rowIndex: number) => void\n  rowCount: number\n  rowIndex: number\n}> = (props) => {\n  const {\n    addRow,\n    blockType,\n    blocks,\n    duplicateRow,\n    hasMaxRows,\n    isSortable,\n    labels,\n    moveRow,\n    removeRow,\n    rowCount,\n    rowIndex,\n  } = props\n\n  const { closeModal, openModal } = useModal()\n  const drawerSlug = useDrawerSlug('blocks-drawer')\n\n  const [indexToAdd, setIndexToAdd] = React.useState<null | number>(null)\n\n  return (\n    <React.Fragment>\n      <BlocksDrawer\n        addRow={(_, rowBlockType) => {\n          if (typeof addRow === 'function') {\n            addRow(indexToAdd, rowBlockType)\n          }\n          closeModal(drawerSlug)\n        }}\n        addRowIndex={rowIndex}\n        blocks={blocks}\n        drawerSlug={drawerSlug}\n        labels={labels}\n      />\n      <ArrayAction\n        addRow={(index) => {\n          setIndexToAdd(index)\n          openModal(drawerSlug)\n        }}\n        duplicateRow={() => duplicateRow(rowIndex, blockType)}\n        hasMaxRows={hasMaxRows}\n        index={rowIndex}\n        isSortable={isSortable}\n        moveRow={moveRow}\n        removeRow={removeRow}\n        rowCount={rowCount}\n      />\n    </React.Fragment>\n  )\n}\n"],"names":["useModal","React","ArrayAction","useDrawerSlug","BlocksDrawer","RowActions","props","addRow","blockType","blocks","duplicateRow","hasMaxRows","isSortable","labels","moveRow","removeRow","rowCount","rowIndex","closeModal","openModal","drawerSlug","indexToAdd","setIndexToAdd","useState","Fragment","_","rowBlockType","addRowIndex","index"],"mappings":"AAAA;;AAGA,SAASA,QAAQ,QAAQ,qBAAoB;AAC7C,OAAOC,WAAW,QAAO;AAOzB,SAASC,WAAW,QAAQ,sCAAqC;AACjE,SAASC,aAAa,QAAQ,yCAAwC;AACtE,SAASC,YAAY,QAAQ,0BAAyB;AAEtD,OAAO,MAAMC,aAaR,CAACC;IACJ,MAAM,EACJC,MAAM,EACNC,SAAS,EACTC,MAAM,EACNC,YAAY,EACZC,UAAU,EACVC,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,SAAS,EACTC,QAAQ,EACRC,QAAQ,EACT,GAAGX;IAEJ,MAAM,EAAEY,UAAU,EAAEC,SAAS,EAAE,GAAGnB;IAClC,MAAMoB,aAAajB,cAAc;IAEjC,MAAM,CAACkB,YAAYC,cAAc,GAAGrB,MAAMsB,QAAQ,CAAgB;IAElE,qBACE,MAACtB,MAAMuB,QAAQ;;0BACb,KAACpB;gBACCG,QAAQ,CAACkB,GAAGC;oBACV,IAAI,OAAOnB,WAAW,YAAY;wBAChCA,OAAOc,YAAYK;oBACrB;oBACAR,WAAWE;gBACb;gBACAO,aAAaV;gBACbR,QAAQA;gBACRW,YAAYA;gBACZP,QAAQA;;0BAEV,KAACX;gBACCK,QAAQ,CAACqB;oBACPN,cAAcM;oBACdT,UAAUC;gBACZ;gBACAV,cAAc,IAAMA,aAAaO,UAAUT;gBAC3CG,YAAYA;gBACZiB,OAAOX;gBACPL,YAAYA;gBACZE,SAASA;gBACTC,WAAWA;gBACXC,UAAUA;;;;AAIlB,EAAC"}