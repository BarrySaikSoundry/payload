{"version":3,"sources":["../../../src/fields/ConfirmPassword/index.tsx"],"sourcesContent":["'use client'\nimport type { FormField } from 'payload'\n\nimport React, { useCallback } from 'react'\n\nimport { useFormFields } from '../../forms/Form/context.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nexport type ConfirmPasswordFieldProps = {\n  disabled?: boolean\n}\n\nexport const ConfirmPasswordField: React.FC<ConfirmPasswordFieldProps> = (props) => {\n  const { disabled } = props\n\n  const password = useFormFields<FormField>(([fields]) => fields?.password)\n  const { t } = useTranslation()\n\n  const validate = useCallback(\n    (value: string) => {\n      if (!value) {\n        return t('validation:required')\n      }\n\n      if (value === password?.value) {\n        return true\n      }\n\n      return t('fields:passwordsDoNotMatch')\n    },\n    [password, t],\n  )\n\n  const path = 'confirm-password'\n\n  const { setValue, showError, value } = useField({\n    disableFormData: true,\n    path,\n    validate,\n  })\n\n  return (\n    <div\n      className={[fieldBaseClass, 'confirm-password', showError && 'error']\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <FieldLabel\n        htmlFor=\"field-confirm-password\"\n        label={t('authentication:confirmPassword')}\n        required\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <FieldError path={path} />\n        <input\n          autoComplete=\"off\"\n          disabled={!!disabled}\n          id=\"field-confirm-password\"\n          name=\"confirm-password\"\n          onChange={setValue}\n          type=\"password\"\n          value={(value as string) || ''}\n        />\n      </div>\n    </div>\n  )\n}\n"],"names":["React","useCallback","useFormFields","useField","useTranslation","FieldError","FieldLabel","fieldBaseClass","ConfirmPasswordField","props","disabled","password","fields","t","validate","value","path","setValue","showError","disableFormData","div","className","filter","Boolean","join","htmlFor","label","required","input","autoComplete","id","name","onChange","type"],"mappings":"AAAA;;AAGA,OAAOA,SAASC,WAAW,QAAQ,QAAO;AAE1C,SAASC,aAAa,QAAQ,8BAA6B;AAC3D,SAASC,QAAQ,QAAQ,gCAA+B;AACxD,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,UAAU,QAAQ,yBAAwB;AACnD,SAASC,cAAc,QAAQ,qBAAoB;AACnD,OAAO,eAAc;AAMrB,OAAO,MAAMC,uBAA4D,CAACC;IACxE,MAAM,EAAEC,QAAQ,EAAE,GAAGD;IAErB,MAAME,WAAWT,cAAyB,CAAC,CAACU,OAAO,GAAKA,QAAQD;IAChE,MAAM,EAAEE,CAAC,EAAE,GAAGT;IAEd,MAAMU,WAAWb,YACf,CAACc;QACC,IAAI,CAACA,OAAO;YACV,OAAOF,EAAE;QACX;QAEA,IAAIE,UAAUJ,UAAUI,OAAO;YAC7B,OAAO;QACT;QAEA,OAAOF,EAAE;IACX,GACA;QAACF;QAAUE;KAAE;IAGf,MAAMG,OAAO;IAEb,MAAM,EAAEC,QAAQ,EAAEC,SAAS,EAAEH,KAAK,EAAE,GAAGZ,SAAS;QAC9CgB,iBAAiB;QACjBH;QACAF;IACF;IAEA,qBACE,MAACM;QACCC,WAAW;YAACd;YAAgB;YAAoBW,aAAa;SAAQ,CAClEI,MAAM,CAACC,SACPC,IAAI,CAAC;;0BAER,KAAClB;gBACCmB,SAAQ;gBACRC,OAAOb,EAAE;gBACTc,QAAQ;;0BAEV,MAACP;gBAAIC,WAAW,CAAC,EAAEd,eAAe,MAAM,CAAC;;kCACvC,KAACF;wBAAWW,MAAMA;;kCAClB,KAACY;wBACCC,cAAa;wBACbnB,UAAU,CAAC,CAACA;wBACZoB,IAAG;wBACHC,MAAK;wBACLC,UAAUf;wBACVgB,MAAK;wBACLlB,OAAO,AAACA,SAAoB;;;;;;AAKtC,EAAC"}