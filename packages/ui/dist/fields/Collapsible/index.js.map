{"version":3,"sources":["../../../src/fields/Collapsible/index.tsx"],"sourcesContent":["'use client'\nimport type { DocumentPreferences, FieldPermissions } from 'payload'\n\nimport React, { Fragment, useCallback, useEffect, useState } from 'react'\n\nimport { Collapsible as CollapsibleElement } from '../../elements/Collapsible/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { RenderFields } from '../../forms/RenderFields/index.js'\nimport { RowLabel } from '../../forms/RowLabel/index.js'\nimport { WatchChildErrors } from '../../forms/WatchChildErrors/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nconst baseClass = 'collapsible-field'\n\nimport type { FieldMap } from '../../providers/ComponentMap/buildComponentMap/types.js'\nimport type { FormFieldBase } from '../shared/index.js'\n\nimport { useFormInitializing, useFormProcessing } from '../../forms/Form/context.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\n\nexport type CollapsibleFieldProps = {\n  fieldMap: FieldMap\n  initCollapsed?: boolean\n  width?: string\n} & FormFieldBase\n\nconst _CollapsibleField: React.FC<CollapsibleFieldProps> = (props) => {\n  const {\n    CustomDescription,\n    CustomLabel,\n    className,\n    descriptionProps,\n    fieldMap,\n    initCollapsed = false,\n    label,\n    path: pathFromProps,\n    readOnly: readOnlyFromProps,\n  } = props\n\n  const {\n    indexPath,\n    path: pathFromContext,\n    readOnly: readOnlyFromContext,\n    schemaPath,\n    siblingPermissions,\n  } = useFieldProps()\n\n  const formInitializing = useFormInitializing()\n  const formProcessing = useFormProcessing()\n\n  const path = pathFromContext ?? pathFromProps\n\n  const { i18n } = useTranslation()\n  const { getPreference, setPreference } = usePreferences()\n  const { preferencesKey } = useDocumentInfo()\n  const [collapsedOnMount, setCollapsedOnMount] = useState<boolean>()\n  const fieldPreferencesKey = `collapsible-${indexPath.replace(/\\./g, '__')}`\n  const [errorCount, setErrorCount] = useState(0)\n  const fieldHasErrors = errorCount > 0\n\n  const onToggle = useCallback(\n    async (newCollapsedState: boolean) => {\n      const existingPreferences: DocumentPreferences = await getPreference(preferencesKey)\n\n      if (preferencesKey) {\n        void setPreference(preferencesKey, {\n          ...existingPreferences,\n          ...(path\n            ? {\n                fields: {\n                  ...(existingPreferences?.fields || {}),\n                  [path]: {\n                    ...existingPreferences?.fields?.[path],\n                    collapsed: newCollapsedState,\n                  },\n                },\n              }\n            : {\n                fields: {\n                  ...(existingPreferences?.fields || {}),\n                  [fieldPreferencesKey]: {\n                    ...existingPreferences?.fields?.[fieldPreferencesKey],\n                    collapsed: newCollapsedState,\n                  },\n                },\n              }),\n        })\n      }\n    },\n    [preferencesKey, fieldPreferencesKey, getPreference, setPreference, path],\n  )\n\n  useEffect(() => {\n    const fetchInitialState = async () => {\n      if (preferencesKey) {\n        const preferences = await getPreference(preferencesKey)\n        const specificPreference = path\n          ? preferences?.fields?.[path]?.collapsed\n          : preferences?.fields?.[fieldPreferencesKey]?.collapsed\n\n        if (specificPreference !== undefined) {\n          setCollapsedOnMount(Boolean(specificPreference))\n        } else {\n          setCollapsedOnMount(typeof initCollapsed === 'boolean' ? initCollapsed : false)\n        }\n      } else {\n        setCollapsedOnMount(typeof initCollapsed === 'boolean' ? initCollapsed : false)\n      }\n    }\n\n    void fetchInitialState()\n  }, [getPreference, preferencesKey, fieldPreferencesKey, initCollapsed, path])\n\n  if (typeof collapsedOnMount !== 'boolean') return null\n\n  const disabled = readOnlyFromProps || readOnlyFromContext || formProcessing || formInitializing\n\n  return (\n    <Fragment>\n      <WatchChildErrors fieldMap={fieldMap} path={path} setErrorCount={setErrorCount} />\n      <div\n        className={[\n          fieldBaseClass,\n          baseClass,\n          className,\n          fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n        ]\n          .filter(Boolean)\n          .join(' ')}\n        id={`field-${fieldPreferencesKey}${path ? `-${path.replace(/\\./g, '__')}` : ''}`}\n      >\n        <CollapsibleElement\n          className={`${baseClass}__collapsible`}\n          collapsibleStyle={fieldHasErrors ? 'error' : 'default'}\n          header={\n            <div className={`${baseClass}__row-label-wrap`}>\n              <RowLabel RowLabelComponent={CustomLabel} i18n={i18n} path={path} rowLabel={label} />\n              {fieldHasErrors && <ErrorPill count={errorCount} i18n={i18n} withMessage />}\n            </div>\n          }\n          initCollapsed={collapsedOnMount}\n          onToggle={onToggle}\n        >\n          <RenderFields\n            fieldMap={fieldMap}\n            forceRender\n            indexPath={indexPath}\n            margins=\"small\"\n            path={path}\n            permissions={siblingPermissions}\n            readOnly={disabled}\n            schemaPath={schemaPath}\n          />\n        </CollapsibleElement>\n        <FieldDescription CustomDescription={CustomDescription} {...(descriptionProps || {})} />\n      </div>\n    </Fragment>\n  )\n}\n\nexport const CollapsibleField = withCondition(_CollapsibleField)\n"],"names":["React","Fragment","useCallback","useEffect","useState","Collapsible","CollapsibleElement","ErrorPill","useFieldProps","RenderFields","RowLabel","WatchChildErrors","withCondition","useDocumentInfo","usePreferences","useTranslation","fieldBaseClass","baseClass","useFormInitializing","useFormProcessing","FieldDescription","_CollapsibleField","props","CustomDescription","CustomLabel","className","descriptionProps","fieldMap","initCollapsed","label","path","pathFromProps","readOnly","readOnlyFromProps","indexPath","pathFromContext","readOnlyFromContext","schemaPath","siblingPermissions","formInitializing","formProcessing","i18n","getPreference","setPreference","preferencesKey","collapsedOnMount","setCollapsedOnMount","fieldPreferencesKey","replace","errorCount","setErrorCount","fieldHasErrors","onToggle","newCollapsedState","existingPreferences","fields","collapsed","fetchInitialState","preferences","specificPreference","undefined","Boolean","disabled","div","filter","join","id","collapsibleStyle","header","RowLabelComponent","rowLabel","count","withMessage","forceRender","margins","permissions","CollapsibleField"],"mappings":"AAAA;;AAGA,OAAOA,SAASC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAEzE,SAASC,eAAeC,kBAAkB,QAAQ,sCAAqC;AACvF,SAASC,SAAS,QAAQ,oCAAmC;AAC7D,SAASC,aAAa,QAAQ,0CAAyC;AACvE,SAASC,YAAY,QAAQ,oCAAmC;AAChE,SAASC,QAAQ,QAAQ,gCAA+B;AACxD,SAASC,gBAAgB,QAAQ,wCAAuC;AACxE,SAASC,aAAa,QAAQ,qCAAoC;AAClE,SAASC,eAAe,QAAQ,wCAAuC;AACvE,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,cAAc,QAAQ,qBAAoB;AACnD,OAAO,eAAc;AAErB,MAAMC,YAAY;AAKlB,SAASC,mBAAmB,EAAEC,iBAAiB,QAAQ,8BAA6B;AACpF,SAASC,gBAAgB,QAAQ,+BAA8B;AAQ/D,MAAMC,oBAAqD,CAACC;IAC1D,MAAM,EACJC,iBAAiB,EACjBC,WAAW,EACXC,SAAS,EACTC,gBAAgB,EAChBC,QAAQ,EACRC,gBAAgB,KAAK,EACrBC,KAAK,EACLC,MAAMC,aAAa,EACnBC,UAAUC,iBAAiB,EAC5B,GAAGX;IAEJ,MAAM,EACJY,SAAS,EACTJ,MAAMK,eAAe,EACrBH,UAAUI,mBAAmB,EAC7BC,UAAU,EACVC,kBAAkB,EACnB,GAAG9B;IAEJ,MAAM+B,mBAAmBrB;IACzB,MAAMsB,iBAAiBrB;IAEvB,MAAMW,OAAOK,mBAAmBJ;IAEhC,MAAM,EAAEU,IAAI,EAAE,GAAG1B;IACjB,MAAM,EAAE2B,aAAa,EAAEC,aAAa,EAAE,GAAG7B;IACzC,MAAM,EAAE8B,cAAc,EAAE,GAAG/B;IAC3B,MAAM,CAACgC,kBAAkBC,oBAAoB,GAAG1C;IAChD,MAAM2C,sBAAsB,CAAC,YAAY,EAAEb,UAAUc,OAAO,CAAC,OAAO,MAAM,CAAC;IAC3E,MAAM,CAACC,YAAYC,cAAc,GAAG9C,SAAS;IAC7C,MAAM+C,iBAAiBF,aAAa;IAEpC,MAAMG,WAAWlD,YACf,OAAOmD;QACL,MAAMC,sBAA2C,MAAMZ,cAAcE;QAErE,IAAIA,gBAAgB;YAClB,KAAKD,cAAcC,gBAAgB;gBACjC,GAAGU,mBAAmB;gBACtB,GAAIxB,OACA;oBACEyB,QAAQ;wBACN,GAAID,qBAAqBC,UAAU,CAAC,CAAC;wBACrC,CAACzB,KAAK,EAAE;4BACN,GAAGwB,qBAAqBC,QAAQ,CAACzB,KAAK;4BACtC0B,WAAWH;wBACb;oBACF;gBACF,IACA;oBACEE,QAAQ;wBACN,GAAID,qBAAqBC,UAAU,CAAC,CAAC;wBACrC,CAACR,oBAAoB,EAAE;4BACrB,GAAGO,qBAAqBC,QAAQ,CAACR,oBAAoB;4BACrDS,WAAWH;wBACb;oBACF;gBACF,CAAC;YACP;QACF;IACF,GACA;QAACT;QAAgBG;QAAqBL;QAAeC;QAAeb;KAAK;IAG3E3B,UAAU;QACR,MAAMsD,oBAAoB;YACxB,IAAIb,gBAAgB;gBAClB,MAAMc,cAAc,MAAMhB,cAAcE;gBACxC,MAAMe,qBAAqB7B,OACvB4B,aAAaH,QAAQ,CAACzB,KAAK,EAAE0B,YAC7BE,aAAaH,QAAQ,CAACR,oBAAoB,EAAES;gBAEhD,IAAIG,uBAAuBC,WAAW;oBACpCd,oBAAoBe,QAAQF;gBAC9B,OAAO;oBACLb,oBAAoB,OAAOlB,kBAAkB,YAAYA,gBAAgB;gBAC3E;YACF,OAAO;gBACLkB,oBAAoB,OAAOlB,kBAAkB,YAAYA,gBAAgB;YAC3E;QACF;QAEA,KAAK6B;IACP,GAAG;QAACf;QAAeE;QAAgBG;QAAqBnB;QAAeE;KAAK;IAE5E,IAAI,OAAOe,qBAAqB,WAAW,OAAO;IAElD,MAAMiB,WAAW7B,qBAAqBG,uBAAuBI,kBAAkBD;IAE/E,qBACE,MAACtC;;0BACC,KAACU;gBAAiBgB,UAAUA;gBAAUG,MAAMA;gBAAMoB,eAAeA;;0BACjE,MAACa;gBACCtC,WAAW;oBACTT;oBACAC;oBACAQ;oBACA0B,iBAAiB,CAAC,EAAElC,UAAU,WAAW,CAAC,GAAG,CAAC,EAAEA,UAAU,cAAc,CAAC;iBAC1E,CACE+C,MAAM,CAACH,SACPI,IAAI,CAAC;gBACRC,IAAI,CAAC,MAAM,EAAEnB,oBAAoB,EAAEjB,OAAO,CAAC,CAAC,EAAEA,KAAKkB,OAAO,CAAC,OAAO,MAAM,CAAC,GAAG,GAAG,CAAC;;kCAEhF,KAAC1C;wBACCmB,WAAW,CAAC,EAAER,UAAU,aAAa,CAAC;wBACtCkD,kBAAkBhB,iBAAiB,UAAU;wBAC7CiB,sBACE,MAACL;4BAAItC,WAAW,CAAC,EAAER,UAAU,gBAAgB,CAAC;;8CAC5C,KAACP;oCAAS2D,mBAAmB7C;oCAAaiB,MAAMA;oCAAMX,MAAMA;oCAAMwC,UAAUzC;;gCAC3EsB,gCAAkB,KAAC5C;oCAAUgE,OAAOtB;oCAAYR,MAAMA;oCAAM+B,WAAW;;;;wBAG5E5C,eAAeiB;wBACfO,UAAUA;kCAEV,cAAA,KAAC3C;4BACCkB,UAAUA;4BACV8C,WAAW;4BACXvC,WAAWA;4BACXwC,SAAQ;4BACR5C,MAAMA;4BACN6C,aAAarC;4BACbN,UAAU8B;4BACVzB,YAAYA;;;kCAGhB,KAACjB;wBAAiBG,mBAAmBA;wBAAoB,GAAIG,oBAAoB,CAAC,CAAC;;;;;;AAI3F;AAEA,OAAO,MAAMkD,mBAAmBhE,cAAcS,mBAAkB"}