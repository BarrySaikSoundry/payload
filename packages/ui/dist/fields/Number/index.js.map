{"version":3,"sources":["../../../src/fields/Number/index.tsx"],"sourcesContent":["'use client'\nimport type { NumberField as NumberFieldType } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { isNumber } from 'payload/shared'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport type { Option } from '../../elements/ReactSelect/types.js'\nimport type { FormFieldBase } from '../shared/index.js'\n\nimport { ReactSelect } from '../../elements/ReactSelect/index.js'\nimport { useFieldProps } from '../../forms/FieldPropsProvider/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport './index.scss'\n\nexport type NumberFieldProps = {\n  hasMany?: boolean\n  max?: number\n  maxRows?: number\n  min?: number\n  name?: string\n  onChange?: (e: number) => void\n  path?: string\n  placeholder?: NumberFieldType['admin']['placeholder']\n  step?: number\n  width?: string\n} & FormFieldBase\n\nconst _NumberField: React.FC<NumberFieldProps> = (props) => {\n  const {\n    name,\n    AfterInput,\n    BeforeInput,\n    CustomDescription,\n    CustomError,\n    CustomLabel,\n    className,\n    descriptionProps,\n    errorProps,\n    hasMany = false,\n    label,\n    labelProps,\n    max = Infinity,\n    maxRows = Infinity,\n    min = -Infinity,\n    onChange: onChangeFromProps,\n    path: pathFromProps,\n    placeholder,\n    readOnly: readOnlyFromProps,\n    required,\n    step = 1,\n    style,\n    validate,\n    width,\n  } = props\n\n  const { i18n, t } = useTranslation()\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, max, min, required })\n      }\n    },\n    [validate, min, max, required],\n  )\n\n  const { path: pathFromContext, readOnly: readOnlyFromContext } = useFieldProps()\n\n  const { formInitializing, formProcessing, path, setValue, showError, value } = useField<\n    number | number[]\n  >({\n    path: pathFromContext ?? pathFromProps ?? name,\n    validate: memoizedValidate,\n  })\n\n  const disabled = readOnlyFromProps || readOnlyFromContext || formProcessing || formInitializing\n\n  const handleChange = useCallback(\n    (e) => {\n      const val = parseFloat(e.target.value)\n      let newVal = val\n\n      if (Number.isNaN(val)) {\n        newVal = undefined\n      }\n\n      if (typeof onChangeFromProps === 'function') {\n        onChangeFromProps(newVal)\n      }\n\n      setValue(newVal)\n    },\n    [onChangeFromProps, setValue],\n  )\n\n  const [valueToRender, setValueToRender] = useState<\n    { id: string; label: string; value: { value: number } }[]\n  >([]) // Only for hasMany\n\n  const handleHasManyChange = useCallback(\n    (selectedOption) => {\n      if (!disabled) {\n        let newValue\n        if (!selectedOption) {\n          newValue = []\n        } else if (Array.isArray(selectedOption)) {\n          newValue = selectedOption.map((option) => Number(option.value?.value || option.value))\n        } else {\n          newValue = [Number(selectedOption.value?.value || selectedOption.value)]\n        }\n\n        setValue(newValue)\n      }\n    },\n    [disabled, setValue],\n  )\n\n  // useEffect update valueToRender:\n  useEffect(() => {\n    if (hasMany && Array.isArray(value)) {\n      setValueToRender(\n        value.map((val, index) => {\n          return {\n            id: `${val}${index}`, // append index to avoid duplicate keys but allow duplicate numbers\n            label: `${val}`,\n            value: {\n              toString: () => `${val}${index}`,\n              value: (val as unknown as Record<string, number>)?.value || val,\n            }, // You're probably wondering, why the hell is this done that way? Well, React-select automatically uses \"label-value\" as a key, so we will get that react duplicate key warning if we just pass in the value as multiple values can be the same. So we need to append the index to the toString() of the value to avoid that warning, as it uses that as the key.\n          }\n        }),\n      )\n    }\n  }, [value, hasMany])\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        'number',\n        className,\n        showError && 'error',\n        disabled && 'read-only',\n        hasMany && 'has-many',\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      style={{\n        ...style,\n        width,\n      }}\n    >\n      <FieldLabel\n        CustomLabel={CustomLabel}\n        label={label}\n        required={required}\n        {...(labelProps || {})}\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <FieldError CustomError={CustomError} path={path} {...(errorProps || {})} />\n        {hasMany ? (\n          <ReactSelect\n            className={`field-${path.replace(/\\./g, '__')}`}\n            disabled={disabled}\n            filterOption={(_, rawInput) => {\n              const isOverHasMany = Array.isArray(value) && value.length >= maxRows\n              return isNumber(rawInput) && !isOverHasMany\n            }}\n            isClearable\n            isCreatable\n            isMulti\n            isSortable\n            noOptionsMessage={() => {\n              const isOverHasMany = Array.isArray(value) && value.length >= maxRows\n              if (isOverHasMany) {\n                return t('validation:limitReached', { max: maxRows, value: value.length + 1 })\n              }\n              return null\n            }}\n            // numberOnly\n            onChange={handleHasManyChange}\n            options={[]}\n            placeholder={t('general:enterAValue')}\n            showError={showError}\n            value={valueToRender as Option[]}\n          />\n        ) : (\n          <div>\n            {BeforeInput}\n            <input\n              disabled={disabled}\n              id={`field-${path.replace(/\\./g, '__')}`}\n              max={max}\n              min={min}\n              name={path}\n              onChange={handleChange}\n              onWheel={(e) => {\n                // @ts-expect-error\n                e.target.blur()\n              }}\n              placeholder={getTranslation(placeholder, i18n)}\n              step={step}\n              type=\"number\"\n              value={typeof value === 'number' ? value : ''}\n            />\n            {AfterInput}\n          </div>\n        )}\n        {CustomDescription !== undefined ? (\n          CustomDescription\n        ) : (\n          <FieldDescription {...(descriptionProps || {})} />\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport const NumberField = withCondition(_NumberField)\n"],"names":["getTranslation","isNumber","React","useCallback","useEffect","useState","ReactSelect","useFieldProps","useField","withCondition","useTranslation","FieldDescription","FieldError","FieldLabel","fieldBaseClass","_NumberField","props","name","AfterInput","BeforeInput","CustomDescription","CustomError","CustomLabel","className","descriptionProps","errorProps","hasMany","label","labelProps","max","Infinity","maxRows","min","onChange","onChangeFromProps","path","pathFromProps","placeholder","readOnly","readOnlyFromProps","required","step","style","validate","width","i18n","t","memoizedValidate","value","options","pathFromContext","readOnlyFromContext","formInitializing","formProcessing","setValue","showError","disabled","handleChange","e","val","parseFloat","target","newVal","Number","isNaN","undefined","valueToRender","setValueToRender","handleHasManyChange","selectedOption","newValue","Array","isArray","map","option","index","id","toString","div","filter","Boolean","join","replace","filterOption","_","rawInput","isOverHasMany","length","isClearable","isCreatable","isMulti","isSortable","noOptionsMessage","input","onWheel","blur","type","NumberField"],"mappings":"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"}