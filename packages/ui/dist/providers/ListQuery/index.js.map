{"version":3,"sources":["../../../src/providers/ListQuery/index.tsx"],"sourcesContent":["'use client'\nimport type { PaginatedDocs, Where } from 'payload'\n\nimport { useRouter } from 'next/navigation.js'\nimport { isNumber } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { createContext, useContext } from 'react'\n\nimport type { Column } from '../../elements/Table/index.js'\n\nimport { usePreferences } from '../Preferences/index.js'\nimport { useSearchParams } from '../SearchParams/index.js'\n\nexport type ColumnPreferences = Pick<Column, 'accessor' | 'active'>[]\n\ntype Handlers = {\n  handlePageChange?: (page: number) => void\n  handlePerPageChange?: (limit: number) => void\n  handleSearchChange?: (search: string) => void\n  handleSortChange?: (sort: string) => void\n  handleWhereChange?: (where: Where) => void\n}\n\nexport type ListQueryProps = {\n  children: React.ReactNode\n  data: PaginatedDocs\n  defaultLimit?: number\n  defaultSort?: string\n  modifySearchParams?: boolean\n  preferenceKey?: string\n} & Handlers\n\nexport type ListQueryContext = {\n  data: PaginatedDocs\n  defaultLimit?: number\n  defaultSort?: string\n  refineListData: (args: RefineOverrides) => void\n} & Handlers\n\nconst Context = createContext({} as ListQueryContext)\n\nexport const useListQuery = (): ListQueryContext => useContext(Context)\n\ntype RefineOverrides = {\n  limit?: string\n  page?: string\n  search?: string\n  sort?: string\n  where?: Where\n}\n\nexport const ListQueryProvider: React.FC<ListQueryProps> = ({\n  children,\n  data,\n  defaultLimit,\n  defaultSort,\n  handlePageChange: handlePageChangeFromProps,\n  handlePerPageChange: handlePerPageChangeFromProps,\n  handleSearchChange: handleSearchChangeFromProps,\n  handleSortChange: handleSortChangeFromProps,\n  handleWhereChange: handleWhereChangeFromProps,\n  modifySearchParams,\n  preferenceKey,\n}) => {\n  const router = useRouter()\n  const { setPreference } = usePreferences()\n  const hasSetInitialParams = React.useRef(false)\n  const { searchParams: currentQuery } = useSearchParams()\n\n  const refineListData = React.useCallback(\n    async (query: RefineOverrides) => {\n      if (!modifySearchParams) return\n\n      const updatedPreferences: Record<string, unknown> = {}\n      let updatePreferences = false\n\n      if ('limit' in query) {\n        updatedPreferences.limit = query.limit\n        updatePreferences = true\n      }\n      if ('sort' in query) {\n        updatedPreferences.sort = query.sort\n        updatePreferences = true\n      }\n      if (updatePreferences && preferenceKey) {\n        await setPreference(preferenceKey, updatedPreferences)\n      }\n\n      const params = {\n        limit: 'limit' in query ? query.limit : currentQuery?.limit,\n        page: 'page' in query ? query.page : currentQuery?.page,\n        search: 'search' in query ? query.search : currentQuery?.search,\n        sort: 'sort' in query ? query.sort : currentQuery?.sort,\n        where: 'where' in query ? query.where : currentQuery?.where,\n      }\n\n      router.replace(`${qs.stringify(params, { addQueryPrefix: true })}`)\n    },\n    [preferenceKey, modifySearchParams, router, setPreference, currentQuery],\n  )\n\n  const handlePageChange = React.useCallback(\n    async (arg: number) => {\n      if (typeof handlePageChangeFromProps === 'function') {\n        handlePageChangeFromProps(arg)\n      }\n      await refineListData({ page: String(arg) })\n    },\n    [refineListData, handlePageChangeFromProps],\n  )\n  const handlePerPageChange = React.useCallback(\n    async (arg: number) => {\n      if (typeof handlePerPageChangeFromProps === 'function') {\n        handlePerPageChangeFromProps(arg)\n      }\n      await refineListData({ limit: String(arg) })\n    },\n    [refineListData, handlePerPageChangeFromProps],\n  )\n  const handleSearchChange = React.useCallback(\n    async (arg: string) => {\n      if (typeof handleSearchChangeFromProps === 'function') {\n        handleSearchChangeFromProps(arg)\n      }\n      await refineListData({ search: arg })\n    },\n    [refineListData, handleSearchChangeFromProps],\n  )\n  const handleSortChange = React.useCallback(\n    async (arg: string) => {\n      if (typeof handleSortChangeFromProps === 'function') {\n        handleSortChangeFromProps(arg)\n      }\n      await refineListData({ sort: arg })\n    },\n    [refineListData, handleSortChangeFromProps],\n  )\n  const handleWhereChange = React.useCallback(\n    async (arg: Where) => {\n      if (typeof handleWhereChangeFromProps === 'function') {\n        handleWhereChangeFromProps(arg)\n      }\n      await refineListData({ where: arg })\n    },\n    [refineListData, handleWhereChangeFromProps],\n  )\n\n  React.useEffect(() => {\n    if (!hasSetInitialParams.current) {\n      if (modifySearchParams) {\n        let shouldUpdateQueryString = false\n\n        if (isNumber(defaultLimit) && !('limit' in currentQuery)) {\n          currentQuery.limit = String(defaultLimit)\n          shouldUpdateQueryString = true\n        }\n        if (defaultSort && !('sort' in currentQuery)) {\n          currentQuery.sort = defaultSort\n          shouldUpdateQueryString = true\n        }\n        if (shouldUpdateQueryString) {\n          router.replace(`?${qs.stringify(currentQuery)}`)\n        }\n      }\n\n      hasSetInitialParams.current = true\n    }\n  }, [defaultSort, defaultLimit, router, modifySearchParams, currentQuery])\n\n  return (\n    <Context.Provider\n      value={{\n        data,\n        handlePageChange,\n        handlePerPageChange,\n        handleSearchChange,\n        handleSortChange,\n        handleWhereChange,\n        refineListData,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n"],"names":["useRouter","isNumber","qs","React","createContext","useContext","usePreferences","useSearchParams","Context","useListQuery","ListQueryProvider","children","data","defaultLimit","defaultSort","handlePageChange","handlePageChangeFromProps","handlePerPageChange","handlePerPageChangeFromProps","handleSearchChange","handleSearchChangeFromProps","handleSortChange","handleSortChangeFromProps","handleWhereChange","handleWhereChangeFromProps","modifySearchParams","preferenceKey","router","setPreference","hasSetInitialParams","useRef","searchParams","currentQuery","refineListData","useCallback","query","updatedPreferences","updatePreferences","limit","sort","params","page","search","where","replace","stringify","addQueryPrefix","arg","String","useEffect","current","shouldUpdateQueryString","Provider","value"],"mappings":"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"}