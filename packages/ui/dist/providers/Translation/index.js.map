{"version":3,"sources":["../../../src/providers/Translation/index.tsx"],"sourcesContent":["'use client'\nimport type {\n  AcceptedLanguages,\n  ClientTranslationKeys,\n  ClientTranslationsObject,\n  I18nClient,\n  Language,\n  TFunction,\n} from '@payloadcms/translations'\nimport type { Locale } from 'date-fns'\nimport type { ClientConfig, LanguageOptions } from 'payload'\n\nimport { importDateFNSLocale, t } from '@payloadcms/translations'\nimport { enUS } from 'date-fns/locale/en-US'\nimport React, { createContext, useContext, useEffect, useState } from 'react'\n\nimport { useRouteCache } from '../RouteCache/index.js'\n\ntype ContextType<\n  TAdditionalTranslations = {},\n  TAdditionalClientTranslationKeys extends string = never,\n> = {\n  i18n: [TAdditionalClientTranslationKeys] extends [never]\n    ? I18nClient\n    : TAdditionalTranslations extends object\n      ? I18nClient<TAdditionalTranslations, TAdditionalClientTranslationKeys>\n      : I18nClient<ClientTranslationsObject, TAdditionalClientTranslationKeys>\n  languageOptions: LanguageOptions\n  switchLanguage?: (lang: AcceptedLanguages) => Promise<void>\n  t: TFunction<ClientTranslationKeys | Extract<TAdditionalClientTranslationKeys, string>>\n}\n\nconst Context = createContext<ContextType<any, any>>({\n  // Use `any` here to be replaced later with a more specific type when used\n  i18n: {\n    dateFNS: enUS,\n    dateFNSKey: 'en-US',\n    fallbackLanguage: 'en',\n    language: 'en',\n    t: (key) => key,\n    translations: {} as any,\n  },\n  languageOptions: undefined,\n  switchLanguage: undefined,\n  t: (key) => undefined,\n})\n\ntype Props = {\n  children: React.ReactNode\n  dateFNSKey: Language['dateFNSKey']\n  fallbackLang: ClientConfig['i18n']['fallbackLanguage']\n  language: string\n  languageOptions: LanguageOptions\n  switchLanguageServerAction: (lang: string) => Promise<void>\n  translations: I18nClient['translations']\n}\n\nexport const TranslationProvider: React.FC<Props> = ({\n  children,\n  dateFNSKey,\n  fallbackLang,\n  language,\n  languageOptions,\n  switchLanguageServerAction,\n  translations,\n}) => {\n  const { clearRouteCache } = useRouteCache()\n  const [dateFNS, setDateFNS] = useState<Locale>()\n\n  const nextT: ContextType['t'] = (key, vars): string =>\n    t({\n      key,\n      translations,\n      vars,\n    })\n\n  const switchLanguage = React.useCallback(\n    async (lang: string) => {\n      try {\n        await switchLanguageServerAction(lang)\n        clearRouteCache()\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error(`Error loading language: \"${lang}\"`, error)\n      }\n    },\n    [switchLanguageServerAction, clearRouteCache],\n  )\n\n  useEffect(() => {\n    const loadDateFNS = async () => {\n      const imported = await importDateFNSLocale(dateFNSKey)\n\n      setDateFNS(imported)\n    }\n\n    void loadDateFNS()\n  }, [dateFNSKey])\n\n  return (\n    <Context.Provider\n      value={{\n        i18n: {\n          dateFNS,\n          dateFNSKey,\n          fallbackLanguage: fallbackLang,\n          language,\n          t: nextT,\n          translations,\n        },\n        languageOptions,\n        switchLanguage,\n        t: nextT,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  )\n}\n\nexport const useTranslation = <\n  TAdditionalTranslations = {},\n  TAdditionalClientTranslationKeys extends string = never,\n>() => useContext<ContextType<TAdditionalTranslations, TAdditionalClientTranslationKeys>>(Context)\n"],"names":["importDateFNSLocale","t","enUS","React","createContext","useContext","useEffect","useState","useRouteCache","Context","i18n","dateFNS","dateFNSKey","fallbackLanguage","language","key","translations","languageOptions","undefined","switchLanguage","TranslationProvider","children","fallbackLang","switchLanguageServerAction","clearRouteCache","setDateFNS","nextT","vars","useCallback","lang","error","console","loadDateFNS","imported","Provider","value","useTranslation"],"mappings":"AAAA;;AAYA,SAASA,mBAAmB,EAAEC,CAAC,QAAQ,2BAA0B;AACjE,SAASC,IAAI,QAAQ,wBAAuB;AAC5C,OAAOC,SAASC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,QAAO;AAE7E,SAASC,aAAa,QAAQ,yBAAwB;AAgBtD,MAAMC,wBAAUL,cAAqC;IACnD,0EAA0E;IAC1EM,MAAM;QACJC,SAAST;QACTU,YAAY;QACZC,kBAAkB;QAClBC,UAAU;QACVb,GAAG,CAACc,MAAQA;QACZC,cAAc,CAAC;IACjB;IACAC,iBAAiBC;IACjBC,gBAAgBD;IAChBjB,GAAG,CAACc,MAAQG;AACd;AAYA,OAAO,MAAME,sBAAuC,CAAC,EACnDC,QAAQ,EACRT,UAAU,EACVU,YAAY,EACZR,QAAQ,EACRG,eAAe,EACfM,0BAA0B,EAC1BP,YAAY,EACb;IACC,MAAM,EAAEQ,eAAe,EAAE,GAAGhB;IAC5B,MAAM,CAACG,SAASc,WAAW,GAAGlB;IAE9B,MAAMmB,QAA0B,CAACX,KAAKY,OACpC1B,EAAE;YACAc;YACAC;YACAW;QACF;IAEF,MAAMR,iBAAiBhB,MAAMyB,WAAW,CACtC,OAAOC;QACL,IAAI;YACF,MAAMN,2BAA2BM;YACjCL;QACF,EAAE,OAAOM,OAAO;YACd,sCAAsC;YACtCC,QAAQD,KAAK,CAAC,CAAC,yBAAyB,EAAED,KAAK,CAAC,CAAC,EAAEC;QACrD;IACF,GACA;QAACP;QAA4BC;KAAgB;IAG/ClB,UAAU;QACR,MAAM0B,cAAc;YAClB,MAAMC,WAAW,MAAMjC,oBAAoBY;YAE3Ca,WAAWQ;QACb;QAEA,KAAKD;IACP,GAAG;QAACpB;KAAW;IAEf,qBACE,KAACH,QAAQyB,QAAQ;QACfC,OAAO;YACLzB,MAAM;gBACJC;gBACAC;gBACAC,kBAAkBS;gBAClBR;gBACAb,GAAGyB;gBACHV;YACF;YACAC;YACAE;YACAlB,GAAGyB;QACL;kBAECL;;AAGP,EAAC;AAED,OAAO,MAAMe,iBAAiB,IAGvB/B,WAAmFI,SAAQ"}