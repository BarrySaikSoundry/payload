{"version":3,"sources":["../../../src/providers/Preferences/index.tsx"],"sourcesContent":["'use client'\nimport { dequal } from 'dequal/lite' // lite: no need for Map and Set support\nimport React, { createContext, useCallback, useContext, useEffect, useRef } from 'react'\n\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { useAuth } from '../Auth/index.js'\nimport { useConfig } from '../Config/index.js'\n\ntype PreferencesContext = {\n  getPreference: <T = any>(key: string) => Promise<T>\n  /**\n   * @param key - a string identifier for the property being set\n   * @param value - preference data to store\n   * @param merge - when true will combine the existing preference object batch the change into one request for objects, default = false\n   */\n  setPreference: <T = any>(key: string, value: T, merge?: boolean) => Promise<void>\n}\n\nconst Context = createContext({} as PreferencesContext)\n\nconst requestOptions = (value, language) => ({\n  body: JSON.stringify({ value }),\n  headers: {\n    'Accept-Language': language,\n    'Content-Type': 'application/json',\n  },\n})\n\nexport const PreferencesProvider: React.FC<{ children?: React.ReactNode }> = ({ children }) => {\n  const contextRef = useRef({} as PreferencesContext)\n  const preferencesRef = useRef({})\n  const pendingUpdate = useRef({})\n  const config = useConfig()\n  const { user } = useAuth()\n  const { i18n } = useTranslation()\n\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n\n  useEffect(() => {\n    if (!user) {\n      // clear preferences between users\n      preferencesRef.current = {}\n    }\n  }, [user])\n\n  const getPreference = useCallback(\n    async <T = any,>(key: string): Promise<T> => {\n      const prefs = preferencesRef.current\n      if (typeof prefs[key] !== 'undefined') return prefs[key]\n      const promise = new Promise((resolve: (value: T) => void) => {\n        void (async () => {\n          const request = await requests.get(`${serverURL}${api}/payload-preferences/${key}`, {\n            headers: {\n              'Accept-Language': i18n.language,\n            },\n          })\n          let value = null\n          if (request.status === 200) {\n            const preference = await request.json()\n            value = preference.value\n          }\n          preferencesRef.current[key] = value\n          resolve(value)\n        })()\n      })\n      prefs[key] = promise\n      return promise\n    },\n    [i18n.language, api, preferencesRef, serverURL],\n  )\n\n  const setPreference = useCallback(\n    async (key: string, value: unknown, merge = false): Promise<void> => {\n      if (merge === false) {\n        preferencesRef.current[key] = value\n\n        await requests.post(\n          `${serverURL}${api}/payload-preferences/${key}`,\n          requestOptions(value, i18n.language),\n        )\n\n        return\n      }\n\n      let newValue = value\n      const currentPreference = await getPreference(key)\n      // handle value objects where multiple values can be set under one key\n      if (\n        typeof value === 'object' &&\n        typeof currentPreference === 'object' &&\n        typeof newValue === 'object'\n      ) {\n        // merge the value with any existing preference for the key\n        newValue = { ...(currentPreference || {}), ...value }\n\n        if (dequal(newValue, currentPreference)) {\n          return\n        }\n\n        // add the requested changes to a pendingUpdate batch for the key\n        pendingUpdate.current[key] = {\n          ...pendingUpdate.current[key],\n          ...(newValue as Record<string, unknown>),\n        }\n      } else {\n        if (newValue === currentPreference) {\n          return\n        }\n        pendingUpdate.current[key] = newValue\n      }\n\n      const updatePreference = async () => {\n        // compare the value stored in context before sending to eliminate duplicate requests\n        if (dequal(pendingUpdate.current[key], preferencesRef.current[key])) {\n          return\n        }\n\n        // preference set in context here to prevent other updatePreference at the same time\n        preferencesRef.current[key] = pendingUpdate.current[key]\n\n        await requests.post(\n          `${serverURL}${api}/payload-preferences/${key}`,\n          requestOptions(preferencesRef.current[key], i18n.language),\n        )\n\n        // reset any changes for this key after sending the request\n        delete pendingUpdate.current[key]\n      }\n\n      // use timeout to allow multiple changes of different values using the same key in one request\n      setTimeout(() => {\n        void updatePreference()\n      })\n    },\n    [api, getPreference, i18n.language, pendingUpdate, serverURL],\n  )\n\n  contextRef.current.getPreference = getPreference\n  contextRef.current.setPreference = setPreference\n\n  return <Context.Provider value={contextRef.current}>{children}</Context.Provider>\n}\n\nexport const usePreferences = (): PreferencesContext => useContext(Context)\n"],"names":["dequal","React","createContext","useCallback","useContext","useEffect","useRef","useTranslation","requests","useAuth","useConfig","Context","requestOptions","value","language","body","JSON","stringify","headers","PreferencesProvider","children","contextRef","preferencesRef","pendingUpdate","config","user","i18n","routes","api","serverURL","current","getPreference","key","prefs","promise","Promise","resolve","request","get","status","preference","json","setPreference","merge","post","newValue","currentPreference","updatePreference","setTimeout","Provider","usePreferences"],"mappings":"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"}