{"version":3,"sources":["../../../src/providers/Selection/index.tsx"],"sourcesContent":["'use client'\nimport type { Where } from 'payload'\n\nimport * as qs from 'qs-esm'\nimport React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react'\n\nimport { useLocale } from '../Locale/index.js'\nimport { useSearchParams } from '../SearchParams/index.js'\n\nexport enum SelectAllStatus {\n  AllAvailable = 'allAvailable',\n  AllInPage = 'allInPage',\n  None = 'none',\n  Some = 'some',\n}\n\ntype SelectionContext = {\n  count: number\n  getQueryParams: (additionalParams?: Where) => string\n  selectAll: SelectAllStatus\n  selected: Record<number | string, boolean>\n  setSelection: (id: number | string) => void\n  toggleAll: (allAvailable?: boolean) => void\n  totalDocs: number\n}\n\nconst Context = createContext({} as SelectionContext)\n\ntype Props = {\n  children: React.ReactNode\n  docs: any[]\n  totalDocs: number\n}\nexport const SelectionProvider: React.FC<Props> = ({ children, docs = [], totalDocs }) => {\n  const contextRef = useRef({} as SelectionContext)\n\n  const { code: locale } = useLocale()\n  const [selected, setSelected] = useState<SelectionContext['selected']>(() => {\n    const rows = {}\n    docs.forEach(({ id }) => {\n      rows[id] = false\n    })\n    return rows\n  })\n  const [selectAll, setSelectAll] = useState<SelectAllStatus>(SelectAllStatus.None)\n  const [count, setCount] = useState(0)\n  const { searchParams } = useSearchParams()\n\n  const toggleAll = useCallback(\n    (allAvailable = false) => {\n      const rows = {}\n      if (allAvailable) {\n        setSelectAll(SelectAllStatus.AllAvailable)\n        docs.forEach(({ id }) => {\n          rows[id] = true\n        })\n      } else if (\n        selectAll === SelectAllStatus.AllAvailable ||\n        selectAll === SelectAllStatus.AllInPage\n      ) {\n        setSelectAll(SelectAllStatus.None)\n        docs.forEach(({ id }) => {\n          rows[id] = false\n        })\n      } else {\n        docs.forEach(({ id }) => {\n          rows[id] = selectAll !== SelectAllStatus.Some\n        })\n      }\n      setSelected(rows)\n    },\n    [docs, selectAll],\n  )\n\n  const setSelection = useCallback(\n    (id) => {\n      const isSelected = !selected[id]\n      const newSelected = {\n        ...selected,\n        [id]: isSelected,\n      }\n      if (!isSelected) {\n        setSelectAll(SelectAllStatus.Some)\n      }\n      setSelected(newSelected)\n    },\n    [selected],\n  )\n\n  const getQueryParams = useCallback(\n    (additionalParams?: Where): string => {\n      let where: Where\n      if (selectAll === SelectAllStatus.AllAvailable) {\n        const params = searchParams?.where as Where\n        where = params || {\n          id: { not_equals: '' },\n        }\n      } else {\n        where = {\n          id: {\n            in: Object.keys(selected)\n              .filter((id) => selected[id])\n              .map((id) => id),\n          },\n        }\n      }\n      if (additionalParams) {\n        where = {\n          and: [{ ...additionalParams }, where],\n        }\n      }\n      return qs.stringify(\n        {\n          locale,\n          where,\n        },\n        { addQueryPrefix: true },\n      )\n    },\n    [selectAll, selected, locale, searchParams],\n  )\n\n  useEffect(() => {\n    if (selectAll === SelectAllStatus.AllAvailable) {\n      return\n    }\n    let some = false\n    let all = true\n    Object.values(selected).forEach((val) => {\n      all = all && val\n      some = some || val\n    })\n\n    if (all) {\n      setSelectAll(SelectAllStatus.AllInPage)\n    } else if (some) {\n      setSelectAll(SelectAllStatus.Some)\n    } else {\n      setSelectAll(SelectAllStatus.None)\n    }\n  }, [selectAll, selected])\n\n  useEffect(() => {\n    const newCount =\n      selectAll === SelectAllStatus.AllAvailable\n        ? totalDocs\n        : Object.keys(selected).filter((id) => selected[id]).length\n    setCount(newCount)\n  }, [selectAll, selected, totalDocs])\n\n  contextRef.current = {\n    count,\n    getQueryParams,\n    selectAll,\n    selected,\n    setSelection,\n    toggleAll,\n    totalDocs,\n  }\n\n  return <Context.Provider value={contextRef.current}>{children}</Context.Provider>\n}\n\nexport const useSelection = (): SelectionContext => useContext(Context)\n"],"names":["qs","React","createContext","useCallback","useContext","useEffect","useRef","useState","useLocale","useSearchParams","SelectAllStatus","Context","SelectionProvider","children","docs","totalDocs","contextRef","code","locale","selected","setSelected","rows","forEach","id","selectAll","setSelectAll","count","setCount","searchParams","toggleAll","allAvailable","setSelection","isSelected","newSelected","getQueryParams","additionalParams","where","params","not_equals","in","Object","keys","filter","map","and","stringify","addQueryPrefix","some","all","values","val","newCount","length","current","Provider","value","useSelection"],"mappings":"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"}