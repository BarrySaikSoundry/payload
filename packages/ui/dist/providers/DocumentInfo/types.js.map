{"version":3,"sources":["../../../src/providers/DocumentInfo/types.ts"],"sourcesContent":["import type {\n  ClientCollectionConfig,\n  ClientGlobalConfig,\n  Data,\n  DocumentPermissions,\n  DocumentPreferences,\n  FormState,\n  InsideFieldsPreferences,\n  PaginatedDocs,\n  SanitizedCollectionConfig,\n  SanitizedGlobalConfig,\n  TypeWithID,\n  TypeWithTimestamps,\n  TypeWithVersion,\n} from 'payload'\nimport type React from 'react'\n\nexport type DocumentInfoProps = {\n  AfterDocument?: React.ReactNode\n  AfterFields?: React.ReactNode\n  BeforeDocument?: React.ReactNode\n  BeforeFields?: React.ReactNode\n  action?: string\n  apiURL?: string\n  collectionSlug?: SanitizedCollectionConfig['slug']\n  disableActions?: boolean\n  disableLeaveWithoutSaving?: boolean\n  docPermissions?: DocumentPermissions\n  globalSlug?: SanitizedGlobalConfig['slug']\n  hasPublishPermission?: boolean\n  hasSavePermission?: boolean\n  id: null | number | string\n  initialData?: Data\n  initialState?: FormState\n  isEditing?: boolean\n  onLoadError?: (data?: any) => Promise<void> | void\n  onSave?: (data: Data) => Promise<void> | void\n}\n\nexport type DocumentInfoContext = {\n  docConfig?: ClientCollectionConfig | ClientGlobalConfig\n  getDocPermissions: (data?: Data) => Promise<void>\n  getDocPreferences: () => Promise<DocumentPreferences>\n  getVersions: () => Promise<void>\n  initialData: Data\n  initialState?: FormState\n  isInitializing: boolean\n  isLoading: boolean\n  preferencesKey?: string\n  publishedDoc?: { _status?: string } & TypeWithID & TypeWithTimestamps\n  setDocFieldPreferences: (\n    field: string,\n    fieldPreferences: { [key: string]: unknown } & Partial<InsideFieldsPreferences>,\n  ) => void\n  setDocumentTitle: (title: string) => void\n  slug?: string\n  title: string\n  unpublishedVersions?: PaginatedDocs<TypeWithVersion<any>>\n  versions?: PaginatedDocs<TypeWithVersion<any>>\n  versionsCount?: PaginatedDocs<TypeWithVersion<any>>\n} & DocumentInfoProps\n"],"names":[],"mappings":"AAuCA,WAqBqB"}