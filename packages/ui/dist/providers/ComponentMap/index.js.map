{"version":3,"sources":["../../../src/providers/ComponentMap/index.tsx"],"sourcesContent":["'use client'\nimport React, { createContext, useCallback, useContext } from 'react'\n\nimport type { ComponentMap, FieldMap, MappedField } from './buildComponentMap/types.js'\n\nexport type IComponentMapContext = {\n  componentMap: ComponentMap\n  getComponentMap: (args: {\n    collectionSlug?: string\n    globalSlug?: string\n  }) => ComponentMap['collections'][0] | ComponentMap['globals'][0]\n  getFieldMap: (args: { collectionSlug?: string; globalSlug?: string }) => [] | FieldMap\n  getMappedFieldByPath: (args: {\n    collectionSlug?: string\n    globalSlug?: string\n    path: string\n  }) => MappedField | undefined\n}\n\nconst ComponentMapContext = createContext<IComponentMapContext>({} as IComponentMapContext)\n\nexport const ComponentMapProvider: React.FC<{\n  children: React.ReactNode\n  componentMap: ComponentMap\n}> = ({ children, componentMap }) => {\n  const getMappedFieldByPath: IComponentMapContext['getMappedFieldByPath'] = useCallback(\n    ({ collectionSlug, globalSlug, path }) => {\n      let fieldMap: FieldMap\n\n      if (collectionSlug) {\n        fieldMap = componentMap.collections[collectionSlug].fieldMap\n      }\n\n      if (globalSlug) {\n        fieldMap = componentMap.globals[globalSlug].fieldMap\n      }\n\n      // TODO: better lookup for nested fields, etc.\n      return fieldMap.find((field) => 'name' in field && field.name === path)\n    },\n    [componentMap],\n  )\n\n  const getFieldMap: IComponentMapContext['getFieldMap'] = useCallback(\n    ({ collectionSlug, globalSlug }) => {\n      if (collectionSlug) {\n        return componentMap.collections[collectionSlug].fieldMap\n      }\n\n      if (globalSlug) {\n        return componentMap.globals[globalSlug].fieldMap\n      }\n\n      return []\n    },\n    [componentMap],\n  )\n\n  const getComponentMap: IComponentMapContext['getComponentMap'] = useCallback(\n    ({ collectionSlug, globalSlug }) => {\n      if (collectionSlug) {\n        return componentMap.collections[collectionSlug]\n      }\n\n      if (globalSlug) {\n        return componentMap.globals[globalSlug]\n      }\n\n      return {} as ComponentMap['collections'][0] | ComponentMap['globals'][0]\n    },\n    [componentMap],\n  )\n\n  return (\n    <ComponentMapContext.Provider\n      value={{ componentMap, getComponentMap, getFieldMap, getMappedFieldByPath }}\n    >\n      {children}\n    </ComponentMapContext.Provider>\n  )\n}\n\nexport const useComponentMap = (): IComponentMapContext => useContext(ComponentMapContext)\n"],"names":["React","createContext","useCallback","useContext","ComponentMapContext","ComponentMapProvider","children","componentMap","getMappedFieldByPath","collectionSlug","globalSlug","path","fieldMap","collections","globals","find","field","name","getFieldMap","getComponentMap","Provider","value","useComponentMap"],"mappings":"AAAA;;AACA,OAAOA,SAASC,aAAa,EAAEC,WAAW,EAAEC,UAAU,QAAQ,QAAO;AAkBrE,MAAMC,oCAAsBH,cAAoC,CAAC;AAEjE,OAAO,MAAMI,uBAGR,CAAC,EAAEC,QAAQ,EAAEC,YAAY,EAAE;IAC9B,MAAMC,uBAAqEN,YACzE,CAAC,EAAEO,cAAc,EAAEC,UAAU,EAAEC,IAAI,EAAE;QACnC,IAAIC;QAEJ,IAAIH,gBAAgB;YAClBG,WAAWL,aAAaM,WAAW,CAACJ,eAAe,CAACG,QAAQ;QAC9D;QAEA,IAAIF,YAAY;YACdE,WAAWL,aAAaO,OAAO,CAACJ,WAAW,CAACE,QAAQ;QACtD;QAEA,8CAA8C;QAC9C,OAAOA,SAASG,IAAI,CAAC,CAACC,QAAU,UAAUA,SAASA,MAAMC,IAAI,KAAKN;IACpE,GACA;QAACJ;KAAa;IAGhB,MAAMW,cAAmDhB,YACvD,CAAC,EAAEO,cAAc,EAAEC,UAAU,EAAE;QAC7B,IAAID,gBAAgB;YAClB,OAAOF,aAAaM,WAAW,CAACJ,eAAe,CAACG,QAAQ;QAC1D;QAEA,IAAIF,YAAY;YACd,OAAOH,aAAaO,OAAO,CAACJ,WAAW,CAACE,QAAQ;QAClD;QAEA,OAAO,EAAE;IACX,GACA;QAACL;KAAa;IAGhB,MAAMY,kBAA2DjB,YAC/D,CAAC,EAAEO,cAAc,EAAEC,UAAU,EAAE;QAC7B,IAAID,gBAAgB;YAClB,OAAOF,aAAaM,WAAW,CAACJ,eAAe;QACjD;QAEA,IAAIC,YAAY;YACd,OAAOH,aAAaO,OAAO,CAACJ,WAAW;QACzC;QAEA,OAAO,CAAC;IACV,GACA;QAACH;KAAa;IAGhB,qBACE,KAACH,oBAAoBgB,QAAQ;QAC3BC,OAAO;YAAEd;YAAcY;YAAiBD;YAAaV;QAAqB;kBAEzEF;;AAGP,EAAC;AAED,OAAO,MAAMgB,kBAAkB,IAA4BnB,WAAWC,qBAAoB"}