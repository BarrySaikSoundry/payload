{"version":3,"sources":["../../../../src/providers/ComponentMap/buildComponentMap/fields.tsx"],"sourcesContent":["import type { I18nClient } from '@payloadcms/translations'\nimport type {\n  CellComponentProps,\n  CustomComponent,\n  Field,\n  FieldDescriptionProps,\n  FieldWithPath,\n  LabelProps,\n  Option,\n  SanitizedConfig,\n} from 'payload'\n\nimport { MissingEditorProp } from 'payload'\nimport { fieldAffectsData, fieldIsPresentationalOnly } from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport type { ArrayFieldProps } from '../../../fields/Array/index.js'\nimport type { BlocksFieldProps } from '../../../fields/Blocks/index.js'\nimport type { CheckboxFieldProps } from '../../../fields/Checkbox/index.js'\nimport type { CodeFieldProps } from '../../../fields/Code/index.js'\nimport type { CollapsibleFieldProps } from '../../../fields/Collapsible/index.js'\nimport type { DateFieldProps } from '../../../fields/DateTime/index.js'\nimport type { EmailFieldProps } from '../../../fields/Email/index.js'\nimport type { GroupFieldProps } from '../../../fields/Group/index.js'\nimport type { JSONFieldProps } from '../../../fields/JSON/index.js'\nimport type { NumberFieldProps } from '../../../fields/Number/index.js'\nimport type { PointFieldProps } from '../../../fields/Point/index.js'\nimport type { RadioFieldProps } from '../../../fields/RadioGroup/index.js'\nimport type { RelationshipFieldProps } from '../../../fields/Relationship/types.js'\nimport type { RichTextFieldProps } from '../../../fields/RichText/index.js'\nimport type { RowFieldProps } from '../../../fields/Row/types.js'\nimport type { SelectFieldProps } from '../../../fields/Select/index.js'\nimport type { TabsFieldProps } from '../../../fields/Tabs/index.js'\nimport type { TextFieldProps } from '../../../fields/Text/types.js'\nimport type { TextareaFieldProps } from '../../../fields/Textarea/types.js'\nimport type { UploadFieldProps } from '../../../fields/Upload/types.js'\nimport type { FormFieldBase } from '../../../fields/shared/index.js'\nimport type { WithServerSidePropsPrePopulated } from './index.js'\nimport type {\n  FieldComponentProps,\n  FieldMap,\n  MappedField,\n  MappedTab,\n  ReducedBlock,\n} from './types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { FieldDescription } from '../../../exports/client/index.js'\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { HiddenField } from '../../../exports/client/index.js'\n\nfunction generateFieldPath(parentPath, name) {\n  let tabPath = parentPath || ''\n  if (parentPath && name) {\n    tabPath = `${parentPath}.${name}`\n  } else if (!parentPath && name) {\n    tabPath = name\n  }\n\n  return tabPath\n}\n\nexport const mapFields = (args: {\n  WithServerSideProps: WithServerSidePropsPrePopulated\n  config: SanitizedConfig\n  /**\n   * If mapFields is used outside of collections, you might not want it to add an id field\n   */\n  disableAddingID?: boolean\n  fieldSchema: FieldWithPath[]\n  filter?: (field: Field) => boolean\n  i18n: I18nClient\n  parentPath?: string\n  readOnly?: boolean\n}): FieldMap => {\n  const {\n    WithServerSideProps,\n    config,\n    disableAddingID,\n    fieldSchema,\n    filter,\n    i18n,\n    i18n: { t },\n    parentPath,\n    readOnly: readOnlyOverride,\n  } = args\n\n  const result: FieldMap = fieldSchema.reduce((acc, field): FieldMap => {\n    const fieldIsPresentational = fieldIsPresentationalOnly(field)\n    let CustomFieldComponent: CustomComponent<FieldComponentProps> = field.admin?.components?.Field\n\n    let CustomCellComponent = field.admin?.components?.Cell\n\n    const isHidden = field?.admin && 'hidden' in field.admin && field.admin.hidden\n\n    if (fieldIsPresentational || (!field?.hidden && field?.admin?.disabled !== true)) {\n      if ((filter && typeof filter === 'function' && filter(field)) || !filter) {\n        if (isHidden) {\n          if (CustomFieldComponent) {\n            CustomFieldComponent = HiddenField\n          }\n        }\n\n        const isFieldAffectingData = fieldAffectsData(field)\n\n        const path = generateFieldPath(\n          parentPath,\n          isFieldAffectingData && 'name' in field ? field.name : '',\n        )\n\n        const AfterInput =\n          ('admin' in field &&\n            'components' in field.admin &&\n            'afterInput' in field.admin.components &&\n            Array.isArray(field.admin?.components?.afterInput) && (\n              <Fragment>\n                {field.admin.components.afterInput.map((Component, i) => (\n                  <WithServerSideProps Component={Component} key={i} />\n                ))}\n              </Fragment>\n            )) ||\n          null\n\n        const BeforeInput =\n          ('admin' in field &&\n            field.admin?.components &&\n            'beforeInput' in field.admin.components &&\n            Array.isArray(field.admin.components.beforeInput) && (\n              <Fragment>\n                {field.admin.components.beforeInput.map((Component, i) => (\n                  <WithServerSideProps Component={Component} key={i} />\n                ))}\n              </Fragment>\n            )) ||\n          null\n\n        let label = undefined\n        if ('label' in field) {\n          if (typeof field.label === 'string' || typeof field.label === 'object') {\n            label = field.label\n          } else if (typeof field.label === 'function') {\n            label = field.label({ t })\n          }\n        }\n\n        const labelProps: LabelProps = {\n          label,\n          required: 'required' in field ? field.required : undefined,\n          schemaPath: path,\n        }\n\n        const CustomLabelComponent =\n          ('admin' in field &&\n            field.admin?.components &&\n            'Label' in field.admin.components &&\n            field.admin.components?.Label) ||\n          undefined\n\n        // If we return undefined here (so if no CUSTOM label component is set), the field client component is responsible for falling back to the default label\n        const CustomLabel =\n          CustomLabelComponent !== undefined ? (\n            <WithServerSideProps Component={CustomLabelComponent} {...(labelProps || {})} />\n          ) : undefined\n\n        let description = undefined\n        if (field.admin && 'description' in field.admin) {\n          if (\n            typeof field.admin?.description === 'string' ||\n            typeof field.admin?.description === 'object'\n          ) {\n            description = field.admin.description\n          } else if (typeof field.admin?.description === 'function') {\n            description = field.admin?.description({ t })\n          }\n        }\n\n        const descriptionProps: FieldDescriptionProps = {\n          description,\n        }\n\n        let CustomDescriptionComponent = undefined\n        if (\n          field.admin?.components &&\n          'Description' in field.admin.components &&\n          field.admin.components?.Description\n        ) {\n          CustomDescriptionComponent = field.admin.components.Description\n        } else if (description) {\n          CustomDescriptionComponent = FieldDescription\n        }\n\n        const CustomDescription =\n          CustomDescriptionComponent !== undefined ? (\n            <WithServerSideProps\n              Component={CustomDescriptionComponent}\n              {...(descriptionProps || {})}\n            />\n          ) : undefined\n\n        const errorProps = {\n          path,\n        }\n\n        const CustomErrorComponent =\n          ('admin' in field &&\n            field.admin?.components &&\n            'Error' in field.admin.components &&\n            field.admin?.components?.Error) ||\n          undefined\n\n        const CustomError =\n          CustomErrorComponent !== undefined ? (\n            <WithServerSideProps Component={CustomErrorComponent} {...(errorProps || {})} />\n          ) : undefined\n\n        // These fields are shared across all field types even if they are not used in the default field, as the custom field component can use them\n        const baseFieldProps: FormFieldBase = {\n          AfterInput,\n          BeforeInput,\n          CustomDescription,\n          CustomError,\n          CustomLabel,\n          custom: 'admin' in field && 'custom' in field.admin ? field.admin?.custom : undefined,\n          descriptionProps,\n          disabled: 'admin' in field && 'disabled' in field.admin ? field.admin?.disabled : false,\n          errorProps,\n          label: labelProps?.label,\n          path,\n          required: 'required' in field ? field.required : undefined,\n        }\n\n        let fieldComponentProps: FieldComponentProps\n\n        let fieldOptions: Option[]\n\n        if ('options' in field) {\n          fieldOptions = field.options.map((option) => {\n            if (typeof option === 'object' && typeof option.label === 'function') {\n              return {\n                label: option.label({ t }),\n                value: option.value,\n              }\n            }\n\n            return option\n          })\n        }\n\n        const cellComponentProps: CellComponentProps = {\n          name: 'name' in field ? field.name : undefined,\n          fieldType: field.type,\n          isFieldAffectingData,\n          label: labelProps?.label || undefined,\n          labels: 'labels' in field ? field.labels : undefined,\n          options: 'options' in field ? fieldOptions : undefined,\n          relationTo: 'relationTo' in field ? field.relationTo : undefined,\n          schemaPath: path,\n        }\n\n        switch (field.type) {\n          case 'array': {\n            let CustomRowLabel: React.ReactNode\n\n            if (\n              'admin' in field &&\n              field.admin.components &&\n              'RowLabel' in field.admin.components &&\n              field.admin.components.RowLabel\n            ) {\n              const CustomRowLabelComponent = field.admin.components.RowLabel\n              CustomRowLabel = (\n                <WithServerSideProps Component={CustomRowLabelComponent} {...(labelProps || {})} />\n              )\n            }\n\n            const arrayFieldProps: Omit<ArrayFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              name: field.name,\n              CustomRowLabel,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              fieldMap: mapFields({\n                WithServerSideProps,\n                config,\n                fieldSchema: field.fields,\n                filter,\n                i18n,\n                parentPath: path,\n                readOnly: readOnlyOverride,\n              }),\n              isSortable: field.admin?.isSortable,\n              labels: field.labels,\n              maxRows: field.maxRows,\n              minRows: field.minRows,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = arrayFieldProps\n            break\n          }\n          case 'blocks': {\n            const blocks = field.blocks.map((block) => {\n              const blockFieldMap = mapFields({\n                WithServerSideProps,\n                config,\n                fieldSchema: block.fields,\n                filter,\n                i18n,\n                parentPath: `${path}.${block.slug}`,\n                readOnly: readOnlyOverride,\n              })\n\n              const reducedBlock: ReducedBlock = {\n                slug: block.slug,\n                custom: block.admin?.custom,\n                fieldMap: blockFieldMap,\n                imageAltText: block.imageAltText,\n                imageURL: block.imageURL,\n                labels: block.labels,\n              }\n\n              return reducedBlock\n            })\n\n            const blocksField: Omit<BlocksFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              name: field.name,\n              blocks,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              isSortable: field.admin?.isSortable,\n              labels: field.labels,\n              maxRows: field.maxRows,\n              minRows: field.minRows,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = blocksField\n\n            cellComponentProps.blocks = field.blocks.map((b) => ({\n              slug: b.slug,\n              labels: b.labels,\n            }))\n\n            break\n          }\n          case 'checkbox': {\n            const checkboxField: CheckboxFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = checkboxField\n            break\n          }\n          case 'code': {\n            const codeField: CodeFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              editorOptions: field.admin?.editorOptions,\n              language: field.admin?.language,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = codeField\n            break\n          }\n          case 'collapsible': {\n            let CustomCollapsibleLabel: React.ReactNode\n            if (\n              field?.admin?.components &&\n              'RowLabel' in field.admin.components &&\n              field?.admin?.components?.RowLabel\n            ) {\n              const CustomCollapsibleLabelComponent = field.admin.components.RowLabel\n              CustomCollapsibleLabel = (\n                <WithServerSideProps\n                  Component={CustomCollapsibleLabelComponent}\n                  {...(labelProps || {})}\n                />\n              )\n            }\n\n            const collapsibleField: Omit<CollapsibleFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              CustomLabel: CustomCollapsibleLabel,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              fieldMap: mapFields({\n                WithServerSideProps,\n                config,\n                disableAddingID: true,\n                fieldSchema: field.fields,\n                filter,\n                i18n,\n                parentPath: path,\n                readOnly: readOnlyOverride,\n              }),\n              initCollapsed: field.admin?.initCollapsed,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = collapsibleField as CollapsibleFieldProps // TODO: dunno why this is needed\n            break\n          }\n          case 'date': {\n            const dateField: DateFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              date: field.admin?.date,\n              disabled: field.admin?.disabled,\n              placeholder: field.admin?.placeholder,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = dateField\n            cellComponentProps.dateDisplayFormat = field.admin?.date?.displayFormat\n            break\n          }\n          case 'email': {\n            const emailField: EmailFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              placeholder: field.admin?.placeholder,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = emailField\n            break\n          }\n          case 'group': {\n            const groupField: Omit<GroupFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              fieldMap: mapFields({\n                WithServerSideProps,\n                config,\n                disableAddingID: true,\n                fieldSchema: field.fields,\n                filter,\n                i18n,\n                parentPath: path,\n                readOnly: readOnlyOverride,\n              }),\n              hideGutter: field.admin?.hideGutter,\n              readOnly: field.admin?.readOnly,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = groupField\n            break\n          }\n          case 'json': {\n            const jsonField: JSONFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              editorOptions: field.admin?.editorOptions,\n              jsonSchema: field.jsonSchema,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = jsonField\n            break\n          }\n          case 'number': {\n            const numberField: NumberFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              hasMany: field.hasMany,\n              max: field.max,\n              maxRows: field.maxRows,\n              min: field.min,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              step: field.admin?.step,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = numberField\n            break\n          }\n          case 'point': {\n            const pointField: PointFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = pointField\n            break\n          }\n          case 'relationship': {\n            const relationshipField: RelationshipFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              allowCreate: field.admin.allowCreate,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              hasMany: field.hasMany,\n              isSortable: field.admin?.isSortable,\n              readOnly: field.admin?.readOnly,\n              relationTo: field.relationTo,\n              required: field.required,\n              sortOptions: field.admin.sortOptions,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            cellComponentProps.relationTo = field.relationTo\n            fieldComponentProps = relationshipField\n            break\n          }\n          case 'radio': {\n            const radioField: RadioFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              layout: field.admin?.layout,\n              options: fieldOptions,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            cellComponentProps.options = fieldOptions\n            fieldComponentProps = radioField\n            break\n          }\n          case 'richText': {\n            const richTextField: RichTextFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n            if (!field?.editor) {\n              throw new MissingEditorProp(field) // while we allow disabling editor functionality, you should not have any richText fields defined if you do not have an editor\n            }\n            if (typeof field?.editor === 'function') {\n              throw new Error('Attempted to access unsanitized rich text editor.')\n            }\n\n            const RichTextFieldComponent = field.editor.FieldComponent\n            const RichTextCellComponent = field.editor.CellComponent\n\n            if (typeof field.editor.generateComponentMap === 'function') {\n              const result = field.editor.generateComponentMap({\n                WithServerSideProps,\n                config,\n                i18n,\n                schemaPath: path,\n              })\n              richTextField.richTextComponentMap = result\n              cellComponentProps.richTextComponentMap = result\n            }\n\n            if (RichTextFieldComponent) {\n              CustomFieldComponent = RichTextFieldComponent\n            }\n\n            if (RichTextCellComponent) {\n              CustomCellComponent = RichTextCellComponent\n            }\n\n            fieldComponentProps = richTextField\n\n            break\n          }\n          case 'row': {\n            const rowField: Omit<RowFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              fieldMap: mapFields({\n                WithServerSideProps,\n                config,\n                disableAddingID: true,\n                fieldSchema: field.fields,\n                filter,\n                i18n,\n                parentPath: path,\n                readOnly: readOnlyOverride,\n              }),\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = rowField\n            break\n          }\n          case 'tabs': {\n            // `tabs` fields require a field map of each of its tab's nested fields\n            const tabs = field.tabs.map((tab) => {\n              const tabFieldMap = mapFields({\n                WithServerSideProps,\n                config,\n                disableAddingID: true,\n                fieldSchema: tab.fields,\n                filter,\n                i18n,\n                parentPath: path,\n                readOnly: readOnlyOverride,\n              })\n\n              const reducedTab: MappedTab = {\n                name: 'name' in tab ? tab.name : undefined,\n                fieldMap: tabFieldMap,\n                label: tab.label,\n              }\n\n              return reducedTab\n            })\n\n            const tabsField: Omit<TabsFieldProps, 'indexPath' | 'permissions'> = {\n              ...baseFieldProps,\n              name: 'name' in field ? (field.name as string) : undefined,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              tabs,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = tabsField\n            break\n          }\n          case 'text': {\n            const textField: TextFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              hasMany: field.hasMany,\n              maxLength: field.maxLength,\n              minLength: field.minLength,\n              placeholder: field.admin?.placeholder,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = textField\n            break\n          }\n          case 'textarea': {\n            const textareaField: TextareaFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              maxLength: field.maxLength,\n              minLength: field.minLength,\n              placeholder: field.admin?.placeholder,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              rows: field.admin?.rows,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            fieldComponentProps = textareaField\n            break\n          }\n          case 'ui': {\n            fieldComponentProps = baseFieldProps\n            break\n          }\n          case 'upload': {\n            const uploadField: UploadFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              filterOptions: field.filterOptions,\n              readOnly: field.admin?.readOnly,\n              relationTo: field.relationTo,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            cellComponentProps.relationTo = field.relationTo\n            fieldComponentProps = uploadField\n            break\n          }\n          case 'select': {\n            const selectField: SelectFieldProps = {\n              ...baseFieldProps,\n              name: field.name,\n              className: field.admin?.className,\n              disabled: field.admin?.disabled,\n              hasMany: field.hasMany,\n              isClearable: field.admin?.isClearable,\n              options: fieldOptions,\n              readOnly: field.admin?.readOnly,\n              required: field.required,\n              style: field.admin?.style,\n              width: field.admin?.width,\n            }\n\n            cellComponentProps.options = fieldOptions\n            fieldComponentProps = selectField\n            break\n          }\n          default: {\n            break\n          }\n        }\n\n        const reducedField: MappedField = {\n          name: 'name' in field ? field.name : undefined,\n          type: field.type,\n          CustomCell: CustomCellComponent ? (\n            <WithServerSideProps Component={CustomCellComponent} {...cellComponentProps} />\n          ) : undefined,\n          CustomField: CustomFieldComponent ? (\n            <WithServerSideProps Component={CustomFieldComponent} {...fieldComponentProps} />\n          ) : undefined,\n          cellComponentProps,\n          custom: field?.admin?.custom,\n          disableBulkEdit:\n            'admin' in field && 'disableBulkEdit' in field.admin && field.admin.disableBulkEdit,\n          disableListColumn:\n            'admin' in field && 'disableListColumn' in field.admin && field.admin.disableListColumn,\n          disableListFilter:\n            'admin' in field && 'disableListFilter' in field.admin && field.admin.disableListFilter,\n          fieldComponentProps,\n          fieldIsPresentational,\n          isFieldAffectingData,\n          isHidden,\n          isSidebar:\n            'admin' in field && 'position' in field.admin && field.admin.position === 'sidebar',\n          localized: 'localized' in field ? field.localized : false,\n          unique: 'unique' in field ? field.unique : false,\n        }\n\n        acc.push(reducedField)\n      }\n    }\n\n    return acc\n  }, [])\n\n  const hasID =\n    result.findIndex((f) => 'name' in f && f.isFieldAffectingData && f.name === 'id') > -1\n\n  if (!disableAddingID && !hasID) {\n    // TODO: For all fields (not just this one) we need to add the name to both .fieldComponentProps.name AND .name. This can probably be improved\n    result.push({\n      name: 'id',\n      type: 'text',\n      CustomField: null,\n      cellComponentProps: {\n        name: 'id',\n        schemaPath: 'id',\n      },\n      disableBulkEdit: true,\n      fieldComponentProps: {\n        name: 'id',\n        label: 'ID',\n      },\n      fieldIsPresentational: false,\n      isFieldAffectingData: true,\n      isHidden: true,\n      localized: undefined,\n    })\n  }\n\n  return result\n}\n"],"names":["MissingEditorProp","fieldAffectsData","fieldIsPresentationalOnly","React","Fragment","FieldDescription","HiddenField","generateFieldPath","parentPath","name","tabPath","mapFields","args","WithServerSideProps","config","disableAddingID","fieldSchema","filter","i18n","t","readOnly","readOnlyOverride","result","reduce","acc","field","fieldIsPresentational","CustomFieldComponent","admin","components","Field","CustomCellComponent","Cell","isHidden","hidden","disabled","isFieldAffectingData","path","AfterInput","Array","isArray","afterInput","map","Component","i","BeforeInput","beforeInput","label","undefined","labelProps","required","schemaPath","CustomLabelComponent","Label","CustomLabel","description","descriptionProps","CustomDescriptionComponent","Description","CustomDescription","errorProps","CustomErrorComponent","Error","CustomError","baseFieldProps","custom","fieldComponentProps","fieldOptions","options","option","value","cellComponentProps","fieldType","type","labels","relationTo","CustomRowLabel","RowLabel","CustomRowLabelComponent","arrayFieldProps","className","fieldMap","fields","isSortable","maxRows","minRows","style","width","blocks","block","blockFieldMap","slug","reducedBlock","imageAltText","imageURL","blocksField","b","checkboxField","codeField","editorOptions","language","CustomCollapsibleLabel","CustomCollapsibleLabelComponent","collapsibleField","initCollapsed","dateField","date","placeholder","dateDisplayFormat","displayFormat","emailField","groupField","hideGutter","jsonField","jsonSchema","numberField","hasMany","max","min","step","pointField","relationshipField","allowCreate","sortOptions","radioField","layout","richTextField","editor","RichTextFieldComponent","FieldComponent","RichTextCellComponent","CellComponent","generateComponentMap","richTextComponentMap","rowField","tabs","tab","tabFieldMap","reducedTab","tabsField","textField","maxLength","minLength","textareaField","rows","uploadField","filterOptions","selectField","isClearable","reducedField","CustomCell","CustomField","disableBulkEdit","disableListColumn","disableListFilter","isSidebar","position","localized","unique","push","hasID","findIndex","f"],"mappings":"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"}