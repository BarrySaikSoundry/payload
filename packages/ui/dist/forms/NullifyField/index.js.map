{"version":3,"sources":["../../../src/forms/NullifyField/index.tsx"],"sourcesContent":["'use client'\n\nimport * as React from 'react'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { CheckboxField } from '../../fields/Checkbox/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useForm } from '../Form/context.js'\n\ntype NullifyLocaleFieldProps = {\n  fieldValue?: [] | null | number\n  localized: boolean\n  path: string\n}\n\nexport const NullifyLocaleField: React.FC<NullifyLocaleFieldProps> = ({\n  fieldValue,\n  localized,\n  path,\n}) => {\n  const { dispatchFields, setModified } = useForm()\n  const { code: currentLocale } = useLocale()\n  const { localization } = useConfig()\n  const [checked, setChecked] = React.useState<boolean>(typeof fieldValue !== 'number')\n  const defaultLocale =\n    localization && localization.defaultLocale ? localization.defaultLocale : 'en'\n  const { t } = useTranslation()\n\n  const onChange = () => {\n    const useFallback = !checked\n\n    dispatchFields({\n      type: 'UPDATE',\n      path,\n      value: useFallback ? null : fieldValue || 0,\n    })\n    setModified(true)\n    setChecked(useFallback)\n  }\n\n  if (!localized || currentLocale === defaultLocale || (localization && !localization.fallback)) {\n    // hide when field is not localized or editing default locale or when fallback is disabled\n    return null\n  }\n\n  if (fieldValue) {\n    let hideCheckbox = false\n    if (typeof fieldValue === 'number' && fieldValue > 0) hideCheckbox = true\n    if (Array.isArray(fieldValue) && fieldValue.length > 0) hideCheckbox = true\n\n    if (hideCheckbox) {\n      if (checked) setChecked(false) // uncheck when field has value\n      return null\n    }\n  }\n\n  return (\n    <Banner>\n      <CheckboxField\n        checked={checked}\n        id={`field-${path.replace(/\\./g, '__')}`}\n        label={t('general:fallbackToDefaultLocale')}\n        // onToggle={onChange}\n      />\n    </Banner>\n  )\n}\n"],"names":["React","Banner","CheckboxField","useConfig","useLocale","useTranslation","useForm","NullifyLocaleField","fieldValue","localized","path","dispatchFields","setModified","code","currentLocale","localization","checked","setChecked","useState","defaultLocale","t","onChange","useFallback","type","value","fallback","hideCheckbox","Array","isArray","length","id","replace","label"],"mappings":"AAAA;;AAEA,YAAYA,WAAW,QAAO;AAE9B,SAASC,MAAM,QAAQ,iCAAgC;AACvD,SAASC,aAAa,QAAQ,iCAAgC;AAC9D,SAASC,SAAS,QAAQ,kCAAiC;AAC3D,SAASC,SAAS,QAAQ,kCAAiC;AAC3D,SAASC,cAAc,QAAQ,uCAAsC;AACrE,SAASC,OAAO,QAAQ,qBAAoB;AAQ5C,OAAO,MAAMC,qBAAwD,CAAC,EACpEC,UAAU,EACVC,SAAS,EACTC,IAAI,EACL;IACC,MAAM,EAAEC,cAAc,EAAEC,WAAW,EAAE,GAAGN;IACxC,MAAM,EAAEO,MAAMC,aAAa,EAAE,GAAGV;IAChC,MAAM,EAAEW,YAAY,EAAE,GAAGZ;IACzB,MAAM,CAACa,SAASC,WAAW,GAAGjB,MAAMkB,QAAQ,CAAU,OAAOV,eAAe;IAC5E,MAAMW,gBACJJ,gBAAgBA,aAAaI,aAAa,GAAGJ,aAAaI,aAAa,GAAG;IAC5E,MAAM,EAAEC,CAAC,EAAE,GAAGf;IAEd,MAAMgB,WAAW;QACf,MAAMC,cAAc,CAACN;QAErBL,eAAe;YACbY,MAAM;YACNb;YACAc,OAAOF,cAAc,OAAOd,cAAc;QAC5C;QACAI,YAAY;QACZK,WAAWK;IACb;IAEA,IAAI,CAACb,aAAaK,kBAAkBK,iBAAkBJ,gBAAgB,CAACA,aAAaU,QAAQ,EAAG;QAC7F,0FAA0F;QAC1F,OAAO;IACT;IAEA,IAAIjB,YAAY;QACd,IAAIkB,eAAe;QACnB,IAAI,OAAOlB,eAAe,YAAYA,aAAa,GAAGkB,eAAe;QACrE,IAAIC,MAAMC,OAAO,CAACpB,eAAeA,WAAWqB,MAAM,GAAG,GAAGH,eAAe;QAEvE,IAAIA,cAAc;YAChB,IAAIV,SAASC,WAAW,OAAO,+BAA+B;;YAC9D,OAAO;QACT;IACF;IAEA,qBACE,KAAChB;kBACC,cAAA,KAACC;YACCc,SAASA;YACTc,IAAI,CAAC,MAAM,EAAEpB,KAAKqB,OAAO,CAAC,OAAO,MAAM,CAAC;YACxCC,OAAOZ,EAAE;;;AAKjB,EAAC"}