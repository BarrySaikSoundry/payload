{"version":3,"sources":["../../../src/forms/withCondition/WatchCondition.tsx"],"sourcesContent":["'use client'\nimport type { FieldTypes } from 'payload'\n\nimport React, { Fragment } from 'react'\n\nimport { useFormFields } from '../Form/context.js'\n\nexport const WatchCondition: React.FC<{\n  children: React.ReactNode\n  indexPath: string\n  name?: string\n  path?: string\n  type: keyof FieldTypes\n}> = (props) => {\n  const { name, type, children, indexPath, path: pathFromProps } = props\n\n  const path = typeof pathFromProps === 'string' ? pathFromProps : name\n\n  let formStateID = path\n\n  if (['collapsible', 'row'].includes(type)) {\n    const index = indexPath.split('.').pop()\n    formStateID = `${path ? `${path}.` : ''}_index-${index}`\n  }\n\n  const field = useFormFields(([fields]) => (fields && fields?.[formStateID]) || null)\n\n  const { passesCondition } = field || {}\n\n  if (passesCondition === false) {\n    return null\n  }\n\n  return <Fragment>{children}</Fragment>\n}\n"],"names":["React","Fragment","useFormFields","WatchCondition","props","name","type","children","indexPath","path","pathFromProps","formStateID","includes","index","split","pop","field","fields","passesCondition"],"mappings":"AAAA;;AAGA,OAAOA,SAASC,QAAQ,QAAQ,QAAO;AAEvC,SAASC,aAAa,QAAQ,qBAAoB;AAElD,OAAO,MAAMC,iBAMR,CAACC;IACJ,MAAM,EAAEC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,MAAMC,aAAa,EAAE,GAAGN;IAEjE,MAAMK,OAAO,OAAOC,kBAAkB,WAAWA,gBAAgBL;IAEjE,IAAIM,cAAcF;IAElB,IAAI;QAAC;QAAe;KAAM,CAACG,QAAQ,CAACN,OAAO;QACzC,MAAMO,QAAQL,UAAUM,KAAK,CAAC,KAAKC,GAAG;QACtCJ,cAAc,CAAC,EAAEF,OAAO,CAAC,EAAEA,KAAK,CAAC,CAAC,GAAG,GAAG,OAAO,EAAEI,MAAM,CAAC;IAC1D;IAEA,MAAMG,QAAQd,cAAc,CAAC,CAACe,OAAO,GAAK,AAACA,UAAUA,QAAQ,CAACN,YAAY,IAAK;IAE/E,MAAM,EAAEO,eAAe,EAAE,GAAGF,SAAS,CAAC;IAEtC,IAAIE,oBAAoB,OAAO;QAC7B,OAAO;IACT;IAEA,qBAAO,KAACjB;kBAAUM;;AACpB,EAAC"}