{"version":3,"sources":["../../../src/forms/buildStateFromSchema/getFilterOptionsQuery.ts"],"sourcesContent":["import type { FilterOptions, FilterOptionsProps, Where } from 'payload'\n\nexport const getFilterOptionsQuery = async (\n  filterOptions: FilterOptions,\n  options: { relationTo: string | string[] } & Omit<FilterOptionsProps, 'relationTo'>,\n): Promise<{ [collection: string]: Where }> => {\n  const { relationTo } = options\n\n  const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n\n  const query = {}\n\n  if (typeof filterOptions !== 'undefined') {\n    await Promise.all(\n      relations.map(async (relation) => {\n        query[relation] =\n          typeof filterOptions === 'function'\n            ? await filterOptions({ ...options, relationTo: relation })\n            : filterOptions\n\n        if (query[relation] === true) {\n          query[relation] = {}\n        }\n\n        // this is an ugly way to prevent results from being returned\n        if (query[relation] === false) {\n          query[relation] = { id: { exists: false } }\n        }\n      }),\n    )\n  }\n\n  return query\n}\n"],"names":["getFilterOptionsQuery","filterOptions","options","relationTo","relations","Array","isArray","query","Promise","all","map","relation","id","exists"],"mappings":"AAEA,OAAO,MAAMA,wBAAwB,OACnCC,eACAC;IAEA,MAAM,EAAEC,UAAU,EAAE,GAAGD;IAEvB,MAAME,YAAYC,MAAMC,OAAO,CAACH,cAAcA,aAAa;QAACA;KAAW;IAEvE,MAAMI,QAAQ,CAAC;IAEf,IAAI,OAAON,kBAAkB,aAAa;QACxC,MAAMO,QAAQC,GAAG,CACfL,UAAUM,GAAG,CAAC,OAAOC;YACnBJ,KAAK,CAACI,SAAS,GACb,OAAOV,kBAAkB,aACrB,MAAMA,cAAc;gBAAE,GAAGC,OAAO;gBAAEC,YAAYQ;YAAS,KACvDV;YAEN,IAAIM,KAAK,CAACI,SAAS,KAAK,MAAM;gBAC5BJ,KAAK,CAACI,SAAS,GAAG,CAAC;YACrB;YAEA,6DAA6D;YAC7D,IAAIJ,KAAK,CAACI,SAAS,KAAK,OAAO;gBAC7BJ,KAAK,CAACI,SAAS,GAAG;oBAAEC,IAAI;wBAAEC,QAAQ;oBAAM;gBAAE;YAC5C;QACF;IAEJ;IAEA,OAAON;AACT,EAAC"}