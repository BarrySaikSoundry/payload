{"version":3,"sources":["../../../../src/forms/buildStateFromSchema/calculateDefaultValues/promise.ts"],"sourcesContent":["import type { Data, Field, TabAsField, User } from 'payload'\n\nimport { getDefaultValue } from 'payload'\nimport { fieldAffectsData, tabHasName } from 'payload/shared'\n\nimport { iterateFields } from './iterateFields.js'\n\ntype Args<T> = {\n  data: T\n  field: Field | TabAsField\n  id?: number | string\n  locale: string | undefined\n  siblingData: Data\n  user: User\n}\n\n// TODO: Make this works for rich text subfields\nexport const defaultValuePromise = async <T>({\n  id,\n  data,\n  field,\n  locale,\n  siblingData,\n  user,\n}: Args<T>): Promise<void> => {\n  if (fieldAffectsData(field)) {\n    if (\n      typeof siblingData[field.name] === 'undefined' &&\n      typeof field.defaultValue !== 'undefined'\n    ) {\n      siblingData[field.name] = await getDefaultValue({\n        defaultValue: field.defaultValue,\n        locale,\n        user,\n        value: siblingData[field.name],\n      })\n    }\n  }\n\n  // Traverse subfields\n  switch (field.type) {\n    case 'group': {\n      if (typeof siblingData[field.name] !== 'object') siblingData[field.name] = {}\n\n      const groupData = siblingData[field.name] as Record<string, unknown>\n\n      await iterateFields({\n        id,\n        data,\n        fields: field.fields,\n        locale,\n        siblingData: groupData,\n        user,\n      })\n\n      break\n    }\n\n    case 'array': {\n      const rows = siblingData[field.name]\n\n      if (Array.isArray(rows)) {\n        const promises = []\n        rows.forEach((row) => {\n          promises.push(\n            iterateFields({\n              id,\n              data,\n              fields: field.fields,\n              locale,\n              siblingData: row,\n              user,\n            }),\n          )\n        })\n        await Promise.all(promises)\n      }\n      break\n    }\n\n    case 'blocks': {\n      const rows = siblingData[field.name]\n\n      if (Array.isArray(rows)) {\n        const promises = []\n        rows.forEach((row) => {\n          const blockTypeToMatch = row.blockType\n          const block = field.blocks.find((blockType) => blockType.slug === blockTypeToMatch)\n\n          if (block) {\n            row.blockType = blockTypeToMatch\n\n            promises.push(\n              iterateFields({\n                id,\n                data,\n                fields: block.fields,\n                locale,\n                siblingData: row,\n                user,\n              }),\n            )\n          }\n        })\n        await Promise.all(promises)\n      }\n\n      break\n    }\n\n    case 'row':\n    case 'collapsible': {\n      await iterateFields({\n        id,\n        data,\n        fields: field.fields,\n        locale,\n        siblingData,\n        user,\n      })\n\n      break\n    }\n\n    case 'tab': {\n      let tabSiblingData\n      if (tabHasName(field)) {\n        if (typeof siblingData[field.name] !== 'object') siblingData[field.name] = {}\n\n        tabSiblingData = siblingData[field.name] as Record<string, unknown>\n      } else {\n        tabSiblingData = siblingData\n      }\n\n      await iterateFields({\n        id,\n        data,\n        fields: field.fields,\n        locale,\n        siblingData: tabSiblingData,\n        user,\n      })\n\n      break\n    }\n\n    case 'tabs': {\n      await iterateFields({\n        id,\n        data,\n        fields: field.tabs.map((tab) => ({ ...tab, type: 'tab' })),\n        locale,\n        siblingData,\n        user,\n      })\n\n      break\n    }\n\n    default: {\n      break\n    }\n  }\n}\n"],"names":["getDefaultValue","fieldAffectsData","tabHasName","iterateFields","defaultValuePromise","id","data","field","locale","siblingData","user","name","defaultValue","value","type","groupData","fields","rows","Array","isArray","promises","forEach","row","push","Promise","all","blockTypeToMatch","blockType","block","blocks","find","slug","tabSiblingData","tabs","map","tab"],"mappings":"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"}