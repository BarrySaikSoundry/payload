{"version":3,"sources":["../../../src/forms/Form/fieldReducer.ts"],"sourcesContent":["import type { FormField, FormState, Row } from 'payload'\n\nimport ObjectIdImport from 'bson-objectid'\nimport { dequal } from 'dequal/lite' // lite: no need for Map and Set support\nimport { deepCopyObject } from 'payload/shared'\n\nimport type { FieldAction } from './types.js'\n\nimport { flattenRows, separateRows } from './rows.js'\n\nconst ObjectId = (ObjectIdImport.default ||\n  ObjectIdImport) as unknown as typeof ObjectIdImport.default\n\n/**\n * Reducer which modifies the form field state (all the current data of the fields in the form). When called using dispatch, it will return a new state object.\n */\nexport function fieldReducer(state: FormState, action: FieldAction): FormState {\n  switch (action.type) {\n    case 'REPLACE_STATE': {\n      if (action.optimize !== false) {\n        // Only update fields that have changed\n        // by comparing old value / initialValue to new\n        // ..\n        // This is a performance enhancement for saving\n        // large documents with hundreds of fields\n        const newState = {}\n\n        Object.entries(action.state).forEach(([path, field]) => {\n          const oldField = state[path]\n          const newField = field\n\n          if (!dequal(oldField, newField)) {\n            newState[path] = newField\n          } else if (oldField) {\n            newState[path] = oldField\n          }\n        })\n        return newState\n      }\n      // If we're not optimizing, just set the state to the new state\n      return action.state\n    }\n\n    case 'REMOVE': {\n      const newState = { ...state }\n      if (newState[action.path]) delete newState[action.path]\n      return newState\n    }\n\n    case 'ADD_SERVER_ERRORS': {\n      let newState = { ...state }\n\n      const errorPaths: { fieldErrorPath: string; parentPath: string }[] = []\n\n      action.errors.forEach(({ field, message }) => {\n        newState[field] = {\n          ...(newState[field] || {\n            initialValue: null,\n            value: null,\n          }),\n          errorMessage: message,\n          valid: false,\n        }\n\n        const segments = field.split('.')\n        if (segments.length > 1) {\n          errorPaths.push({\n            fieldErrorPath: field,\n            parentPath: segments.slice(0, segments.length - 1).join('.'),\n          })\n        }\n      })\n\n      newState = Object.entries(newState).reduce((acc, [path, fieldState]) => {\n        const fieldErrorPaths = errorPaths.reduce((errorACC, { fieldErrorPath, parentPath }) => {\n          if (parentPath.startsWith(path)) {\n            errorACC.push(fieldErrorPath)\n          }\n          return errorACC\n        }, [])\n\n        let changed = false\n\n        if (fieldErrorPaths.length > 0) {\n          const newErrorPaths = Array.isArray(fieldState.errorPaths) ? fieldState.errorPaths : []\n\n          fieldErrorPaths.forEach((fieldErrorPath) => {\n            if (!newErrorPaths.includes(fieldErrorPath)) {\n              newErrorPaths.push(fieldErrorPath)\n              changed = true\n            }\n          })\n\n          if (changed) {\n            acc[path] = {\n              ...fieldState,\n              errorPaths: newErrorPaths,\n            }\n          }\n        }\n\n        if (!changed) {\n          acc[path] = fieldState\n        }\n\n        return acc\n      }, {})\n\n      return newState\n    }\n\n    case 'UPDATE': {\n      const newField = Object.entries(action).reduce(\n        (field, [key, value]) => {\n          if (\n            [\n              'disableFormData',\n              'errorMessage',\n              'initialValue',\n              'rows',\n              'valid',\n              'validate',\n              'value',\n            ].includes(key)\n          ) {\n            return {\n              ...field,\n              [key]: value,\n            }\n          }\n\n          return field\n        },\n        state[action.path] || ({} as FormField),\n      )\n\n      const newState = {\n        ...state,\n        [action.path]: newField,\n      }\n\n      return newState\n    }\n\n    case 'REMOVE_ROW': {\n      const { path, rowIndex } = action\n      const { remainingFields, rows } = separateRows(path, state)\n      const rowsMetadata = [...(state[path]?.rows || [])]\n\n      rows.splice(rowIndex, 1)\n      rowsMetadata.splice(rowIndex, 1)\n\n      const newState: FormState = {\n        ...remainingFields,\n        [path]: {\n          ...state[path],\n          disableFormData: rows.length > 0,\n          rows: rowsMetadata,\n          value: rows.length,\n        },\n        ...flattenRows(path, rows),\n      }\n\n      return newState\n    }\n\n    case 'ADD_ROW': {\n      const { blockType, path, rowIndex: rowIndexFromArgs, subFieldState = {} } = action\n\n      const rowIndex =\n        typeof rowIndexFromArgs === 'number' ? rowIndexFromArgs : state[path]?.rows?.length || 0\n\n      const withNewRow = [...(state[path]?.rows || [])]\n\n      const newRow: Row = {\n        id: (subFieldState?.id?.value as string) || new ObjectId().toHexString(),\n        blockType: blockType || undefined,\n        collapsed: false,\n      }\n\n      withNewRow.splice(rowIndex, 0, newRow)\n\n      if (blockType) {\n        subFieldState.blockType = {\n          initialValue: blockType,\n          valid: true,\n          value: blockType,\n        }\n      }\n\n      // add new row to array _field state_\n      const { remainingFields, rows: siblingRows } = separateRows(path, state)\n      siblingRows.splice(rowIndex, 0, subFieldState)\n\n      const newState: FormState = {\n        ...remainingFields,\n        ...flattenRows(path, siblingRows),\n        [path]: {\n          ...state[path],\n          disableFormData: true,\n          rows: withNewRow,\n          value: siblingRows.length,\n        },\n      }\n\n      return newState\n    }\n\n    case 'REPLACE_ROW': {\n      const { blockType, path, rowIndex: rowIndexArg, subFieldState = {} } = action\n\n      const { remainingFields, rows: siblingRows } = separateRows(path, state)\n      const rowIndex = Math.max(0, Math.min(rowIndexArg, siblingRows?.length - 1 || 0))\n\n      const rowsMetadata = [...(state[path]?.rows || [])]\n      rowsMetadata[rowIndex] = {\n        id: new ObjectId().toHexString(),\n        blockType: blockType || undefined,\n        collapsed: false,\n      }\n\n      if (blockType) {\n        subFieldState.blockType = {\n          initialValue: blockType,\n          valid: true,\n          value: blockType,\n        }\n      }\n\n      // replace form _field state_\n      siblingRows[rowIndex] = subFieldState\n\n      const newState: FormState = {\n        ...remainingFields,\n        ...flattenRows(path, siblingRows),\n        [path]: {\n          ...state[path],\n          disableFormData: true,\n          rows: rowsMetadata,\n          value: siblingRows.length,\n        },\n      }\n\n      return newState\n    }\n\n    case 'DUPLICATE_ROW': {\n      const { path, rowIndex } = action\n      const { remainingFields, rows } = separateRows(path, state)\n      const rowsMetadata = [...(state[path].rows || [])]\n\n      const duplicateRowMetadata = deepCopyObject(rowsMetadata[rowIndex])\n      if (duplicateRowMetadata.id) duplicateRowMetadata.id = new ObjectId().toHexString()\n\n      const duplicateRowState = deepCopyObject(rows[rowIndex])\n      if (duplicateRowState.id) duplicateRowState.id = new ObjectId().toHexString()\n\n      // If there are subfields\n      if (Object.keys(duplicateRowState).length > 0) {\n        // Add new object containing subfield names to unflattenedRows array\n        rows.splice(rowIndex + 1, 0, duplicateRowState)\n        rowsMetadata.splice(rowIndex + 1, 0, duplicateRowMetadata)\n      }\n\n      const newState = {\n        ...remainingFields,\n        ...flattenRows(path, rows),\n        [path]: {\n          ...state[path],\n          disableFormData: true,\n          rows: rowsMetadata,\n          value: rows.length,\n        },\n      }\n\n      return newState\n    }\n\n    case 'MOVE_ROW': {\n      const { moveFromIndex, moveToIndex, path } = action\n      const { remainingFields, rows } = separateRows(path, state)\n\n      // copy the row to move\n      const copyOfMovingRow = rows[moveFromIndex]\n      // delete the row by index\n      rows.splice(moveFromIndex, 1)\n      // insert row copyOfMovingRow back in\n      rows.splice(moveToIndex, 0, copyOfMovingRow)\n\n      // modify array/block internal row state (i.e. collapsed, blockType)\n      const rowStateCopy = [...(state[path]?.rows || [])]\n      const movingRowState = { ...rowStateCopy[moveFromIndex] }\n      rowStateCopy.splice(moveFromIndex, 1)\n      rowStateCopy.splice(moveToIndex, 0, movingRowState)\n\n      const newState = {\n        ...remainingFields,\n        ...flattenRows(path, rows),\n        [path]: {\n          ...state[path],\n          rows: rowStateCopy,\n        },\n      }\n\n      return newState\n    }\n\n    case 'SET_ROW_COLLAPSED': {\n      const { collapsed, path, rowID, setDocFieldPreferences } = action\n\n      const arrayState = state[path]\n\n      const { collapsedRowIDs, matchedIndex } = state[path].rows.reduce(\n        (acc, row, index) => {\n          const isMatchingRow = row.id === rowID\n          if (isMatchingRow) acc.matchedIndex = index\n\n          if (!isMatchingRow && row.collapsed) acc.collapsedRowIDs.push(row.id)\n          else if (isMatchingRow && collapsed) acc.collapsedRowIDs.push(row.id)\n\n          return acc\n        },\n        {\n          collapsedRowIDs: [],\n          matchedIndex: undefined,\n        },\n      )\n\n      if (matchedIndex > -1) {\n        arrayState.rows[matchedIndex].collapsed = collapsed\n        setDocFieldPreferences(path, { collapsed: collapsedRowIDs })\n      }\n\n      const newState = {\n        ...state,\n        [path]: {\n          ...arrayState,\n        },\n      }\n\n      return newState\n    }\n\n    case 'SET_ALL_ROWS_COLLAPSED': {\n      const { collapsed, path, setDocFieldPreferences } = action\n\n      const { collapsedRowIDs, rows } = state[path].rows.reduce(\n        (acc, row) => {\n          if (collapsed) acc.collapsedRowIDs.push(row.id)\n\n          acc.rows.push({\n            ...row,\n            collapsed,\n          })\n\n          return acc\n        },\n        {\n          collapsedRowIDs: [],\n          rows: [],\n        },\n      )\n\n      setDocFieldPreferences(path, { collapsed: collapsedRowIDs })\n\n      return {\n        ...state,\n        [path]: {\n          ...state[path],\n          rows,\n        },\n      }\n    }\n\n    default: {\n      return state\n    }\n  }\n}\n"],"names":["ObjectIdImport","dequal","deepCopyObject","flattenRows","separateRows","ObjectId","default","fieldReducer","state","action","type","optimize","newState","Object","entries","forEach","path","field","oldField","newField","errorPaths","errors","message","initialValue","value","errorMessage","valid","segments","split","length","push","fieldErrorPath","parentPath","slice","join","reduce","acc","fieldState","fieldErrorPaths","errorACC","startsWith","changed","newErrorPaths","Array","isArray","includes","key","rowIndex","remainingFields","rows","rowsMetadata","splice","disableFormData","blockType","rowIndexFromArgs","subFieldState","withNewRow","newRow","id","toHexString","undefined","collapsed","siblingRows","rowIndexArg","Math","max","min","duplicateRowMetadata","duplicateRowState","keys","moveFromIndex","moveToIndex","copyOfMovingRow","rowStateCopy","movingRowState","rowID","setDocFieldPreferences","arrayState","collapsedRowIDs","matchedIndex","row","index","isMatchingRow"],"mappings":"AAEA,OAAOA,oBAAoB,gBAAe;AAC1C,SAASC,MAAM,QAAQ,cAAa,CAAC,wCAAwC;AAC7E,SAASC,cAAc,QAAQ,iBAAgB;AAI/C,SAASC,WAAW,EAAEC,YAAY,QAAQ,YAAW;AAErD,MAAMC,WAAYL,eAAeM,OAAO,IACtCN;AAEF;;CAEC,GACD,OAAO,SAASO,aAAaC,KAAgB,EAAEC,MAAmB;IAChE,OAAQA,OAAOC,IAAI;QACjB,KAAK;YAAiB;gBACpB,IAAID,OAAOE,QAAQ,KAAK,OAAO;oBAC7B,uCAAuC;oBACvC,+CAA+C;oBAC/C,KAAK;oBACL,+CAA+C;oBAC/C,0CAA0C;oBAC1C,MAAMC,WAAW,CAAC;oBAElBC,OAAOC,OAAO,CAACL,OAAOD,KAAK,EAAEO,OAAO,CAAC,CAAC,CAACC,MAAMC,MAAM;wBACjD,MAAMC,WAAWV,KAAK,CAACQ,KAAK;wBAC5B,MAAMG,WAAWF;wBAEjB,IAAI,CAAChB,OAAOiB,UAAUC,WAAW;4BAC/BP,QAAQ,CAACI,KAAK,GAAGG;wBACnB,OAAO,IAAID,UAAU;4BACnBN,QAAQ,CAACI,KAAK,GAAGE;wBACnB;oBACF;oBACA,OAAON;gBACT;gBACA,+DAA+D;gBAC/D,OAAOH,OAAOD,KAAK;YACrB;QAEA,KAAK;YAAU;gBACb,MAAMI,WAAW;oBAAE,GAAGJ,KAAK;gBAAC;gBAC5B,IAAII,QAAQ,CAACH,OAAOO,IAAI,CAAC,EAAE,OAAOJ,QAAQ,CAACH,OAAOO,IAAI,CAAC;gBACvD,OAAOJ;YACT;QAEA,KAAK;YAAqB;gBACxB,IAAIA,WAAW;oBAAE,GAAGJ,KAAK;gBAAC;gBAE1B,MAAMY,aAA+D,EAAE;gBAEvEX,OAAOY,MAAM,CAACN,OAAO,CAAC,CAAC,EAAEE,KAAK,EAAEK,OAAO,EAAE;oBACvCV,QAAQ,CAACK,MAAM,GAAG;wBAChB,GAAIL,QAAQ,CAACK,MAAM,IAAI;4BACrBM,cAAc;4BACdC,OAAO;wBACT,CAAC;wBACDC,cAAcH;wBACdI,OAAO;oBACT;oBAEA,MAAMC,WAAWV,MAAMW,KAAK,CAAC;oBAC7B,IAAID,SAASE,MAAM,GAAG,GAAG;wBACvBT,WAAWU,IAAI,CAAC;4BACdC,gBAAgBd;4BAChBe,YAAYL,SAASM,KAAK,CAAC,GAAGN,SAASE,MAAM,GAAG,GAAGK,IAAI,CAAC;wBAC1D;oBACF;gBACF;gBAEAtB,WAAWC,OAAOC,OAAO,CAACF,UAAUuB,MAAM,CAAC,CAACC,KAAK,CAACpB,MAAMqB,WAAW;oBACjE,MAAMC,kBAAkBlB,WAAWe,MAAM,CAAC,CAACI,UAAU,EAAER,cAAc,EAAEC,UAAU,EAAE;wBACjF,IAAIA,WAAWQ,UAAU,CAACxB,OAAO;4BAC/BuB,SAAST,IAAI,CAACC;wBAChB;wBACA,OAAOQ;oBACT,GAAG,EAAE;oBAEL,IAAIE,UAAU;oBAEd,IAAIH,gBAAgBT,MAAM,GAAG,GAAG;wBAC9B,MAAMa,gBAAgBC,MAAMC,OAAO,CAACP,WAAWjB,UAAU,IAAIiB,WAAWjB,UAAU,GAAG,EAAE;wBAEvFkB,gBAAgBvB,OAAO,CAAC,CAACgB;4BACvB,IAAI,CAACW,cAAcG,QAAQ,CAACd,iBAAiB;gCAC3CW,cAAcZ,IAAI,CAACC;gCACnBU,UAAU;4BACZ;wBACF;wBAEA,IAAIA,SAAS;4BACXL,GAAG,CAACpB,KAAK,GAAG;gCACV,GAAGqB,UAAU;gCACbjB,YAAYsB;4BACd;wBACF;oBACF;oBAEA,IAAI,CAACD,SAAS;wBACZL,GAAG,CAACpB,KAAK,GAAGqB;oBACd;oBAEA,OAAOD;gBACT,GAAG,CAAC;gBAEJ,OAAOxB;YACT;QAEA,KAAK;YAAU;gBACb,MAAMO,WAAWN,OAAOC,OAAO,CAACL,QAAQ0B,MAAM,CAC5C,CAAClB,OAAO,CAAC6B,KAAKtB,MAAM;oBAClB,IACE;wBACE;wBACA;wBACA;wBACA;wBACA;wBACA;wBACA;qBACD,CAACqB,QAAQ,CAACC,MACX;wBACA,OAAO;4BACL,GAAG7B,KAAK;4BACR,CAAC6B,IAAI,EAAEtB;wBACT;oBACF;oBAEA,OAAOP;gBACT,GACAT,KAAK,CAACC,OAAOO,IAAI,CAAC,IAAK,CAAC;gBAG1B,MAAMJ,WAAW;oBACf,GAAGJ,KAAK;oBACR,CAACC,OAAOO,IAAI,CAAC,EAAEG;gBACjB;gBAEA,OAAOP;YACT;QAEA,KAAK;YAAc;gBACjB,MAAM,EAAEI,IAAI,EAAE+B,QAAQ,EAAE,GAAGtC;gBAC3B,MAAM,EAAEuC,eAAe,EAAEC,IAAI,EAAE,GAAG7C,aAAaY,MAAMR;gBACrD,MAAM0C,eAAe;uBAAK1C,KAAK,CAACQ,KAAK,EAAEiC,QAAQ,EAAE;iBAAE;gBAEnDA,KAAKE,MAAM,CAACJ,UAAU;gBACtBG,aAAaC,MAAM,CAACJ,UAAU;gBAE9B,MAAMnC,WAAsB;oBAC1B,GAAGoC,eAAe;oBAClB,CAAChC,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdoC,iBAAiBH,KAAKpB,MAAM,GAAG;wBAC/BoB,MAAMC;wBACN1B,OAAOyB,KAAKpB,MAAM;oBACpB;oBACA,GAAG1B,YAAYa,MAAMiC,KAAK;gBAC5B;gBAEA,OAAOrC;YACT;QAEA,KAAK;YAAW;gBACd,MAAM,EAAEyC,SAAS,EAAErC,IAAI,EAAE+B,UAAUO,gBAAgB,EAAEC,gBAAgB,CAAC,CAAC,EAAE,GAAG9C;gBAE5E,MAAMsC,WACJ,OAAOO,qBAAqB,WAAWA,mBAAmB9C,KAAK,CAACQ,KAAK,EAAEiC,MAAMpB,UAAU;gBAEzF,MAAM2B,aAAa;uBAAKhD,KAAK,CAACQ,KAAK,EAAEiC,QAAQ,EAAE;iBAAE;gBAEjD,MAAMQ,SAAc;oBAClBC,IAAI,AAACH,eAAeG,IAAIlC,SAAoB,IAAInB,WAAWsD,WAAW;oBACtEN,WAAWA,aAAaO;oBACxBC,WAAW;gBACb;gBAEAL,WAAWL,MAAM,CAACJ,UAAU,GAAGU;gBAE/B,IAAIJ,WAAW;oBACbE,cAAcF,SAAS,GAAG;wBACxB9B,cAAc8B;wBACd3B,OAAO;wBACPF,OAAO6B;oBACT;gBACF;gBAEA,qCAAqC;gBACrC,MAAM,EAAEL,eAAe,EAAEC,MAAMa,WAAW,EAAE,GAAG1D,aAAaY,MAAMR;gBAClEsD,YAAYX,MAAM,CAACJ,UAAU,GAAGQ;gBAEhC,MAAM3C,WAAsB;oBAC1B,GAAGoC,eAAe;oBAClB,GAAG7C,YAAYa,MAAM8C,YAAY;oBACjC,CAAC9C,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdoC,iBAAiB;wBACjBH,MAAMO;wBACNhC,OAAOsC,YAAYjC,MAAM;oBAC3B;gBACF;gBAEA,OAAOjB;YACT;QAEA,KAAK;YAAe;gBAClB,MAAM,EAAEyC,SAAS,EAAErC,IAAI,EAAE+B,UAAUgB,WAAW,EAAER,gBAAgB,CAAC,CAAC,EAAE,GAAG9C;gBAEvE,MAAM,EAAEuC,eAAe,EAAEC,MAAMa,WAAW,EAAE,GAAG1D,aAAaY,MAAMR;gBAClE,MAAMuC,WAAWiB,KAAKC,GAAG,CAAC,GAAGD,KAAKE,GAAG,CAACH,aAAaD,aAAajC,SAAS,KAAK;gBAE9E,MAAMqB,eAAe;uBAAK1C,KAAK,CAACQ,KAAK,EAAEiC,QAAQ,EAAE;iBAAE;gBACnDC,YAAY,CAACH,SAAS,GAAG;oBACvBW,IAAI,IAAIrD,WAAWsD,WAAW;oBAC9BN,WAAWA,aAAaO;oBACxBC,WAAW;gBACb;gBAEA,IAAIR,WAAW;oBACbE,cAAcF,SAAS,GAAG;wBACxB9B,cAAc8B;wBACd3B,OAAO;wBACPF,OAAO6B;oBACT;gBACF;gBAEA,6BAA6B;gBAC7BS,WAAW,CAACf,SAAS,GAAGQ;gBAExB,MAAM3C,WAAsB;oBAC1B,GAAGoC,eAAe;oBAClB,GAAG7C,YAAYa,MAAM8C,YAAY;oBACjC,CAAC9C,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdoC,iBAAiB;wBACjBH,MAAMC;wBACN1B,OAAOsC,YAAYjC,MAAM;oBAC3B;gBACF;gBAEA,OAAOjB;YACT;QAEA,KAAK;YAAiB;gBACpB,MAAM,EAAEI,IAAI,EAAE+B,QAAQ,EAAE,GAAGtC;gBAC3B,MAAM,EAAEuC,eAAe,EAAEC,IAAI,EAAE,GAAG7C,aAAaY,MAAMR;gBACrD,MAAM0C,eAAe;uBAAK1C,KAAK,CAACQ,KAAK,CAACiC,IAAI,IAAI,EAAE;iBAAE;gBAElD,MAAMkB,uBAAuBjE,eAAegD,YAAY,CAACH,SAAS;gBAClE,IAAIoB,qBAAqBT,EAAE,EAAES,qBAAqBT,EAAE,GAAG,IAAIrD,WAAWsD,WAAW;gBAEjF,MAAMS,oBAAoBlE,eAAe+C,IAAI,CAACF,SAAS;gBACvD,IAAIqB,kBAAkBV,EAAE,EAAEU,kBAAkBV,EAAE,GAAG,IAAIrD,WAAWsD,WAAW;gBAE3E,yBAAyB;gBACzB,IAAI9C,OAAOwD,IAAI,CAACD,mBAAmBvC,MAAM,GAAG,GAAG;oBAC7C,oEAAoE;oBACpEoB,KAAKE,MAAM,CAACJ,WAAW,GAAG,GAAGqB;oBAC7BlB,aAAaC,MAAM,CAACJ,WAAW,GAAG,GAAGoB;gBACvC;gBAEA,MAAMvD,WAAW;oBACf,GAAGoC,eAAe;oBAClB,GAAG7C,YAAYa,MAAMiC,KAAK;oBAC1B,CAACjC,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdoC,iBAAiB;wBACjBH,MAAMC;wBACN1B,OAAOyB,KAAKpB,MAAM;oBACpB;gBACF;gBAEA,OAAOjB;YACT;QAEA,KAAK;YAAY;gBACf,MAAM,EAAE0D,aAAa,EAAEC,WAAW,EAAEvD,IAAI,EAAE,GAAGP;gBAC7C,MAAM,EAAEuC,eAAe,EAAEC,IAAI,EAAE,GAAG7C,aAAaY,MAAMR;gBAErD,uBAAuB;gBACvB,MAAMgE,kBAAkBvB,IAAI,CAACqB,cAAc;gBAC3C,0BAA0B;gBAC1BrB,KAAKE,MAAM,CAACmB,eAAe;gBAC3B,qCAAqC;gBACrCrB,KAAKE,MAAM,CAACoB,aAAa,GAAGC;gBAE5B,oEAAoE;gBACpE,MAAMC,eAAe;uBAAKjE,KAAK,CAACQ,KAAK,EAAEiC,QAAQ,EAAE;iBAAE;gBACnD,MAAMyB,iBAAiB;oBAAE,GAAGD,YAAY,CAACH,cAAc;gBAAC;gBACxDG,aAAatB,MAAM,CAACmB,eAAe;gBACnCG,aAAatB,MAAM,CAACoB,aAAa,GAAGG;gBAEpC,MAAM9D,WAAW;oBACf,GAAGoC,eAAe;oBAClB,GAAG7C,YAAYa,MAAMiC,KAAK;oBAC1B,CAACjC,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdiC,MAAMwB;oBACR;gBACF;gBAEA,OAAO7D;YACT;QAEA,KAAK;YAAqB;gBACxB,MAAM,EAAEiD,SAAS,EAAE7C,IAAI,EAAE2D,KAAK,EAAEC,sBAAsB,EAAE,GAAGnE;gBAE3D,MAAMoE,aAAarE,KAAK,CAACQ,KAAK;gBAE9B,MAAM,EAAE8D,eAAe,EAAEC,YAAY,EAAE,GAAGvE,KAAK,CAACQ,KAAK,CAACiC,IAAI,CAACd,MAAM,CAC/D,CAACC,KAAK4C,KAAKC;oBACT,MAAMC,gBAAgBF,IAAItB,EAAE,KAAKiB;oBACjC,IAAIO,eAAe9C,IAAI2C,YAAY,GAAGE;oBAEtC,IAAI,CAACC,iBAAiBF,IAAInB,SAAS,EAAEzB,IAAI0C,eAAe,CAAChD,IAAI,CAACkD,IAAItB,EAAE;yBAC/D,IAAIwB,iBAAiBrB,WAAWzB,IAAI0C,eAAe,CAAChD,IAAI,CAACkD,IAAItB,EAAE;oBAEpE,OAAOtB;gBACT,GACA;oBACE0C,iBAAiB,EAAE;oBACnBC,cAAcnB;gBAChB;gBAGF,IAAImB,eAAe,CAAC,GAAG;oBACrBF,WAAW5B,IAAI,CAAC8B,aAAa,CAAClB,SAAS,GAAGA;oBAC1Ce,uBAAuB5D,MAAM;wBAAE6C,WAAWiB;oBAAgB;gBAC5D;gBAEA,MAAMlE,WAAW;oBACf,GAAGJ,KAAK;oBACR,CAACQ,KAAK,EAAE;wBACN,GAAG6D,UAAU;oBACf;gBACF;gBAEA,OAAOjE;YACT;QAEA,KAAK;YAA0B;gBAC7B,MAAM,EAAEiD,SAAS,EAAE7C,IAAI,EAAE4D,sBAAsB,EAAE,GAAGnE;gBAEpD,MAAM,EAAEqE,eAAe,EAAE7B,IAAI,EAAE,GAAGzC,KAAK,CAACQ,KAAK,CAACiC,IAAI,CAACd,MAAM,CACvD,CAACC,KAAK4C;oBACJ,IAAInB,WAAWzB,IAAI0C,eAAe,CAAChD,IAAI,CAACkD,IAAItB,EAAE;oBAE9CtB,IAAIa,IAAI,CAACnB,IAAI,CAAC;wBACZ,GAAGkD,GAAG;wBACNnB;oBACF;oBAEA,OAAOzB;gBACT,GACA;oBACE0C,iBAAiB,EAAE;oBACnB7B,MAAM,EAAE;gBACV;gBAGF2B,uBAAuB5D,MAAM;oBAAE6C,WAAWiB;gBAAgB;gBAE1D,OAAO;oBACL,GAAGtE,KAAK;oBACR,CAACQ,KAAK,EAAE;wBACN,GAAGR,KAAK,CAACQ,KAAK;wBACdiC;oBACF;gBACF;YACF;QAEA;YAAS;gBACP,OAAOzC;YACT;IACF;AACF"}