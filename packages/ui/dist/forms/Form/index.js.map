{"version":3,"sources":["../../../src/forms/Form/index.tsx"],"sourcesContent":["'use client'\nimport type { FormState } from 'payload'\n\nimport { dequal } from 'dequal/lite' // lite: no need for Map and Set support\nimport { useRouter } from 'next/navigation.js'\nimport { serialize } from 'object-to-formdata'\nimport {\n  getDataByPath as getDataByPathFunc,\n  getSiblingData as getSiblingDataFunc,\n  reduceFieldsToValues,\n  wait,\n} from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useReducer, useRef, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport type {\n  Context as FormContextType,\n  FormProps,\n  GetDataByPath,\n  SubmitOptions,\n} from './types.js'\n\nimport { useDebouncedEffect } from '../../hooks/useDebouncedEffect.js'\nimport { useThrottledEffect } from '../../hooks/useThrottledEffect.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useFormQueryParams } from '../../providers/FormQueryParams/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useOperation } from '../../providers/Operation/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { getFormState } from '../../utilities/getFormState.js'\nimport {\n  FormContext,\n  FormFieldsContext,\n  FormWatchContext,\n  InitializingContext,\n  ModifiedContext,\n  ProcessingContext,\n  SubmittedContext,\n} from './context.js'\nimport { errorMessages } from './errorMessages.js'\nimport { fieldReducer } from './fieldReducer.js'\nimport { initContextState } from './initContextState.js'\nimport { mergeServerFormState } from './mergeServerFormState.js'\n\nconst baseClass = 'form'\n\nexport const Form: React.FC<FormProps> = (props) => {\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n\n  const {\n    action,\n    beforeSubmit,\n    children,\n    className,\n    disableSuccessStatus,\n    disableValidationOnSubmit,\n    disabled: disabledFromProps,\n    // fields: fieldsFromProps = collection?.fields || global?.fields,\n    handleResponse,\n    initialState, // fully formed initial field state\n    isInitializing: initializingFromProps,\n    onChange,\n    onSubmit,\n    onSuccess,\n    redirect,\n    submitted: submittedFromProps,\n    uuid,\n    waitForAutocomplete,\n  } = props\n\n  const method = 'method' in props ? props?.method : undefined\n\n  const router = useRouter()\n\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n  const { refreshCookie, user } = useAuth()\n  const operation = useOperation()\n  const { formQueryParams } = useFormQueryParams()\n\n  const config = useConfig()\n  const {\n    routes: { api: apiRoute },\n    serverURL,\n  } = config\n\n  const [disabled, setDisabled] = useState(disabledFromProps || false)\n  const [isMounted, setIsMounted] = useState(false)\n  const [modified, setModified] = useState(false)\n  const [initializing, setInitializing] = useState(initializingFromProps)\n  const [processing, setProcessing] = useState(false)\n  const [submitted, setSubmitted] = useState(false)\n  const formRef = useRef<HTMLFormElement>(null)\n  const contextRef = useRef({} as FormContextType)\n\n  const fieldsReducer = useReducer(fieldReducer, {}, () => initialState)\n\n  /**\n   * `fields` is the current, up-to-date state/data of all fields in the form. It can be modified by using dispatchFields,\n   * which calls the fieldReducer, which then updates the state.\n   */\n  const [fields, dispatchFields] = fieldsReducer\n\n  contextRef.current.fields = fields\n\n  const validateForm = useCallback(async () => {\n    const validatedFieldState = {}\n    let isValid = true\n\n    const dataFromContext = contextRef.current.getData()\n    const data = dataFromContext\n\n    const validationPromises = Object.entries(contextRef.current.fields).map(\n      async ([path, field]) => {\n        const validatedField = field\n\n        if (field.passesCondition !== false) {\n          let validationResult: boolean | string = validatedField.valid\n\n          if (typeof field.validate === 'function') {\n            let valueToValidate = field.value\n\n            if (field?.rows && Array.isArray(field.rows)) {\n              valueToValidate = contextRef.current.getDataByPath(path)\n            }\n\n            validationResult = await field.validate(valueToValidate, {\n              id,\n              config,\n              data,\n              operation,\n              siblingData: contextRef.current.getSiblingData(path),\n              t,\n              user,\n            })\n\n            if (typeof validationResult === 'string') {\n              validatedField.errorMessage = validationResult\n              validatedField.valid = false\n            } else {\n              validatedField.valid = true\n              validatedField.errorMessage = undefined\n            }\n          }\n\n          if (validatedField.valid === false) {\n            isValid = false\n          }\n        }\n\n        validatedFieldState[path] = validatedField\n      },\n    )\n\n    await Promise.all(validationPromises)\n\n    if (!dequal(contextRef.current.fields, validatedFieldState)) {\n      dispatchFields({ type: 'REPLACE_STATE', state: validatedFieldState })\n    }\n\n    return isValid\n  }, [id, user, operation, t, dispatchFields, config])\n\n  const submit = useCallback(\n    async (options: SubmitOptions = {}, e): Promise<void> => {\n      const {\n        action: actionArg,\n        method: methodToUse = method,\n        overrides = {},\n        skipValidation,\n      } = options\n\n      if (disabled) {\n        if (e) {\n          e.preventDefault()\n        }\n        return\n      }\n\n      // create new toast promise which will resolve manually later\n      let successToast, errorToast\n      const promise = new Promise((resolve, reject) => {\n        successToast = resolve\n        errorToast = reject\n      })\n\n      const hasFormSubmitAction =\n        actionArg || typeof action === 'string' || typeof action === 'function'\n\n      if (redirect || disableSuccessStatus || !hasFormSubmitAction) {\n        // Do not show submitting toast, as the promise toast may never disappear under these conditions.\n        // Instead, make successToast() or errorToast() throw toast.success / toast.error\n        successToast = (data) => toast.success(data)\n        errorToast = (data) => toast.error(data)\n      } else {\n        toast.promise(promise, {\n          error: (data) => {\n            return data as string\n          },\n          loading: t('general:submitting'),\n          success: (data) => {\n            return data as string\n          },\n        })\n      }\n\n      if (e) {\n        e.stopPropagation()\n        e.preventDefault()\n      }\n\n      setProcessing(true)\n      setDisabled(true)\n\n      if (waitForAutocomplete) await wait(100)\n\n      // Execute server side validations\n      if (Array.isArray(beforeSubmit)) {\n        let revalidatedFormState: FormState\n\n        await beforeSubmit.reduce(async (priorOnChange, beforeSubmitFn) => {\n          await priorOnChange\n\n          const result = await beforeSubmitFn({\n            formState: fields,\n          })\n\n          revalidatedFormState = result\n        }, Promise.resolve())\n\n        const isValid = Object.entries(revalidatedFormState).every(([, field]) => field.valid)\n\n        if (!isValid) {\n          setProcessing(false)\n          setSubmitted(true)\n          setDisabled(false)\n          return dispatchFields({ type: 'REPLACE_STATE', state: revalidatedFormState })\n        }\n      }\n\n      const isValid =\n        skipValidation || disableValidationOnSubmit ? true : await contextRef.current.validateForm()\n\n      // If not valid, prevent submission\n      if (!isValid) {\n        errorToast(t('error:correctInvalidFields'))\n        setProcessing(false)\n        setSubmitted(true)\n        setDisabled(false)\n        return\n      }\n\n      // If submit handler comes through via props, run that\n      if (onSubmit) {\n        const data = {\n          ...reduceFieldsToValues(fields, true),\n          ...overrides,\n        }\n\n        onSubmit(fields, data)\n      }\n\n      if (!hasFormSubmitAction) {\n        // No action provided, so we should return. An example where this happens are lexical link drawers. Upon submitting the drawer, we\n        // want to close it without submitting the form. Stuff like validation would be handled by lexical before this, through beforeSubmit\n        setProcessing(false)\n        setSubmitted(true)\n        setDisabled(false)\n        return\n      }\n\n      const formData = contextRef.current.createFormData(overrides)\n\n      try {\n        let res\n        const actionEndpoint =\n          actionArg ||\n          (typeof action === 'string'\n            ? `${action}${qs.stringify(formQueryParams, { addQueryPrefix: true })}`\n            : null)\n\n        if (actionEndpoint) {\n          res = await requests[methodToUse.toLowerCase()](actionEndpoint, {\n            body: formData,\n            headers: {\n              'Accept-Language': i18n.language,\n            },\n          })\n        } else if (typeof action === 'function') {\n          res = await action(formData)\n        }\n\n        setModified(false)\n        setDisabled(false)\n\n        if (typeof handleResponse === 'function') {\n          handleResponse(res, successToast, errorToast)\n          return\n        }\n\n        const contentType = res.headers.get('content-type')\n        const isJSON = contentType && contentType.indexOf('application/json') !== -1\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let json: Record<string, any> = {}\n\n        if (isJSON) json = await res.json()\n        if (res.status < 400) {\n          if (typeof onSuccess === 'function') await onSuccess(json)\n          setSubmitted(false)\n          setProcessing(false)\n\n          if (redirect) {\n            router.push(redirect)\n          } else if (!disableSuccessStatus) {\n            successToast(json.message || t('general:submissionSuccessful'))\n          }\n        } else {\n          setProcessing(false)\n          setSubmitted(true)\n\n          contextRef.current = { ...contextRef.current } // triggers rerender of all components that subscribe to form\n          if (json.message) {\n            errorToast(json.message)\n\n            return\n          }\n\n          if (Array.isArray(json.errors)) {\n            const [fieldErrors, nonFieldErrors] = json.errors.reduce(\n              ([fieldErrs, nonFieldErrs], err) => {\n                const newFieldErrs = []\n                const newNonFieldErrs = []\n\n                if (err?.message) {\n                  newNonFieldErrs.push(err)\n                }\n\n                if (Array.isArray(err?.data?.errors)) {\n                  err.data?.errors.forEach((dataError) => {\n                    if (dataError?.field) {\n                      newFieldErrs.push(dataError)\n                    } else {\n                      newNonFieldErrs.push(dataError)\n                    }\n                  })\n                }\n\n                return [\n                  [...fieldErrs, ...newFieldErrs],\n                  [...nonFieldErrs, ...newNonFieldErrs],\n                ]\n              },\n              [[], []],\n            )\n\n            dispatchFields({\n              type: 'ADD_SERVER_ERRORS',\n              errors: fieldErrors,\n            })\n\n            nonFieldErrors.forEach((err) => {\n              errorToast(err.message || t('error:unknown'))\n            })\n\n            return\n          }\n\n          const message = errorMessages?.[res.status] || res?.statusText || t('error:unknown')\n\n          errorToast(message)\n        }\n      } catch (err) {\n        console.error('Error submitting form', err)\n        setProcessing(false)\n        setSubmitted(true)\n        setDisabled(false)\n\n        errorToast(err.message)\n      }\n    },\n    [\n      beforeSubmit,\n      action,\n      disableSuccessStatus,\n      disableValidationOnSubmit,\n      disabled,\n      dispatchFields,\n      fields,\n      handleResponse,\n      method,\n      onSubmit,\n      onSuccess,\n      redirect,\n      router,\n      t,\n      i18n,\n      waitForAutocomplete,\n      formQueryParams,\n    ],\n  )\n\n  const getFields = useCallback(() => contextRef.current.fields, [])\n\n  const getField = useCallback((path: string) => contextRef.current.fields[path], [])\n\n  const getData = useCallback(() => reduceFieldsToValues(contextRef.current.fields, true), [])\n\n  const getSiblingData = useCallback(\n    (path: string) => getSiblingDataFunc(contextRef.current.fields, path),\n    [],\n  )\n  const getDataByPath = useCallback<GetDataByPath>(\n    (path: string) => getDataByPathFunc(contextRef.current.fields, path),\n    [],\n  )\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const createFormData = useCallback((overrides: any = {}) => {\n    const data = reduceFieldsToValues(contextRef.current.fields, true)\n\n    const file = data?.file\n\n    if (file) {\n      delete data.file\n    }\n\n    const dataWithOverrides = {\n      ...data,\n      ...overrides,\n    }\n\n    const dataToSerialize = {\n      _payload: JSON.stringify(dataWithOverrides),\n      file,\n    }\n\n    // nullAsUndefineds is important to allow uploads and relationship fields to clear themselves\n    const formData = serialize(dataToSerialize, { indices: true, nullsAsUndefineds: false })\n\n    return formData\n  }, [])\n\n  const reset = useCallback(\n    async (data: unknown) => {\n      const newState = await getFormState({\n        apiRoute,\n        body: {\n          id,\n          collectionSlug,\n          data,\n          globalSlug,\n          operation,\n          schemaPath: collectionSlug || globalSlug,\n        },\n        serverURL,\n      })\n\n      contextRef.current = { ...initContextState } as FormContextType\n      setModified(false)\n      dispatchFields({ type: 'REPLACE_STATE', state: newState })\n    },\n    [apiRoute, collectionSlug, dispatchFields, globalSlug, id, operation, serverURL],\n  )\n\n  const replaceState = useCallback(\n    (state: FormState) => {\n      contextRef.current = { ...initContextState } as FormContextType\n      setModified(false)\n      dispatchFields({ type: 'REPLACE_STATE', state })\n    },\n    [dispatchFields],\n  )\n\n  const getFieldStateBySchemaPath = useCallback(\n    async ({ data, schemaPath }) => {\n      const fieldSchema = await getFormState({\n        apiRoute,\n        body: {\n          collectionSlug,\n          data,\n          globalSlug,\n          schemaPath,\n        },\n        serverURL,\n      })\n      return fieldSchema\n    },\n    [apiRoute, collectionSlug, globalSlug, serverURL],\n  )\n\n  const addFieldRow: FormContextType['addFieldRow'] = useCallback(\n    async ({ data, path, rowIndex, schemaPath }) => {\n      const subFieldState = await getFieldStateBySchemaPath({ data, schemaPath })\n\n      dispatchFields({\n        type: 'ADD_ROW',\n        blockType: data?.blockType,\n        path,\n        rowIndex,\n        subFieldState,\n      })\n    },\n    [getFieldStateBySchemaPath, dispatchFields],\n  )\n\n  const removeFieldRow: FormContextType['removeFieldRow'] = useCallback(\n    ({ path, rowIndex }) => {\n      dispatchFields({ type: 'REMOVE_ROW', path, rowIndex })\n    },\n    [dispatchFields],\n  )\n\n  const replaceFieldRow: FormContextType['replaceFieldRow'] = useCallback(\n    async ({ data, path, rowIndex, schemaPath }) => {\n      const subFieldState = await getFieldStateBySchemaPath({ data, schemaPath })\n\n      dispatchFields({\n        type: 'REPLACE_ROW',\n        blockType: data?.blockType,\n        path,\n        rowIndex,\n        subFieldState,\n      })\n    },\n    [getFieldStateBySchemaPath, dispatchFields],\n  )\n\n  useEffect(() => {\n    if (initializingFromProps !== undefined) {\n      setInitializing(initializingFromProps)\n    }\n  }, [initializingFromProps])\n\n  contextRef.current.submit = submit\n  contextRef.current.getFields = getFields\n  contextRef.current.getField = getField\n  contextRef.current.getData = getData\n  contextRef.current.getSiblingData = getSiblingData\n  contextRef.current.getDataByPath = getDataByPath\n  contextRef.current.validateForm = validateForm\n  contextRef.current.createFormData = createFormData\n  contextRef.current.setModified = setModified\n  contextRef.current.setProcessing = setProcessing\n  contextRef.current.setSubmitted = setSubmitted\n  contextRef.current.disabled = disabled\n  contextRef.current.setDisabled = setDisabled\n  contextRef.current.formRef = formRef\n  contextRef.current.reset = reset\n  contextRef.current.replaceState = replaceState\n  contextRef.current.dispatchFields = dispatchFields\n  contextRef.current.addFieldRow = addFieldRow\n  contextRef.current.removeFieldRow = removeFieldRow\n  contextRef.current.replaceFieldRow = replaceFieldRow\n  contextRef.current.uuid = uuid\n  contextRef.current.initializing = initializing\n\n  useEffect(() => {\n    setIsMounted(true)\n  }, [])\n\n  useEffect(() => {\n    if (typeof disabledFromProps === 'boolean') setDisabled(disabledFromProps)\n  }, [disabledFromProps])\n\n  useEffect(() => {\n    if (typeof submittedFromProps === 'boolean') setSubmitted(submittedFromProps)\n  }, [submittedFromProps])\n\n  useEffect(() => {\n    if (initialState) {\n      contextRef.current = { ...initContextState } as FormContextType\n      dispatchFields({ type: 'REPLACE_STATE', optimize: false, state: initialState })\n    }\n  }, [initialState, dispatchFields])\n\n  useThrottledEffect(\n    () => {\n      refreshCookie()\n    },\n    15000,\n    [fields],\n  )\n\n  useEffect(() => {\n    contextRef.current = { ...contextRef.current } // triggers rerender of all components that subscribe to form\n    setModified(false)\n  }, [locale])\n\n  const classes = [className, baseClass].filter(Boolean).join(' ')\n\n  useDebouncedEffect(\n    () => {\n      const executeOnChange = async () => {\n        if (Array.isArray(onChange)) {\n          let revalidatedFormState: FormState = contextRef.current.fields\n\n          for (const onChangeFn of onChange) {\n            revalidatedFormState = await onChangeFn({\n              formState: revalidatedFormState,\n            })\n          }\n\n          const { changed, newState } = mergeServerFormState(\n            contextRef.current.fields || {},\n            revalidatedFormState,\n          )\n\n          if (changed) {\n            dispatchFields({\n              type: 'REPLACE_STATE',\n              optimize: false,\n              state: newState,\n            })\n          }\n        }\n      }\n\n      if (modified) void executeOnChange()\n    },\n    150,\n    // Make sure we trigger this whenever modified changes (not just when `fields` changes), otherwise we will miss merging server form state for the first form update/onChange. Here's why:\n    // `fields` updates before `modified`, because setModified is in a setTimeout. So on the first change, modified is false, so we don't trigger the effect even though we should.\n    [contextRef.current.fields, dispatchFields, onChange, modified],\n  )\n\n  const actionString =\n    typeof action === 'string'\n      ? `${action}${qs.stringify(formQueryParams, { addQueryPrefix: true })}`\n      : ''\n\n  return (\n    <form\n      action={method ? actionString : (action as string)}\n      className={classes}\n      method={method}\n      noValidate\n      onSubmit={(e) => contextRef.current.submit({}, e)}\n      ref={formRef}\n    >\n      <FormContext.Provider value={contextRef.current}>\n        <FormWatchContext.Provider\n          value={{\n            fields,\n            ...contextRef.current,\n          }}\n        >\n          <SubmittedContext.Provider value={submitted}>\n            <InitializingContext.Provider value={!isMounted || (isMounted && initializing)}>\n              <ProcessingContext.Provider value={processing}>\n                <ModifiedContext.Provider value={modified}>\n                  <FormFieldsContext.Provider value={fieldsReducer}>\n                    {children}\n                  </FormFieldsContext.Provider>\n                </ModifiedContext.Provider>\n              </ProcessingContext.Provider>\n            </InitializingContext.Provider>\n          </SubmittedContext.Provider>\n        </FormWatchContext.Provider>\n      </FormContext.Provider>\n    </form>\n  )\n}\n\nexport {\n  FormContext,\n  FormFieldsContext,\n  FormWatchContext,\n  ModifiedContext,\n  ProcessingContext,\n  SubmittedContext,\n  useAllFormFields,\n  useForm,\n  useFormFields,\n  useFormModified,\n  useFormProcessing,\n  useFormSubmitted,\n  useWatchForm,\n} from './context.js'\n\nexport { FormProps }\n"],"names":["dequal","useRouter","serialize","getDataByPath","getDataByPathFunc","getSiblingData","getSiblingDataFunc","reduceFieldsToValues","wait","qs","React","useCallback","useEffect","useReducer","useRef","useState","toast","useDebouncedEffect","useThrottledEffect","useAuth","useConfig","useDocumentInfo","useFormQueryParams","useLocale","useOperation","useTranslation","requests","getFormState","FormContext","FormFieldsContext","FormWatchContext","InitializingContext","ModifiedContext","ProcessingContext","SubmittedContext","errorMessages","fieldReducer","initContextState","mergeServerFormState","baseClass","Form","props","id","collectionSlug","globalSlug","action","beforeSubmit","children","className","disableSuccessStatus","disableValidationOnSubmit","disabled","disabledFromProps","handleResponse","initialState","isInitializing","initializingFromProps","onChange","onSubmit","onSuccess","redirect","submitted","submittedFromProps","uuid","waitForAutocomplete","method","undefined","router","code","locale","i18n","t","refreshCookie","user","operation","formQueryParams","config","routes","api","apiRoute","serverURL","setDisabled","isMounted","setIsMounted","modified","setModified","initializing","setInitializing","processing","setProcessing","setSubmitted","formRef","contextRef","fieldsReducer","fields","dispatchFields","current","validateForm","validatedFieldState","isValid","dataFromContext","getData","data","validationPromises","Object","entries","map","path","field","validatedField","passesCondition","validationResult","valid","validate","valueToValidate","value","rows","Array","isArray","siblingData","errorMessage","Promise","all","type","state","submit","options","e","actionArg","methodToUse","overrides","skipValidation","preventDefault","successToast","errorToast","promise","resolve","reject","hasFormSubmitAction","success","error","loading","stopPropagation","revalidatedFormState","reduce","priorOnChange","beforeSubmitFn","result","formState","every","formData","createFormData","res","actionEndpoint","stringify","addQueryPrefix","toLowerCase","body","headers","language","contentType","get","isJSON","indexOf","json","status","push","message","errors","fieldErrors","nonFieldErrors","fieldErrs","nonFieldErrs","err","newFieldErrs","newNonFieldErrs","forEach","dataError","statusText","console","getFields","getField","file","dataWithOverrides","dataToSerialize","_payload","JSON","indices","nullsAsUndefineds","reset","newState","schemaPath","replaceState","getFieldStateBySchemaPath","fieldSchema","addFieldRow","rowIndex","subFieldState","blockType","removeFieldRow","replaceFieldRow","optimize","classes","filter","Boolean","join","executeOnChange","onChangeFn","changed","actionString","form","noValidate","ref","Provider","useAllFormFields","useForm","useFormFields","useFormModified","useFormProcessing","useFormSubmitted","useWatchForm"],"mappings":"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"}