{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Config, Field } from 'payload'\n\nimport { getBeforeChangeHook } from './hooks/beforeChange.js'\n\nconst traverseFields = ({ config, fields }: { config: Config; fields: Field[] }): Field[] => {\n  return fields.map((field) => {\n    if (field.type === 'relationship' || field.type === 'upload') {\n      return {\n        ...field,\n        hooks: {\n          ...(field.hooks || {}),\n          beforeChange: [\n            ...(field.hooks?.beforeChange || []),\n            getBeforeChangeHook({ config, field }),\n          ],\n        },\n      }\n    }\n\n    if ('fields' in field) {\n      return {\n        ...field,\n        fields: traverseFields({ config, fields: field.fields }),\n      }\n    }\n\n    if (field.type === 'tabs') {\n      return {\n        ...field,\n        tabs: field.tabs.map((tab) => {\n          return {\n            ...tab,\n            fields: traverseFields({ config, fields: tab.fields }),\n          }\n        }),\n      }\n    }\n\n    if (field.type === 'blocks') {\n      return {\n        ...field,\n        blocks: field.blocks.map((block) => {\n          return {\n            ...block,\n            fields: traverseFields({ config, fields: block.fields }),\n          }\n        }),\n      }\n    }\n\n    return field\n  })\n}\n\nexport const relationshipsAsObjectID =\n  (/** Possible args in the future */) =>\n  (config: Config): Config => {\n    return {\n      ...config,\n      collections: (config.collections || []).map((collection) => {\n        return {\n          ...collection,\n          fields: traverseFields({\n            config,\n            fields: collection.fields,\n          }),\n        }\n      }),\n      globals: (config.globals || []).map((global) => {\n        return {\n          ...global,\n          fields: traverseFields({\n            config,\n            fields: global.fields,\n          }),\n        }\n      }),\n    }\n  }\n"],"names":["getBeforeChangeHook","traverseFields","config","fields","map","field","type","hooks","beforeChange","tabs","tab","blocks","block","relationshipsAsObjectID","collections","collection","globals","global"],"mappings":"AAEA,SAASA,mBAAmB,QAAQ,0BAAyB;AAE7D,MAAMC,iBAAiB,CAAC,EAAEC,MAAM,EAAEC,MAAM,EAAuC;IAC7E,OAAOA,OAAOC,GAAG,CAAC,CAACC;QACjB,IAAIA,MAAMC,IAAI,KAAK,kBAAkBD,MAAMC,IAAI,KAAK,UAAU;YAC5D,OAAO;gBACL,GAAGD,KAAK;gBACRE,OAAO;oBACL,GAAIF,MAAME,KAAK,IAAI,CAAC,CAAC;oBACrBC,cAAc;2BACRH,MAAME,KAAK,EAAEC,gBAAgB,EAAE;wBACnCR,oBAAoB;4BAAEE;4BAAQG;wBAAM;qBACrC;gBACH;YACF;QACF;QAEA,IAAI,YAAYA,OAAO;YACrB,OAAO;gBACL,GAAGA,KAAK;gBACRF,QAAQF,eAAe;oBAAEC;oBAAQC,QAAQE,MAAMF,MAAM;gBAAC;YACxD;QACF;QAEA,IAAIE,MAAMC,IAAI,KAAK,QAAQ;YACzB,OAAO;gBACL,GAAGD,KAAK;gBACRI,MAAMJ,MAAMI,IAAI,CAACL,GAAG,CAAC,CAACM;oBACpB,OAAO;wBACL,GAAGA,GAAG;wBACNP,QAAQF,eAAe;4BAAEC;4BAAQC,QAAQO,IAAIP,MAAM;wBAAC;oBACtD;gBACF;YACF;QACF;QAEA,IAAIE,MAAMC,IAAI,KAAK,UAAU;YAC3B,OAAO;gBACL,GAAGD,KAAK;gBACRM,QAAQN,MAAMM,MAAM,CAACP,GAAG,CAAC,CAACQ;oBACxB,OAAO;wBACL,GAAGA,KAAK;wBACRT,QAAQF,eAAe;4BAAEC;4BAAQC,QAAQS,MAAMT,MAAM;wBAAC;oBACxD;gBACF;YACF;QACF;QAEA,OAAOE;IACT;AACF;AAEA,OAAO,MAAMQ,0BACX,IACA,CAACX;QACC,OAAO;YACL,GAAGA,MAAM;YACTY,aAAa,AAACZ,CAAAA,OAAOY,WAAW,IAAI,EAAE,AAAD,EAAGV,GAAG,CAAC,CAACW;gBAC3C,OAAO;oBACL,GAAGA,UAAU;oBACbZ,QAAQF,eAAe;wBACrBC;wBACAC,QAAQY,WAAWZ,MAAM;oBAC3B;gBACF;YACF;YACAa,SAAS,AAACd,CAAAA,OAAOc,OAAO,IAAI,EAAE,AAAD,EAAGZ,GAAG,CAAC,CAACa;gBACnC,OAAO;oBACL,GAAGA,MAAM;oBACTd,QAAQF,eAAe;wBACrBC;wBACAC,QAAQc,OAAOd,MAAM;oBACvB;gBACF;YACF;QACF;IACF,EAAC"}