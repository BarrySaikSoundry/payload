{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type {\n  Adapter,\n  PluginOptions as CloudStoragePluginOptions,\n  CollectionOptions,\n  GeneratedAdapter,\n} from '@payloadcms/plugin-cloud-storage/types'\nimport type { Config, Plugin } from 'payload'\n\nimport { cloudStoragePlugin } from '@payloadcms/plugin-cloud-storage'\n\nimport { getGenerateURL } from './generateURL.js'\nimport { getHandleDelete } from './handleDelete.js'\nimport { getHandleUpload } from './handleUpload.js'\nimport { getHandler } from './staticHandler.js'\nimport { getStorageClient as getStorageClientFunc } from './utils/getStorageClient.js'\n\nexport type AzureStorageOptions = {\n  /**\n   * Whether or not to allow the container to be created if it does not exist\n   *\n   * @default false\n   */\n  allowContainerCreate: boolean\n\n  /**\n   * Base URL for the Azure Blob storage account\n   */\n  baseURL: string\n\n  /**\n   * Collection options to apply the Azure Blob adapter to.\n   */\n  collections: Record<string, Omit<CollectionOptions, 'adapter'> | true>\n\n  /**\n   * Azure Blob storage connection string\n   */\n  connectionString: string\n\n  /**\n   * Azure Blob storage container name\n   */\n  containerName: string\n\n  /**\n   * Whether or not to enable the plugin\n   *\n   * Default: true\n   */\n  enabled?: boolean\n}\n\ntype AzureStoragePlugin = (azureStorageArgs: AzureStorageOptions) => Plugin\n\nexport const azureStorage: AzureStoragePlugin =\n  (azureStorageOptions: AzureStorageOptions) =>\n  (incomingConfig: Config): Config => {\n    if (azureStorageOptions.enabled === false) {\n      return incomingConfig\n    }\n\n    const adapter = azureStorageInternal(azureStorageOptions)\n\n    // Add adapter to each collection option object\n    const collectionsWithAdapter: CloudStoragePluginOptions['collections'] = Object.entries(\n      azureStorageOptions.collections,\n    ).reduce(\n      (acc, [slug, collOptions]) => ({\n        ...acc,\n        [slug]: {\n          ...(collOptions === true ? {} : collOptions),\n          adapter,\n        },\n      }),\n      {} as Record<string, CollectionOptions>,\n    )\n\n    // Set disableLocalStorage: true for collections specified in the plugin options\n    const config = {\n      ...incomingConfig,\n      collections: (incomingConfig.collections || []).map((collection) => {\n        if (!collectionsWithAdapter[collection.slug]) {\n          return collection\n        }\n\n        return {\n          ...collection,\n          upload: {\n            ...(typeof collection.upload === 'object' ? collection.upload : {}),\n            disableLocalStorage: true,\n          },\n        }\n      }),\n    }\n\n    return cloudStoragePlugin({\n      collections: collectionsWithAdapter,\n    })(config)\n  }\n\nfunction azureStorageInternal({\n  allowContainerCreate,\n  baseURL,\n  connectionString,\n  containerName,\n}: AzureStorageOptions): Adapter {\n  const createContainerIfNotExists = () => {\n    void getStorageClientFunc({ connectionString, containerName }).createIfNotExists({\n      access: 'blob',\n    })\n  }\n\n  const getStorageClient = () => getStorageClientFunc({ connectionString, containerName })\n\n  return ({ collection, prefix }): GeneratedAdapter => {\n    return {\n      name: 'azure',\n      generateURL: getGenerateURL({ baseURL, containerName }),\n      handleDelete: getHandleDelete({ collection, getStorageClient }),\n      handleUpload: getHandleUpload({\n        collection,\n        getStorageClient,\n        prefix,\n      }),\n      staticHandler: getHandler({ collection, getStorageClient }),\n      ...(allowContainerCreate && { onInit: createContainerIfNotExists }),\n    }\n  }\n}\n\nexport { getStorageClientFunc as getStorageClient }\n"],"names":["cloudStoragePlugin","getGenerateURL","getHandleDelete","getHandleUpload","getHandler","getStorageClient","getStorageClientFunc","azureStorage","azureStorageOptions","incomingConfig","enabled","adapter","azureStorageInternal","collectionsWithAdapter","Object","entries","collections","reduce","acc","slug","collOptions","config","map","collection","upload","disableLocalStorage","allowContainerCreate","baseURL","connectionString","containerName","createContainerIfNotExists","createIfNotExists","access","prefix","name","generateURL","handleDelete","handleUpload","staticHandler","onInit"],"mappings":"AAQA,SAASA,kBAAkB,QAAQ,mCAAkC;AAErE,SAASC,cAAc,QAAQ,mBAAkB;AACjD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,eAAe,QAAQ,oBAAmB;AACnD,SAASC,UAAU,QAAQ,qBAAoB;AAC/C,SAASC,oBAAoBC,oBAAoB,QAAQ,8BAA6B;AAwCtF,OAAO,MAAMC,eACX,CAACC,sBACD,CAACC;QACC,IAAID,oBAAoBE,OAAO,KAAK,OAAO;YACzC,OAAOD;QACT;QAEA,MAAME,UAAUC,qBAAqBJ;QAErC,+CAA+C;QAC/C,MAAMK,yBAAmEC,OAAOC,OAAO,CACrFP,oBAAoBQ,WAAW,EAC/BC,MAAM,CACN,CAACC,KAAK,CAACC,MAAMC,YAAY,GAAM,CAAA;gBAC7B,GAAGF,GAAG;gBACN,CAACC,KAAK,EAAE;oBACN,GAAIC,gBAAgB,OAAO,CAAC,IAAIA,WAAW;oBAC3CT;gBACF;YACF,CAAA,GACA,CAAC;QAGH,gFAAgF;QAChF,MAAMU,SAAS;YACb,GAAGZ,cAAc;YACjBO,aAAa,AAACP,CAAAA,eAAeO,WAAW,IAAI,EAAE,AAAD,EAAGM,GAAG,CAAC,CAACC;gBACnD,IAAI,CAACV,sBAAsB,CAACU,WAAWJ,IAAI,CAAC,EAAE;oBAC5C,OAAOI;gBACT;gBAEA,OAAO;oBACL,GAAGA,UAAU;oBACbC,QAAQ;wBACN,GAAI,OAAOD,WAAWC,MAAM,KAAK,WAAWD,WAAWC,MAAM,GAAG,CAAC,CAAC;wBAClEC,qBAAqB;oBACvB;gBACF;YACF;QACF;QAEA,OAAOzB,mBAAmB;YACxBgB,aAAaH;QACf,GAAGQ;IACL,EAAC;AAEH,SAAST,qBAAqB,EAC5Bc,oBAAoB,EACpBC,OAAO,EACPC,gBAAgB,EAChBC,aAAa,EACO;IACpB,MAAMC,6BAA6B;QACjC,KAAKxB,qBAAqB;YAAEsB;YAAkBC;QAAc,GAAGE,iBAAiB,CAAC;YAC/EC,QAAQ;QACV;IACF;IAEA,MAAM3B,mBAAmB,IAAMC,qBAAqB;YAAEsB;YAAkBC;QAAc;IAEtF,OAAO,CAAC,EAAEN,UAAU,EAAEU,MAAM,EAAE;QAC5B,OAAO;YACLC,MAAM;YACNC,aAAalC,eAAe;gBAAE0B;gBAASE;YAAc;YACrDO,cAAclC,gBAAgB;gBAAEqB;gBAAYlB;YAAiB;YAC7DgC,cAAclC,gBAAgB;gBAC5BoB;gBACAlB;gBACA4B;YACF;YACAK,eAAelC,WAAW;gBAAEmB;gBAAYlB;YAAiB;YACzD,GAAIqB,wBAAwB;gBAAEa,QAAQT;YAA2B,CAAC;QACpE;IACF;AACF;AAEA,SAASxB,wBAAwBD,gBAAgB,GAAE"}